%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: logo_judo.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: atelier1
%%CreationDate: 1/24/08
%%BoundingBox: 0 0 226 208
%%HiResBoundingBox: 0 0 225.7627 207.2735
%%CropBox: 0 0 225.7627 207.2735
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x409 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 120 8%%BeginData: 9428 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD6BFFA8FD7FFFA8A8FD70FFA9FD0DFFA8FFA8FD07FFA8FFA8FFA8%FFA8FFA8FD5EFFA8A8A8A9A8A8A8FFA8FFA8FFA8A9A8A9FD13A8FD5EFFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0DFFA8FD5CFFA8FD05%FFA8FFFFFFA8FFA9FFA8FD13FFA8FD5CFFA8FD21FFA9A9FD5CFFA8A8FD21%FFA8FD5CFFA8FD21FFA8FD5CFFA8A8A8FD1FFFA8A8A8FD5CFFA8FD0DFFA8%FD13FFA8FD5CFFA8FD0DFFA8A8A8FD11FFA8A8FD5DFFA9FD0BFFA8FFA8FD%13FFA8FD5CFFA8FD0BFFA8A9A8FFA8FD11FFA8FD5DFFA9A8FD0BFFA8FFFF%FFA8FD0FFFA8FD5EFFA8FD0BFFA8A8A8FFFFFFA8A8A8FD0BFFA8A8A8FD5E%FFA8FD09FFA8FFA8FD05FFA8FFA8FD0BFFA8FD43FFA9A8FD19FFA8FD09FF%A8A9A8FFA8FFA8A8A8FFA8A8A8FD09FFA8A8FD43FFA8AFA8FD17FFA8FD09%FFA8A9A8FFA8FFA8FD05FFA8FFA8FD09FFA8FD42FFA8A8A8FD09FFA8FFFF%FFA8FD0BFFA8FD07FFA8A8A8FD05FFA8FFA8FFFFFFA8A8A8A9A8FD05FFA8%FD36FFA9FD0DFFA8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FD07FFA8%FD07FFA8FD07FFA8FFA8FFA8FFFFFFA8FD09FFA8FD34FFA8A8A8A9A8A8A8%FFA8A8A8FFA8A8A8FFA8A8A8A9A8A8A8A9A8A8A8FFA8AFA8FFA8A8A8A9FD%06FFA8FD0BFFA8A9A8FFA8FFA8A8A8FD0BFFA8FD36FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA9FD0DFFA8FD05FFA8FD0DFFA8FFFFFFA8FF%A8FD0DFFA8FD34FFA8FD07FFA8FFFFFFA8FD15FFA8A8A8FD05FFA8FD0BFF%A8A8A8FFFFA8A8FD0DFFA8A8FD33FFAFFD23FFA8FD05FFA8FD0DFFA8FFA8%FFA8FD0FFFA8FD34FFA8FD21FFA8FD07FFA8FD0CFFA9A8FFA9FFA8FD0DFF%A8A8FD33FFA8FD21FFA8FD07FFA8FD21FFA8FD32FFA8A9A8FD0FFFA8FFA8%A9A8FD0CFFA8A8FD07FFA8FD0BFFA8FFFFFFA8FD0FFFA8A8FD33FFA8FD0F%FFA8FFA8FFA8FFAFFD0BFFA8FD07FFA8FD0DFFA8FFA8FFA8FD0FFFA8FD32%FFA8A8A8FD0BFFA8A8A8A9A8A9A8FFA8FD0BFFA8A8A8FD07FFA8FD0BFFA8%A8A8FFA8FD0FFFA8A9FD33FFA8FD09FFA8FFA8FFA8FFA8FFA8FFA8FD0DFF%A8FD08FFAFA8FD0BFFA8FFFFFFA8FD0FFFA8FD32FFA8A8A8FD09FFA8FFA8%FFA8FFA8A8A8FFA8FD0BFFA8FD09FFA8FD0BFFA8FFA8A9A8FFA8FD0DFFA8%A8A8FD32FFA8FD0FFFA8FFA8FFA8FFA8FD09FFA8FD0BFFA8FD0BFFA8FFFF%FFA8FFA8FD0DFFA8FD32FFA8A8A8FD0DFFA8A8A8FFA8A8A8FFA8FD08FFAF%A8FD09FFA8FD0DFFA8FFA8AFA8FD0FFFA8FD32FFA8FD0DFFA8FFA8FFA8FF%A8FFA8FD09FFA8FD09FFA9FD0DFFA8FFA8FFFFA9FD0EFFA8FD18FFA8FD19%FFA8FD0BFFA8FFA8A8A8A9FD05A8FD09FFA8A8A8FD09FFA8FD0BFFA8FFA8%FFFFFFA8FD0DFFA8A8A8FD16FFA8FFA8FD19FFA8FD09FFA8FFA8FFA8FFA8%FFA8FD0DFFA8FD19FFA8FD11FFA8FD18FFA8FD0DFFA8FD0BFFA8FD07FFA8%A9A8A8A8FFA8A8A8A9A8FD05FFA8FD07FFA8A9FD0AFFA8FD0BFFA8FFA8A8%FFFFA8FD07FFA8FD07FFA8FD0AFFA8FD0BFFA8FFA8FD05FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FD07FFA8FD07FFA8FD05FFAFFFA8FFFFFFA9FFA8FFA8FD%07FFA8FD0BFFA8FD0BFFA8FFA8FFFFFFA8FD07FFA8FD05FFA8FD0AFFFD07%A8A9A8A8A8A9FD0FA8FFA8FFA8FFA8A8A8FD05FFA8FD0DFFA8FFFD0BA8AF%FD04FFA8A8A8FD09FFA8FD0BFFA8A8A8A9A8FFA8A8A8FFA8FFFFFFA8FD07%FFA8FD08FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0FFFA8FD07%FFA8FD0DFFA8FFA8FFA8FD0DFFA8FD0BFFA8FD09FFA8FFA8FD05FFA8FFA8%FFA8FFA8FFA8FD0EFFA8A9A8FD09FFAFFD16FFA9A8FD05FFA8A8FD0AFFA8%A8A8FFA8A8A8FD0DFFA8A8A8FD09FFA8A8FD08FFA8FFA8FD07FFA8A8A8A9%A8A8A8FD07FFA8FD08FFA8FD21FFA8FD07FFA8FD09FFA8FFA8FFFFFFA8FF%A8FD0DFFA8FD0BFFAFFD11FFA8FD0FFFA8FD06FFA8A8A8FD1FFFA8A8A8FD%05FFA8FD07FFFD07A8FFFFFFA8FD0DFFA8A8A8FD09FFA8FD12FFA8A8FD0D%FFA8FD08FFA8FD21FFA8FD07FFA9FD0BFFA8FFFFFFA8FFA8FD0DFFA8FD0B%FFA8FD0DFFA8FFFFFFA8FD0FFFA8FD06FFA8A9FD20FFA8FD07FFA8FD0BFF%A8A9A8FFFFFFA8FFA8A8A8AFFD0AFFA8FD09FFA8FD0FFFA8FFA8A8A8FD0D%FFA8A8FD07FFA9FD20FFA9A8FD07FFA8FD0AFFAFA8FFA8FFA8FFFFFFA8FF%A8FD09FFA8FD0BFFA8FD07FFA8FD07FFA8FFA8FFA8FD0DFFA8FD06FFA8FD%21FFA8FD07FFA8A8A8FD07FFA8AFA8FFA8FFA8A8A8FFFFFFA8A9A8FD08FF%A8A8FD09FFA8FD08FFA8A8FFFFFFFD05A8FD0FFFA8A8FD05FFA8FD0DFFA8%FFA8FFA8FD0FFFA8FD09FFA8FD0FFFA8FD0FFFA8FD0BFFA8FD0FFFA8FD11%FFA8FD05FFA9A8FD0DFFA8AFA8FFA8FD0DFFA8A8A8FD07FFA8A8AFFD0FFF%A8FD0FFFA8FD09FFA8FD09FFA8FD05FFA8AFA8FFA8FD0DFFA8A9FD05FFA8%FD11FFA8FD0FFFA8FD09FFA8FD33FFA8FFA8FFFFFFA8FFFFFFA8FD0FFFA8%FD04FFA8A9A8FD0DFFA8A8A8FFA8FFA8FFA8FD09FFA8A9FD08FFA8A8AFFD%1FFFA8FD09FFA8FD07FFA8FFA8A8A8FFFFFFA8FFAFA9A8FD0DFFA8A8A8FD%04FFA8FD09FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0BFFA8FD09FFA8FD39FF%AFFFA9FFA8FD0FFFA8FD04FFAFFFA8FD09FFA8FFA8FFA8A9A8FFA8A9A8FF%A8FD09FFA8FD09FFA8FD21FFA8FD09FFA8FD09FFA8FD05FFA8FFFFA9A8FD%0DFFA8A8A8FD04FFA8FD0FFFA8FFFFFFA8FD17FFA8FD0FFFA8FD25FFA8FD%04FFAFA8FFA8FD0FFFA8FD04FFA8A8A8FD0DFFA8A8A8FD0FFFA8FD09FFA8%A8A8FD0DFFA8A8A8FD0FFFA8FD09FFA8FD09FFA8A8A8FFFFFFA8FFA8FFA8%FD0DFFA8A8A8FD04FFA8FD0DFFA8FFA8FD0FFFAFFD0BFFA8FD0FFFA8FFFF%FFA8FD0DFFA9FD07FFA9FD09FFA8FFA8FFA8FFA8FD05FFA8FFFFFFAFFD09%FFA8FD05FFA8A8FD0EFFA9A8FD0FFFA8FD09FFA8A8A8FD0DFFA8A8FFFFA8%FFA8FFA8FD09FFA8FD11FFA8FD05FFA8A9A8A8A8FFA8A8A8A9A8FD09FFA8%A9FD05FFA8FD0FFFA8FD10FFA9A9FD09FFA8FD0BFFA8FFFFFFA8FFFFFFA8%AFA8FD0BFFA8FD07FFA8FD0FFFA8FFA8FFA8FFA8FFA8FD0BFFA8FD04FFA8%A8A8FD07FFA8A8A8FFA8A8A8A9A8A8A8A9A8A8A8FD09FFA8FD09FFA8A8A8%FD09FFA8A8A8FFA8A9A8A8A8FFA8A8A8FFA8FD07FFA8A8A8FD05FFA8FD11%FFA8FFA8A8A8FD0DFFA8FD06FFA8FD09FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FD15FFA8FD0BFFA8FFFFFFA8FD05FFA8FFA8FFA8FD07FFA8FD2BFFA8FD04%FFA8A9A8FD07FFA8FD05FFA8FFA8FD0FFFA8FD09FFA8FFA8FD09FFA8FFFF%FFA8FFA8FFFFFFA8A8A8A9A8A9A8FD05FFA8A8A8FD05FFA8FD23FFA8FD06%FFA8FD0DFFA8FFA8FFA8FD19FFA8FD09FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FD0BFFA8FD29FFA8FD06FFA8A8A8FD0BFFA8FFA8A8A8FFA8A8A8FD0BFFA8%FD09FFA8A8A8FD09FFA8A8A8FFFD09A8FD09FFA8A8A8FD29FFA8FD06FFA8%FD0BFFA8FFFFFFA8FFFFFFA8FFA8FD15FFA8FD0BFFA8FFFFFFA8FFA8FFA8%FFA8FD0BFFA8FD15FFA8FD13FFA8FD07FFA8A8FD07FFA8FFA8FFFFFFA8A8%A8FFFFFFA8A9A8A8A8FD07FFA8FD09FFA8A8FD0AFFA8FFA8FFA8A8A8FFFF%FFA8A9A8FD0BFFA8FD09FFA8FFA8FFA8FFA8A8A8A9A8A9A8FFA8A8A8FFA8%FFA8FD09FFA8A8A8FD06FFA8FD0DFFA8FFA8FD05FFA8FFA9FFA8FD07FFA8%FD09FFA8FD09FFA8FFA8FFA8FFA8FFA8FFFFFFA8FD0BFFA8FD07FFA8FFA9%FFA8FFFFFFA8FD09FFA8FFA8FFA9FFA8FFA8FFA8FD05FFA8FD06FFA8A9A8%FD0DFFA8A9FD10FFA8A8FD08FFA8FD09FFA8A8A8AFA8FFA8A9A8A8A8FFA8%A8A8FD0AFFA8A8FD17FFA8A9A8FD05FFA8FFFD05A8FFA8FD08FFA8FD21FF%A8FD09FFA9FD09FFA8FFA8FFA8FFA8FD05FFA8FD0BFFA8FD19FFA8FFA8FD%09FFAFFFA8FD0AFFA8FD20FFA8AFFD07FFA8FD09FFA8A8A8FFA8A8A8A9A8%FFFFFFA8A8A8FD0AFFA9A8FD17FFAFFFA8FD16FFA8FD21FFA8FD09FFA8FD%07FFA8FFFFFFA8FFA8FFA8FD05FFA8FD0BFFA8FD19FFA8FFA8FD16FFA8FD%1FFFA8A8A8FD07FFA8FD07FFA8A8A8FFA8A8A8FFA8A8A8FFFFFFA8A8A8FD%0BFFA8FD18FFA8A8FD16FFA8FD21FFA8FD0FFFA8FFA8FFFFFFA8FFFFFFA8%FD05FFA8FD0BFFA8FD19FFA8FFA8FD16FFA8FD1FFFAFA9A8FD07FFA8FD05%FFA8A8A8FFFFFFA8AFFD06FFA8FFA8A9A8FD0BFFA8FD18FFA8A8FD16FFA9%FD21FFA8FD0FFFA8FD0DFFA8FFA8FD0BFFA8FD19FFA8FFA8FD16FFA8FD11%FFA8FD0EFFA8A8FD07FFA8FD05FFA8FD0FFFA8A8A8FD0AFFA8A8FD17FFA8%A9A8FD18FFA8FD0BFFA8FD05FFA8FD0DFFA8FD07FFA8FD23FFA8FD19FFA8%FFA8FD16FFA8FD07FFA8A8A8FFFFFFA8FFFFFFA8FD0FFFA8FD2AFFA8AFFD%17FFAFFFA8FD16FFA8FD09FFA8FD05FFA8FFA8FFA8FD0DFFA9FD2BFFA8FD%19FFA8FFA8FD16FFA8FD07FFA8FFFD0BA8FD0DFFA8FD05FFA8FD23FFA8FD%1AFFA8A8FD22FFA8FFA8FFA8FD3DFFA8FD19FFA8FFA8FD16FFA8FD07FFA8%FD05FFA8A8A8FFA8FD0FFFA8FD29FFA8FD1AFFA8A8FD20FFA8FD05FFA8FF%FFFFA8FD21FFA8FFA8FFA8FFA9FFA8FD0DFFAFAFFD1AFFA8FFA8FD16FFA8%FD07FFA8A8A8FFFFFFA8A9A8FFA8A8A8FD0DFFA8FD07FFA8FFA8FFA8FFA8%A8A8AFA8A8A8FFA8FFFD05A8A9A8A8A8FFA8FD06FFAFA8FD1BFFA8FD20FF%A8FD09FFA8FD0FFFAFFD17FFA8FFAFFFFFFFA8FFA8FFA8FD05FFA8FD34FF%A8FD09FFA8FFFFFFA8FFA9FFA8A9FD0EFFA8FD17FFA8A9A8FD07FFA8FFA8%A9A8A8A8A9FD33FFA8FD09FFA8FD05FFA8FFFFFFA8FD0FFFA8FD17FFA8FD%0DFFA8FFA8FD34FFA8FD07FFA8FFFFFFA8FFA8FFA8FFA8A8A8FD0DFFA8FD%17FFA8A8A8FD42FFA8FD07FFA8FFA8FFFFFFA8FFA8FFA8FFA8FD0FFFA8FD%17FFA8FD43FFA9A8FD05FFA8FFA8FFA8A8A8FD05FFA8A8FD0EFFA8FD17FF%A8A8A8FD42FFA8FD0BFFA8AFA8FD15FFA8FD17FFA8FFA8FD40FFA8FD0DFF%FD07A8FD0FFFA8FD17FFA8A8A8FD52FFA8FFA8FFA8FFA8FD0DFFAFFD17FF%A8FFAFFD40FFA8FD11FFA8FFA8FFA8A8A8A9A8A8A8FD07FFA8FD17FFA8A9%A8FD58FFA8FFA8FFA8FD21FFA8FD42FFA8FD17FFA8FFA8FD09FFA8FD17FF%A8A8A8FD7EFFA8FD66FFA8FD17FFA8A8A8FD64FFA8FD19FFA8FFA8FD62FF%A8A8A8FD17FFA8A8A8FD4CFFAFFFA8FFA8FFA8FFA8FD0FFFA8FD19FFA8FD%42FFA8FFA8FFA8FFA8A8A8FFA8A8A8FFA8FFA8FFA8A8A8FFA8A8A8FFA8FD%07FFA8FD5EFFA8FD0FFFA8FFA8FD05FFA8FFA8FFA8FD73FFA8A8FD07FFA8%FFFD07A8FD6EFFA8FFA8FD0DFFA9FD6FFFA8A8FD7EFFA8FFA8FD7CFFA8A9%A8FD7EFFA8FFA8FD7CFFAFFFA8FD7EFFA8FFA8FD7DFFA8A8FD7EFFA8FFA8%FD7DFFA8A8FD7EFFA8FFA8FD7CFFA8A9A8FD7EFFA8FFA8FD7CFFA8FFA8FD%7EFFA8FFA9FD7EFFA8FD6AFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2007-08-21T15:10:15+02:00</xap:CreateDate>
         <xap:ModifyDate>2008-01-24T15:40:39+01:00</xap:ModifyDate>
         <xap:MetadataDate>2008-01-24T15:40:39+01:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>236</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA7AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXEhQSTQDcnFUCdaseRWrU/mpt/XDSrxq1gf920+Y&#xA;b+mClXHU7Ef7uH44qhtQ1C3ezdYZQXNBQVBpXfCqG0rUILeF0mY9aqKE9sShFtrlmOgc/ID+JxpK&#xA;m2vQ/sxMfCpA/rjStDXtifq54jvy/sxpVaHWrWRgrBkJNKmlPvrjSo/ArsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVQ2pyenYykdSOI/2RpiqE03TraSzV5owzOSQdwadOx9s&#xA;Kq50axP7JHyY42rR0ax2+FhT3642rY0axH7JPzY42q9dMsF6Qg18ST+s4LVeljZp9mFd9txX9eKr&#xA;xb26/ZiQfJRiqpQdO2KpRehZdVggVQAlC23+yP4YVTfArsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVSzXX/cxRD7TNUAewp/HCFR9tH6UEcfdVAPzpgVUxVpmVVLMaKoqT7DF&#xA;UNYagl2HovBk7VrsemKorFXYq7FXEgAkmgG5OKpTpYM97PdNvTZfp/sGEqm2BXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqk2rsTqECDsF+8thCpzgV2KpTrV5QfVkO53kp4d&#xA;hhCqX6NmgtEuYmZbhfidR4f2d8VRthqcdwAj0Sbw7H5Y0qOwK7FUJqkvp2MhBoW+EfT1/DEK7TLc&#xA;Q2iD9p/jb5nFUXirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqD1WeWG0LRnixYLXuAcQrWkTyz&#xA;WpaVuTK5UE9aUB/jhKo3Aq0zRL1dR8yMVWfXLT/f8f8AwS/1xVUSSNxVGDDxBr+rFW8VSe9AbWYQ&#xA;QaDhWnzwqnGBUJqF8LZOK/FO/wBhev0nFUDb6VcurXEhHrk8kV69a1q2G1aaG75c7q8EJHYNU/Qo&#xA;piq2709HX61ZHmh3ZR1B9v6YobsdYmWkcwMi/wAw+0Pn440lOkdXQOpqrCoOBUv1s1ihi/nk/UKf&#xA;xwhUxVQoCgUAFAMCuxV2KuxV2KuxV2KuxV2KuxV2KuxVp3CIzt0UEn5DFUgtra6vmklEtGUjdq9/&#xA;A+2FCv8Ao7VlFFn+52H9MUrvqes8a+sa+HM4qsfTdVlHGWUFetGYkV+7FW4tGvVBUzhF60Usd/lt&#xA;jarhoUjN+8nqPYEn8Tjarl0CP9qYn5AD+uNqqjQ7MAgs5J71G34Y2qB1Gxis/TaJ2MjHYGldvlTF&#xA;CeoGCKGNWoKn3wJSqd+GuRnsQB94phVNsCrRFGHLhRzPVqb/AH4qluuCVY0kR2Ck8GUEgeIOEKpv&#xA;a6ZDaGQnnIUqoZt6kbbCmKr9CglVHmJIjfZV8ad8SqaBEBLBQCepA3OBW8VSrXGIa39iTXw6YQqa&#xA;4FdirsVdirsVdirsVdirsVdirsVdiqF1SQpYykdSAv0MaHEKs0aPhYqe7ksf1fwwlUbgV2KtM6op&#xA;ZiFUdSTQYqg5dYsozQMXP+QP60w0qJt7iK4jEkZqp28CDgVUxV2KpRcUudYjjH2Yqcvo+I/0wqm+&#xA;BUpu6DWoK0Gy7n6cKptgV2KobUFt2t+E7FEYgBx2PbFVFrDSoYwZAAP5mY1P3HCqMgSJIlWEAR0q&#xA;tNxQ74FX4q7FUs15R6Ebdw1APYj+zCFTMGoB8cCuxV2KuxV2KuxV2KuxV2KuxV2KuxVK9eekESfz&#xA;MT9w/twhUwt1C28agUAUbfRgVUxVA3s2pqxW3iBTtJsT9xwqlMiXLyA3jtGO5etaf5K4oUXWF5uM&#xA;Pwx9AXI+84VT3TTaRRehFMJHJ5Nv1NOw+jAlG4FWyOI42c9FBY/QK4qlujRu7y3Um5c0B/E4SqaY&#xA;FSjUwv6Ut/Gik0/1jhVN8CuxVLtXRpERWYRwKeTyHep7AAb1whUAiR/agi5INvXuCAv0DYfrxQnN&#xA;ncwzxAxkHjQMAKUPywJV8VdiqA1tOVny/kYH79v44QqLt25W8TeKKfvGBVTFXYq7FXYqsmmjhjaS&#xA;Q0RepxVZa3cNyheImgNCDsRiqtirsVdirsVdiqUa6C0sCDcmoA9yRhCpso4qB4CmBW8VQ1zqVrBU&#xA;M/Jx+wu5xVJb/UDdEfu1UL0PVvvwoQylKEFSWP2aHYfhhVNdL0uQOtxN8PHdE718TgJSm+BUJqrl&#xA;bCWnU0H3kYhV+nx+nZxL34gn6d8VRGKpTqaL+kbZmPEGgr8mr/HCFTbArsVQ96Low0t1V2OxD+Ht&#xA;XbFUt+prJbSzzT+s8amiKdlIGFUTocSratJ+07b/ACHTEqmJIAJOwG5OBXAggEGoO4IxVC6o3Gwm&#xA;NK7AfeQMQq7Tm5WMJ/yafdtiqIxVLr7VmgnMMcYZlpyJPiK9sNKorr4/ag+kN/ZjSrxr0NN4mB9i&#xA;DjSqF9q0dxbtEsZUkjckdjXGkKWn6iLVHT0zIXII3p/A4qiTrdwTRbeh8CSf4DGkuOo6sTRban+w&#xA;Y/xxVyza452TiCe4A/XirZvdXhBaWEFBuTTt9BxVH2Vz9Zt1l48SdiO1R4YFQGrhGvLZXFVbY706&#xA;mnXCFTbAqldW5ni9MSNHvUlepHhiqEGkWkUbOEaZ1BKqx6n5CmG1SieBYo15OpmYksikHiPemFCL&#xA;ttRjjjVY7MMyAAuDvXx+zgVdJfaxIeUcTIvgEJ/WDilHabeS3COJV4yRkA9q19sCqeuGlmB4uP1H&#xA;CFRsBrBGfFR+rAq/FUr1luE1q1eNCfi60pTthCppgV2KpbrF0qIsccjLPWoCGm3vTCFUtLtJAlxF&#xA;NGyGRQOR8CDiVW2F59Sd7W5BUBqhvA/0OKpi2oWSoX9ZSPAGp+7rgVD6NcNLFIp2CN8I8A29MJVF&#xA;Xq8rSYUr8BNPkK4FUNGatio/lLD8a/xwlUbgVJtMHr6lNOTULUqf9Y0H4YSqbtFG32kB+YGBVot7&#xA;cAgRJQih+EbjFXC3twaiJK/6oxVeI0XooHyGKt4q7FXYqgdZlKWZUdZGC/R1/hhCq9hF6VnEnfjU&#xA;/M74FS/W1rcW+9K7V8NxhCpvgVD3t6tsi/CXd6hFHemKpNe3GouoaYNHExoqfZH9ThQrSadEml+v&#xA;QmYqrEk9ASO3yOKVbQyiwSsxAqwG5p0GJVNQQRUbjArsVQGtoWsqjojAn9X8cIVFWZraQn/itf1D&#xA;AqriqWayisbctuAWqPHYGn00whUzAoKYFcRUEVp74qoR2NrHJ6gSshNebEsa/Tiqos8LMUV1Lg0K&#xA;13r8sVS25ms7i8NtNGeQISOVTvU9a/ThVf8AoG2r/ePTw2/pjao22tIbZCkQoDuSTUnAqo6hkZT0&#xA;YEffiqXaESIJUPVX3HzFP4YSqNupPTtpH68VO2BUFoUXG2eTu7U+hf8AbwlUywK7FVKS7to24vKi&#xA;sOoJFcVajvbSR+CSqzdhXr8sVVsVdirsVSi/IudThth0SnIdt/iP4YVTfAqU67yVreRTQgmnz2OE&#xA;Kmy14ivWm+BXYqll/a3V5dCIDhBGPtnoSR28cKoS5Op28TQykvCwpypUU+fbFCrY2S3OmspNG9Qs&#xA;je9AMUquk297bzPHKpEVK9ajlXtiVTTAqE1ZWNhLTtQn5AjEKv041sYT/kgfdtiqIxVL9UAM9pWl&#xA;OZ69O2FUwwKpXTzpCXgUO678T3HelMVWW900tv6piYMNineo8K0xVJ76d3uRcxxNFwIHJh1YdNsK&#xA;ETZWFwWFylwnJ/iLBeR33PWlMUpvgV2KuxVLNJ+G6vE8H2+gnCVV9XYiwk9+I/4YYArWjilgh8Sx&#xA;/GmEqjcCqMt5axNxklVW8Cd8VSrUp7BpBJGqyu1Q5qw6dOlMKELZm0SRZJ2aqmoRR3Hia4qnltqN&#xA;tctwjJ50rxIpgSicVdiqVaQqy3FxdHclqL7V3wlU1wKlWuqx+r8RXdtutTthCpon2F7bDbAreKux&#xA;V3XFWlREFEUKOtAKYq3irsVUrpUa2lVzRSpqfDbriqhpDVsIx/KWH4k4SqMwKgryjX1mhAbdyQfY&#xA;YqjcVQd7JfjkIFCRgEtMSCdhXYYqpaPPdzI7TNyQUCk9a98JVS1Vg15FE4DIF5AFuK1JP2j4UGIV&#xA;ZCxTVkWLiquo5BPskcanFCc4EuxV2KpZYEfpS7A71P44VVdZP+gt7sv68QqtYIUs4lNNh26bnr9O&#xA;BURiqhLYWksplkjDOepqe3tXFUr1AwtyhtIlCRjlLIoHbtXChF21pDc6dCrVUEfEVoCaHxIOKUTb&#xA;2Vtb7xIA3Qsdz95wKr4qsnfhBI/8qsfuGKoPRQBZD3Y1wlUfgVLdcH7iIg0Ifb7jhCphEaxoaEVA&#xA;ND16d8CrsVdiqE1O6ltrdXjpyLhd99qE/wAMQqoLyBViErqkkighfniqvUVp3xV2KrJk5wyJ/MpX&#xA;7xTFUDoTVtXX+Vz+IGEqmOBUIVD6mrA/3Ue492OKovFUPcXtnGjCSRTSoZAan5UGKpXpeoQ26yRy&#xA;khCaptWnjhKF92Rd3sUlsUlAUDi5oKgnqpoe+KVRLW6ivvrdyyCKNSZJKhVACkd6bDFUyM8A6yKP&#xA;9kMCrwQRUGoPQjFXYqlmniup3Z8CR/w2FVXWv94T/rDEKracxaxhJFPhA+7bAqIxVLG12EMQI2IB&#xA;oDUbjDSoe81YTW7QiIpyoAxPYGvSmNIXQayIbeNBASEAWvKgNPoxpKtb62ssyxtCVDGgIPLc+1Bj&#xA;SpngVRvK/VJqdeDfqxVC6J/vEf8AXP6hhKphgVL9bUtaIAKn1BQDvUEYQqLtQwtogzcjxFWHfbAq&#xA;riqA1e8e3hVY24yOevgB1whVHU2ZtLgMh/eEqTXqTxOKrRS8iknjtqSR8ViYmtT06bDbFUFCA10Z&#xA;JpvhjIZ5K7kjsvc4oT21vre55CJqleoIocCVfFUr0X4JbmI/ssNvkSMJVNMCoe1HJppSN3chW8VU&#xA;BR+o4qiMVWNBA7h2jUsOhIFcVbeON04OoZf5SNsVSi80RgS9sajr6Z6j5HDaoePS9QkNGUqvcsf4&#xA;YoTG00aCJg8p9Vx0HRR9HfG0phgV2KpdpKhnupwah5CAfx/jhKqms/7wt81/XiFVNNYNYwkdlpv7&#xA;GmBUTiqGmmtLNa8QrN0RAKsfoxVK7+C4eE3dyeLEhY4vAHxwoXRNeaeiSgepbSKrMvgSPwxVH2+q&#xA;2c23L02/lfb8emCkozrirUgBjYEVBBqMVS7QT/orjwc/qGEqmWBUDrJP1QAd3UYhUZEoWJFG4CgA&#xA;/IYquxVItYZkvQxIYgAqtKgD3+nCEIe6E0i+tJMJSGCMN/hJBNOgHbtiq43N0xaC3LCFiQiL4eH9&#xA;cVb0u1guZmjlB2XkKGnQgeHviVTy3s7a3qYkCk7E7k/jgSrYqllp8OsXKdOQ5fTUH+OFUzNabYFa&#xA;VVVQqigHQYq3iriQOppiqi15aKaGZAfDkMVcL2zPSdP+CGKqiSRuKowYeINf1YquxV2KqN7N6NrL&#xA;J3CkD5nYYqoaPGUsVJ/bJb+H8MJVdq3/ABz5f9j/AMSGAK7SafUI6e/T54lUXiqgllbrN6xBeX+d&#xA;jU/RiqD1WwuZnDwksDQNHWgHvhCpgkYEKxsAQFCkHcGgpgVBPodozlgzID+yKU+iow2qJtLSO1Qp&#xA;GzFSa/Ea/qpgVX64qlujqY3uoiKFHH8f6YSqZYFQWqgNDEpNOUqCvzriFRqghQCakDc4q0zKqlmN&#xA;FUVJ9hirF7idprh5j1Y1A8B2GSQiJiDBckbcpUan+sGOBUdpyXtu6RMoe2cclde1RXFKhpi+nqss&#xA;fQDmo+g4qnWBXYqli/Drrf5SfwH9MKpngVQktnkJJnkUdlTitPwriql+jUP2p52+b/2Yq1+h7Mmr&#xA;c2PiWxtVy6VYL/uoH5kn+ONqh9Us7WKzd44wrAihHzwhUNpVlFcRyMzMrKwAZTTtiUIv9G3ke9vd&#xA;N/qvuP4/qxSsafWYPtxiZe5UV/4jT9WKqN1czXyxwLEyHmPUJ6A9BiqcoioiouyqAB8hgVD6moax&#xA;mB8K/cQcVW6Vx+ox8V4jfb6cSqLxV2KuxV2KuxV2KuxVLNPdv0ndq3Uk9fBWoPwOFUzwKg78Fp7R&#xA;KVBk5H/Y74qjMVSvV7otSzh+J3I5gfgMIVBX1mLW2hVt5ZCWc+FANvxxQr3ulyiNZIasWCiSP3A6&#xA;4pTGwkAt44nYCZFAaOo5CnSo+WBUvt6fpx6dKv8AqwqnOBXYqlf/AEvv9j/xrhVNMCuxV2KuxV2K&#xA;oLWP94H+a/rwhVDQf7mX/WH6sSqaYFdirsVdiqje1+pzU68G/ViqG0RlNmQBQqxB+4YSqPwKtSSN&#xA;68GDcTRqGtDiqm15brOIGekp6Dfv74q1d3sNqqmSp5GgC9cVVlYMoYdGAI+RxVvFXYqlcZ4a7IP5&#xA;1/41B/hhVNMCoanqX5NdoUFR7vX+AxVEmtNtj44qhbSwjtyZGPqTtu0h9/DFVaa2gmKmVA3A1Wvb&#xA;FVTFUHe6bHcH1FPpzDo47/PFUPp+m3EN0ZpiDQGhBqSThVNMCuxVLYVL63O3ZFA/ADCqZYFdirsV&#xA;dirsVQWsf7wP81/XhCqGg/3Mv+sP1YlU0wK7FXYq7FVO5FbaUH+Rv1YqhtIr9TG1BX4fuFT9+JVG&#xA;4qlklu2nia5hPqFzQIRsKmtTQ74VSy8muJnE0sfpkigYAgGnzwoVvT1G4dZ2i9TYceQHGnyNMCpx&#xA;YvdtEfrKhXB+GlOlPbAlEYq7FUsuhw1i3f8AnFPp3H8cKpmSAKnpgVTii4s7n7UjVPyAoB92KqmK&#xA;uxV2KuxV2KuxV2KuxVLdIcyy3U5/bcUPtvthKplgV2KuxV2KuxVBax/vA/zX9eEKoaD/AHMv+sP1&#xA;YlU0wK7FXYq7FVO5/wB5pf8AUb9WKqOl/wC8UexG3fEqij0xVJrH6xFqZgeVgo5UViTyHb+uFW9a&#xA;HK5gTb7JNGPEdfE/LEKo6jbRwwQMsYjkavMKSRtTuScQhPIiTEhO5Kiv3YErsVdiqWar8N3Zv/lf&#xA;qIwhUzwKpSzTqaRwNJ78lA/E1xVRM+pHpaqPnIDiq0vq5PwxxKPck4VWfV9YY1a4RB4KP7MVUbz9&#xA;JWsQlNzz3pTiO+Kt2d1qs0JkT05AG4kNsegPag74qqHUL6I/vrQ8fFTWn3VxVdHrVm2zckPfkP6V&#xA;xpW76+h+ou0Thi3wCh/m/sxVU0uD0bNARRn+Nvp/swFUVirsVdirsVdiqHv7dri1eJDRjQivsa4q&#xA;paVZy20LiWgZjWg3pTCVRuBXYq7FXYqoX78bOY/5BH3imKrrUFbWEHqEUH7hirV3eRWyBpKktsqj&#xA;qTiqXQXdrLfGe4JikX4YlOygU7nx3wqoX031i/p6LSLF8PFTu1D12BxQ1qF16sEUXotCE+yGr0Ap&#xA;3xVPk+wvyGBLeKuxVLdZ+3a/6/8ATCFTLArsVdirsVdiqX65/vEP9cfqOEK1oX+8j/8AGQ/8RGJV&#xA;McCqcttbzD95Gre5G/34qhho9iGJ4GnhU0w2qNwK7FXYq7FXYq7FXYq7FXYq7FXYq7FULqPxW/pb&#xA;/vWVBTc9a/wxVFKAqgDoBQYq4gGlRWnTFUPd2MFytHFH7OOoxVLWtNVs/wC4cvGOgXf/AIU4VUn1&#xA;P1eK3cAk4GooSpxpCYR63Zt9rlH8xUfhXGkohL+zkYKsqlmNAOm/04FV8VSzWKme0Ud3P61whUzw&#xA;K7FXYq7FXYql+uf7xD/XH6jhCtaF/vI//GQ/8RGJVMcCuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KqEis93FQ/DGGZvm3wj+OKq+KuxV2KuxVTlt4JhSVFf3I3+/FUFLods28bNGfD7Q/Hf8cNqqWW&#xA;lwW9GakkoNQ5HT5DG1RuBUuuSsmrW0f++wWP6x+rCqY4FdirsVdirsVS/XP94h/rj9RwhWtC/wB5&#xA;H/4yH/iIxKpjgV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVwFKn7ziqm1zbr9qVF+bAYqptqFk&#xA;vWZfoNf1YqovrNivRmf/AFR/WmGlW/pu1AqY5APGg/rjSr49YsX6sUPgwP8ACuNKrJfWb04zJv0B&#xA;IH68Cq4IIqDUeOKuxVK7A/WNSnueqL8KH8B+AwqmmBXYq7FXYq7FUHq0MktoVjUswYNQdaYhVujw&#xA;yxWpEilSzlgDsaUA/hhKo7ArsVdirsVdirsVdirsVdirsVdirsVdirsVdiqyWCKWgkUOB0B6fdiq&#xA;mLGzH+6E/wCBGKrhaWo6QoP9iP6YqvWKNfsoB8gBiqE1j/eB/mv68IVD6GiNBKGUMOQ2Ir2xKoyT&#xA;TLGTrEAfFfh/VgVDNo3He3neM9gf6imG1WiLWkBj5LIrAjmSNq9+xxVFadaG2tgjf3jEs9PHAqKx&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KoLWP94H+a/rwh&#xA;VDQf7mX/AFh+rEqmmBXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYqgtY/3gf5r+vCFUNB/uZf9YfqxKppgV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KoLWP94H+a/rwhVDQf7mX/WH6sSqaYFdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqhf8A1f6r&#xA;J69fT2rTrWu1MVUdK+qeg31blTl8fP7Vfo2wlUbgV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2Kv/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:6DE5AFF38A51DC118A74D13EA04A4B77</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:5CDDAFB014CCDC11BC8CB06AF16BB389</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>209.999994</stDim:w>
            <stDim:h>297.000002</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Standard-Farbfeldgruppe</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -207.273 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 207.273 li
225.763 207.273 li
225.763 0 li
cp
clp
[1 0 0 1 0 0 ]ct
5 lw
1 lc
0 lj
4 ml
[] 0 dsh
true sadj
113.072 31.876 mo
113.072 172.995 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0.15 cmyk
@
191.14 2.5 mo
191.14 143.622 li
@
35.8613 63.6577 mo
35.8613 204.773 li
@
0 175.525 mo
9.73047 158.008 7.29883 137.572 6.64844 118.274 cv
6.32617 108.056 6 98.1665 6.97266 88.1108 cv
7.62305 80.9751 9.56836 74.812 11.1895 68.0005 cv
11.8398 68.3247 li
24.6523 70.7573 37.9512 69.4595 50.7637 68.4868 cv
56.2773 68.1626 63.4141 66.5405 68.7656 68.3247 cv
71.0371 68.4868 li
70.7129 72.2173 69.252 75.9468 68.1172 79.353 cv
66.0078 85.0298 64.3867 91.0298 63.9004 97.1938 cv
63.5391 100.798 63.5508 112.409 65.8457 132.221 cv
67.793 147.629 69.7383 165.955 62.2793 180.227 cv
62.4414 179.092 li
59.1973 178.768 56.1152 177.309 52.8711 176.658 cv
49.791 175.85 46.3848 175.363 43.1406 174.713 cv
35.1934 173.254 28.8691 173.578 20.9219 174.875 cv
14.2715 175.85 7.94727 175.85 1.29688 175.85 cv
0 175.525 li
cp
0 0 0 0 cmyk
ef
1.2666 171.532 mo
0.849121 172.7 1.82861 171.057 1.05273 172.323 cv
1.00195 172.114 1.01611 171.858 1.2666 171.532 cv
cp
0 0 0 0.15 cmyk
f
7.4668 176.256 mo
11.4648 175.341 16.8208 175.883 21.1299 174.72 cv
21.6372 174.612 21.0781 175.233 22.2104 174.957 cv
26.3052 173.506 33.208 173.489 38.272 174.575 cv
37.9487 174.674 li
38.9058 174.907 40.1514 174.603 41.1812 174.809 cv
41.1738 174.902 40.8301 174.896 41.0493 175.057 cv
41.3491 174.816 42.9409 175.163 43.4082 175.045 cv
43.7949 175.229 43.7114 175.442 44.2158 175.662 cv
44.8701 175.455 li
46.6665 174.992 48.8501 176.248 51.1519 176.362 cv
51.0264 176.412 50.7925 176.423 50.9531 176.53 cv
54.5039 176.978 59.3477 177.873 62.6318 179.681 cv
62.5435 179.504 62.3594 179.325 62.1982 179.544 cv
62.2759 179.382 62.5757 180.687 62.2383 179.889 cv
62.3623 179.418 62.5596 178.862 62.7441 178.349 cv
63.2568 178.036 63.1885 176.506 63.8662 175.414 cv
63.8955 175.542 li
63.9517 174.565 64.6147 174.313 64.3887 173.434 cv
64.8091 172.938 li
64.4468 172.4 65.417 171.69 65.3833 170.867 cv
65.2793 170.866 li
65.3579 170.131 65.7002 169.819 65.8008 169.142 cv
65.8726 169.091 li
66.0581 167.499 66.4238 166.617 66.0537 166.594 cv
66.4438 166.091 65.9531 168.152 66.5293 167.36 cv
67.1416 162.09 67.3633 156.659 67.2578 151.339 cv
67.4082 150.731 67.4551 150.344 67.584 150.202 cv
67.4741 149.674 67.3906 148.202 67.1646 147.731 cv
67.1836 147.909 67.3398 147.377 67.3413 147.094 cv
67.4268 146.116 66.8555 146.064 66.9624 144.992 cv
67.0898 145.406 67.2241 145.542 67.3564 145.389 cv
67.0186 144.504 66.9438 143.293 66.7383 142.234 cv
66.8188 142.394 66.8828 142.647 66.999 142.598 cv
66.5454 141.46 66.8599 140.458 66.5454 139.456 cv
66.8047 139.815 li
66.9067 138.137 66.2988 139.378 66.3071 137.937 cv
66.4185 138.271 66.4888 138.141 66.5854 138.191 cv
66.0278 136.91 65.8999 134.75 65.605 133.444 cv
65.6445 133.519 65.7036 133.49 65.7036 133.49 cv
65.4697 132.058 65.4487 130.521 65.0977 128.955 cv
65.1333 128.366 65.6563 129.086 65.4102 127.566 cv
64.9731 127.668 64.9507 124.989 64.5449 125.94 cv
64.4746 124.625 64.4727 122.535 64.2378 121.677 cv
64.459 122.25 64.7222 120.992 64.8574 122.077 cv
65.0532 121.23 li
65.2451 121.337 65.0674 122.081 65.2725 121.799 cv
65.2051 121.257 64.8867 119.687 64.9165 119.194 cv
64.5591 118.207 63.9922 117.316 63.8169 115.68 cv
64.0439 116.438 64.2739 115.208 64.3877 115.726 cv
63.3735 113.496 li
63.3198 112.952 63.7163 113.357 63.5581 112.574 cv
63.4424 112.62 63.3516 112.28 63.2432 112.046 cv
63.2847 111.836 63.0137 109.775 63.439 109.518 cv
63.5972 109.267 63.5771 110.402 63.7021 109.79 cv
63.6455 108.784 63.4873 108.746 63.4517 107.735 cv
63.5093 107.713 li
63.5552 107.045 63.2617 105.753 63.042 106.485 cv
63.0425 106.951 63.2998 106.301 63.1938 106.993 cv
62.9282 106.531 62.8091 105.356 62.7881 104.34 cv
62.8604 104.686 62.9771 104.642 63.106 104.777 cv
62.7593 103.419 62.6021 101.978 62.5029 100.434 cv
62.2949 100.407 62.8696 101.015 62.7554 101.238 cv
63.0713 99.2905 62.4536 97.1284 63.1318 95.5391 cv
63.1353 95.8101 62.8198 95.6509 62.8804 95.6387 cv
63.0229 94.6924 63.3174 94.7749 63.2832 94.1455 cv
63.4658 94.1074 63.3218 93.3647 63.3477 92.7202 cv
63.2627 92.3711 63.4536 92.5698 63.4038 93.1235 cv
63.3579 92.2271 63.7861 88.6528 64.5776 86.7373 cv
64.4531 86.7485 64.502 85.4111 64.6426 84.957 cv
64.8564 85.21 li
65.1299 84.8403 65.2603 83.6802 65.5059 83.6724 cv
65.457 82.6099 64.7344 87.4805 64.8545 86.0996 cv
65.1689 85.8232 64.9463 84.1533 65.2256 84.5386 cv
65.4512 83.6206 65.4478 82.6548 65.9941 81.8848 cv
65.8667 82.1182 66.1079 82.7256 66.3354 82.0015 cv
66.7231 80.7197 66.334 81.6006 66.6011 80.541 cv
66.7163 79.8579 li
66.4795 79.7256 67.1406 78.7344 66.6978 79.1045 cv
66.9302 79.105 67.1836 77.2568 67.5532 77.5459 cv
67.8242 77.833 li
67.9858 77.2822 67.7788 76.8252 67.7788 76.3496 cv
67.8325 76.2881 67.9443 76.1699 67.9888 76.2148 cv
67.5098 75.9595 68.4463 74.9468 68.2603 74.186 cv
68.7954 73.1162 69.0498 71.3594 69.501 70.8984 cv
69.4766 69.5903 li
69.5293 68.9326 li
69.5879 68.5918 li
69.6274 68.4165 li
69.6387 68.3721 li
69.6396 68.3667 li
69.6401 68.3657 li
68.481 67.0073 71.2197 70.2158 70.937 69.8853 cv
70.9355 69.8853 li
70.9326 69.8848 li
70.9204 69.8828 li
70.8965 69.8789 li
70.7993 69.8623 li
70.8823 69.8506 li
70.9253 69.8452 li
70.936 69.8442 li
70.9385 69.8438 li
70.9399 69.8438 li
70.9399 69.8438 li
70.3789 69.186 72.1968 71.3164 69.6816 68.3691 cv
69.6816 68.3691 li
69.6816 68.3701 li
69.6821 68.375 li
69.6826 68.3955 li
69.6904 68.5537 li
69.6992 68.6538 69.7188 68.7378 69.7715 68.7715 cv
69.8506 68.5645 li
69.8789 68.4727 li
69.8906 68.4297 li
69.896 68.4087 li
69.8984 68.3979 li
69.8994 68.3931 li
69.8999 68.3901 li
69.9004 68.3892 li
69.9004 68.3882 li
69.9004 68.3882 li
72.0093 70.8594 70.4849 69.0732 70.9556 69.6245 cv
70.6372 69.6133 li
70.4365 69.6255 70.2412 69.6685 69.9365 69.6899 cv
70.3071 69.6377 68.2939 69.2969 67.7915 68.8828 cv
66.9111 68.8281 67.1431 69.1821 67.0195 69.333 cv
66.3745 68.6001 64.6235 69.2871 63.6704 68.7983 cv
63.9775 68.7188 64.9692 68.5835 64.2427 68.4175 cv
63.4375 67.9038 62.6045 68.7129 61.2891 68.5552 cv
61.626 68.9771 li
61.0288 68.7358 59.7197 69.3154 59.8213 68.873 cv
59.3901 69.0688 58.2446 68.8662 58.4302 69.2778 cv
56.2271 69.1079 53.106 70.0947 51.6309 69.4063 cv
51.2949 69.5044 50.5229 69.4946 50.7021 69.6997 cv
51.2085 69.8979 51.4307 69.4707 51.6313 69.6157 cv
51.3413 69.6533 51.2861 69.7754 51.2583 69.8364 cv
50.5898 69.7935 50.0269 69.8042 50.6558 69.4004 cv
49.1045 69.2539 49.1309 70.2451 47.1685 70.2285 cv
47.2437 70.0464 47.0903 69.9902 46.522 70.0635 cv
45.4619 70.4458 li
44.1924 70.4668 44.7129 70.0977 44.6602 69.8018 cv
43.9888 69.9014 43.1631 69.9487 42.8711 70.1934 cv
42.0254 69.8789 li
42.6431 70.1055 41.4824 70.0996 41.1709 70.1953 cv
41.4824 70.0996 li
41.3511 69.9844 40.5732 70.1099 40.1782 70.1704 cv
40.2856 70.3472 41.0913 70.3813 41.5283 70.3994 cv
41.1943 70.5586 40.6519 70.5566 40.2021 70.7393 cv
40.3359 70.438 39.0845 70.5967 38.5449 70.5986 cv
37.9238 70.5718 37.8618 70.9009 37.6816 70.9033 cv
37.6567 70.7524 36.6714 70.9375 37.1416 70.6958 cv
37.3496 70.6333 37.6309 70.8149 37.9727 70.6597 cv
37.5591 70.5713 37.5923 70.3042 36.7568 70.5474 cv
36.1279 70.7251 36.9521 71.1279 35.7314 70.9907 cv
36.0454 70.9053 36.0986 70.7891 36.3408 70.6709 cv
35.1992 70.561 li
35.1616 70.8306 li
35.0059 70.7686 35.1104 70.7402 35.0396 70.7085 cv
34.7124 71.002 33.3101 70.8584 33.063 71.1841 cv
32.4902 71.2324 31.8491 71.0439 31.3018 71.0313 cv
31.4067 71.0049 li
30.7329 70.8555 29.8452 70.9585 29.2822 71.1426 cv
29.311 71.084 li
28.9448 71.064 28.0796 71.1094 27.6167 71.2681 cv
26.6929 71.0684 27.3174 70.2646 26.2915 70.5952 cv
25.3564 70.5698 24.8086 71.0293 25.1816 71.2148 cv
23.4985 70.9507 21.5449 71.3813 20.0049 70.7808 cv
19.7524 70.8657 19.9014 70.9478 19.3921 70.9648 cv
16.9175 70.7012 14.0913 70.6563 12.209 69.8291 cv
12.9438 69.8281 12.3027 69.5732 12.3159 69.4214 cv
11.8965 69.645 11.376 68.981 11.0903 69.2617 cv
10.6992 69.3472 11.3613 69.8374 11.9775 69.9937 cv
11.604 69.897 12.0068 70.1514 10.9663 69.7563 cv
10.6826 69.6328 li
10.5381 69.5688 li
10.4658 69.5361 li
10.4478 69.5278 li
10.4385 69.5234 li
10.4341 69.5215 li
10.4326 69.521 li
11.5073 69.0186 8.02588 70.6455 12.8418 68.3936 cv
12.8413 68.3965 li
12.833 68.4355 li
12.5327 69.6953 li
12.3164 70.5127 12.0771 71.2402 11.8696 71.6089 cv
12.0767 71.2402 12.0713 71.5649 12.0645 71.8936 cv
11.7163 71.6973 11.397 72.7373 11.3315 73.5635 cv
11.5313 73.731 li
11.1685 74.1855 li
11.1675 74.5063 11.5645 74.6387 11.1523 75.3647 cv
11.0532 75.3848 10.9521 75.4082 10.8506 75.5352 cv
10.8379 76.396 10.8638 77.6196 10.4585 78.4561 cv
9.97607 79.1011 li
9.93359 79.4868 10.0029 80.165 10.2363 79.5234 cv
9.72266 80.9824 9.49463 81.9473 9.10303 82.3716 cv
9.35059 85.1006 8.8877 88.8242 8.70313 91.9404 cv
8.53418 91.8354 li
8.31445 92.6538 8.81152 92.2871 8.6499 92.856 cv
8.50195 92.5776 8.24463 93.4653 8.08398 92.8013 cv
7.81738 93.98 8.28467 94.3501 8.3125 95.123 cv
8.53516 95.251 8.20654 94.4956 8.48926 94.6592 cv
8.5498 94.793 8.20703 96.292 8.57227 96.4917 cv
8.42969 96.7861 8.17773 96.5444 8.03906 96.3774 cv
8.19531 97.1118 li
7.771 97.9932 7.50488 95.0508 6.98486 95.9702 cv
7.02588 96.6475 li
6.64941 97.2822 6.64893 94.8418 6.49121 96.5381 cv
6.64941 97.2837 7.14404 97.9253 7.31055 97.2759 cv
7.37793 98.8086 8.12939 98.0068 8.06934 99.6445 cv
7.85449 100.088 8.04443 98.3315 7.75146 98.6406 cv
7.45605 99.4082 7.87842 100.193 7.76807 100.879 cv
7.91357 100.118 8.25439 100.768 8.30908 101.261 cv
8.12842 102.091 7.98926 100.715 7.93066 101.896 cv
8.12842 102.092 8.25879 103.176 8.41748 102.24 cv
8.85986 102.666 8.27002 103.464 8.64111 104.109 cv
8.3252 104.496 7.88135 102.892 7.73877 104.195 cv
8.04492 103.987 8.18115 105.798 8.62988 105.107 cv
8.54883 105.616 8.30566 105.673 8.11084 105.303 cv
7.92969 106.033 8.69824 107.063 8.08887 107.31 cv
8.40869 107.556 li
8.30859 107.786 8.23535 108.112 8.06934 108.488 cv
8.07227 109.13 8.52588 110.546 8.04736 110.5 cv
8.09863 110.704 8.12305 112.176 8.43604 111.6 cv
8.60986 110.681 8.16357 110.554 8.60498 110.037 cv
8.24414 110.688 8.68408 111.353 8.81934 111.876 cv
8.63672 111.967 li
8.71875 112.28 8.69873 113.005 8.90479 113.197 cv
8.79248 112.958 8.66943 113.087 8.63232 113.338 cv
8.92285 113.661 li
9.10107 114.934 8.4375 113.976 8.55566 115.217 cv
8.31055 114.278 li
8.36328 114.484 8.11182 114.915 8.21729 115.509 cv
8.48047 115.733 8.80127 116.157 9.00635 116.35 cv
9.13916 117.047 8.72607 116.673 9.00977 117.355 cv
8.67285 116.461 li
8.58447 116.326 8.26807 117.083 8.30225 118.019 cv
8.41016 118.607 8.81738 119.524 8.92236 118.578 cv
8.94482 119.045 8.81299 119.707 8.61133 119.342 cv
8.74121 120.4 8.88281 119.192 9.07715 120.101 cv
8.92188 120.482 8.71875 121.657 8.50342 122.373 cv
8.03418 121.434 li
8.05518 122.07 li
7.67627 121.26 7.81152 122.5 7.42773 122.049 cv
7.3916 122.487 7.53809 123.01 7.65137 123.428 cv
8.1748 122.128 8.50781 124.819 9.01953 124.425 cv
9.24268 126.164 7.78125 125.575 8.69043 127.361 cv
8.81543 127.056 9.25586 127.897 9.0542 126.803 cv
9.04443 127.892 9.61816 127.519 9.45557 128.812 cv
9.19629 127.871 8.96436 129.854 8.58789 128.497 cv
8.76758 128.58 8.6875 127.725 8.62891 127.517 cv
8.44531 127.973 8.08984 127.447 8.13916 128.559 cv
8.22266 129.235 8.26611 130.168 8.53809 130.021 cv
8.83984 129.981 8.46484 128.984 8.78857 129.407 cv
8.94629 130.76 8.49268 131.004 9.0542 131.545 cv
8.97754 130.689 9.28223 130.462 9.49121 130.471 cv
9.65625 131.463 li
9.44727 131.277 li
9.36182 132.884 9.83594 131.735 9.83203 133.292 cv
9.4541 134.035 li
9.10547 133.673 9.53516 131.769 8.98389 132.066 cv
9.00342 133.073 9.28906 133.401 9.17334 134.357 cv
9.04248 133.649 li
9.03369 134.013 8.30322 134.392 8.77637 135.818 cv
8.96582 136.557 8.98145 136.01 9.19043 136.024 cv
9.28906 137.646 9.49561 138.133 9.54395 139.182 cv
9.13379 138.969 9.52393 141.035 9.09473 139.879 cv
9.32715 139.347 9.27832 136.99 8.88037 136.424 cv
8.4126 137.024 8.9126 135.15 8.41357 134.817 cv
8.43799 136.114 7.96045 136.061 7.6543 136.276 cv
7.64502 136.635 7.77588 136.981 7.82813 137.194 cv
8.12256 137.342 8.11377 136.871 8.41455 136.838 cv
8.34912 138.289 8.5376 139.682 8.82227 140.484 cv
8.67188 140.971 8.38086 140.815 8.3584 140.241 cv
8.41797 141.968 8.39355 143.814 8.21777 145.453 cv
8.73877 144.407 8.26074 147.289 8.68701 146.581 cv
8.82861 145.704 9.19824 144.954 9.39404 145.451 cv
9.34229 146.004 9.18506 145.425 9.07422 145.653 cv
9.30811 146.37 8.61328 146.729 8.99854 147.44 cv
8.90381 145.845 8.42725 147.104 8.06396 146.794 cv
8.22705 147.941 7.80762 146.732 7.74707 147.855 cv
7.86768 148.995 7.95215 150.401 7.91162 151.669 cv
7.39453 153.212 7.46143 155.667 7.21436 157.076 cv
6.91016 157.78 6.5708 157.213 6.37256 157.991 cv
6.22705 158.922 6.9458 157.384 6.51025 158.724 cv
6.45508 158.576 li
6.46191 159.013 5.64307 161.016 6.15088 161.557 cv
5.79297 161.032 li
5.69775 161.277 5.75049 161.536 5.75342 161.758 cv
5.60547 161.734 5.41064 161.998 5.40234 161.563 cv
4.91064 162.323 4.98975 163.31 4.76465 164.217 cv
5.18506 163.711 li
4.99561 165.324 4.38818 166.264 3.96582 167.756 cv
3.73047 167.623 li
3.58154 168.549 li
3.41602 168.248 2.99023 168.984 2.98633 169.503 cv
3.1167 168.698 3.12451 167.858 3.18604 167.049 cv
3.54736 166.478 3.25586 167.833 3.6377 167.531 cv
3.96924 167.272 4.36377 165.892 4.19385 165.6 cv
3.98926 166.106 4.03711 166.147 3.99072 166.579 cv
3.58154 166.633 3.8623 165.855 3.75732 165.398 cv
3.68018 165.672 3.44287 166.018 3.53467 166.111 cv
3.55322 165.532 3.69678 164.994 3.91846 164.096 cv
3.89307 164.74 4.229 163.83 4.26807 164.088 cv
3.97363 163.926 4.10889 163.051 4.49902 161.972 cv
5.0625 161.266 4.71484 159.82 5.09668 158.556 cv
5.30957 159.142 5.42578 159.871 5.3877 160.694 cv
5.72363 159.907 5.57227 159.78 5.91016 158.988 cv
5.75928 158.544 5.4458 158.192 5.45996 157.094 cv
5.70996 157.076 li
5.74072 156.081 5.3833 156.028 5.64795 154.806 cv
6.02637 152.693 6.26123 150.494 6.37939 148.856 cv
6.62695 148.812 li
6.19873 147.869 6.59277 145.759 6.41016 144.521 cv
6.69824 142.433 6.25146 139.977 6.646 138.9 cv
6.43359 135.199 6.11377 131.97 6.04492 128.124 cv
6.42578 128.755 li
6.13525 128.078 6.61084 128.298 6.52832 127.624 cv
6.28027 128.414 6.12061 126.703 5.88281 126.237 cv
6.08545 124.511 5.67871 122.325 5.37744 120.811 cv
5.61865 120.741 li
5.0957 119.219 5.43604 117.36 5.46045 115.447 cv
5.55469 115.225 5.77295 114.872 5.72949 114.302 cv
5.30566 113.275 5.31787 112.73 5.02734 111.212 cv
4.99609 110.099 5.08057 108.28 5.21533 107.145 cv
4.57129 102.953 5.00244 98.6426 4.86035 94.2451 cv
5.16699 93.9434 li
4.77295 89.6733 5.80176 84.4165 6.30713 80.7715 cv
6.71436 81.2114 li
7.09473 80.1226 7.12158 78.6328 6.72266 78.8428 cv
7.0835 77.7354 7.13574 76.0029 7.69824 75.3936 cv
8.06592 74.2866 7.82129 73.958 7.99121 73.0015 cv
8.72949 70.8022 8.89453 69.9712 9.33057 67.8418 cv
9.17139 68.3574 li
9.21875 68.6133 9.41504 68.6831 9.57666 68.1655 cv
9.62988 67.8091 li
9.65088 67.707 li
9.66211 67.6548 li
9.66504 67.6416 li
9.66553 67.6387 li
7.67969 68.5669 12.3716 66.3726 11.8887 66.5986 cv
11.8892 66.5991 li
11.8906 66.6001 li
11.897 66.6025 li
11.9219 66.6143 li
12.1255 66.7114 li
12.7583 67 12.1973 66.8062 12.5591 66.8345 cv
13.0913 66.8931 13.4341 66.8662 13.0938 66.5186 cv
15.2793 67.25 18.3525 67.0239 20.5259 67.6182 cv
20.3516 67.4424 20.9111 67.4629 21.1504 67.3765 cv
23.1421 67.4907 25.2446 67.8853 26.8501 67.6528 cv
27.1685 67.731 26.3359 67.9268 27.1572 67.9399 cv
27.6436 67.876 27.1685 67.731 27.7681 67.6396 cv
31.0186 67.3633 34.3843 67.8433 37.3691 67.6045 cv
42.6221 67.0039 48.2808 66.7031 53.2876 66.23 cv
53.2422 66.3525 li
54.875 65.7368 57.2778 66.3589 58.6284 65.583 cv
59.0483 65.6499 60.2241 65.5063 59.9312 65.7583 cv
61.3491 65.3804 63.9058 65.8276 66.1035 65.7725 cv
65.9072 65.7388 65.7896 65.7476 65.5557 65.7729 cv
66.6226 65.9795 67.6426 66.1748 68.6948 66.4404 cv
69.335 66.6187 68.8662 66.4463 69.7529 66.5542 cv
70.4995 66.6294 li
70.8809 66.6816 li
71.0737 66.7129 li
71.1226 66.7207 li
71.1465 66.7251 li
71.1587 66.7271 li
71.1621 66.7275 li
70.8081 66.312 74.252 70.3481 72.7935 68.6406 cv
72.7935 68.6421 li
72.7915 68.6484 li
72.7651 68.7524 li
72.7607 68.6577 li
72.7607 68.645 li
72.7603 68.6387 li
72.7603 68.6372 li
72.7603 68.6367 li
73.1084 69.0444 69.73 65.0859 71.1602 66.7612 cv
71.1602 66.7617 li
71.1592 66.7617 li
71.1563 66.7617 li
71.1313 66.7646 li
71.0811 66.7705 li
70.8745 66.7959 li
70.7407 66.8164 70.625 66.8467 70.5894 66.9028 cv
70.9033 66.9697 li
71.0688 66.979 li
71.1108 66.979 li
71.1318 66.979 li
71.1426 66.979 li
71.144 66.9785 li
71.1445 66.9785 li
73.9399 70.2539 71.9194 67.8872 72.5435 68.6182 cv
72.543 68.6211 li
72.543 68.6265 li
72.5381 68.7168 li
72.5479 69.4429 li
72.5576 69.915 72.5308 70.3413 72.2153 70.5288 cv
72.1431 71.021 72.4404 70.9326 72.4712 70.6235 cv
71.3813 75.4233 69.7139 80.1343 68.4634 84.6147 cv
67.2383 87.7466 67.4946 84.5479 67.1855 87.2183 cv
67.0215 87.4009 67.3516 87.4248 67.229 87.4292 cv
67.0869 88.4502 66.2173 88.8315 66.3628 89.6001 cv
66.7603 89.3877 66.4565 90.1069 66.6587 90.1714 cv
66.0415 92.1309 65.5732 92.4858 65.6694 94.1357 cv
65.502 93.9888 li
65.7729 95.9248 65.2051 98.1084 65.7993 99.7012 cv
65.7544 110.208 67.064 120.454 68.2417 130.764 cv
69.3789 140.967 70.8579 151.339 69.6206 162.155 cv
68.9189 164.638 68.7871 164.803 68.583 167.604 cv
68.5244 167.478 68.5327 167.303 68.4326 167.475 cv
68.7783 167.681 68.2095 169.431 68.4438 169.761 cv
67.4658 173.716 66.3223 177.294 64.4771 181.138 cv
64.7065 180.503 64.5508 180.058 64.2593 180.793 cv
64.207 181.229 li
64.2065 181.231 li
64.2061 181.233 li
62.3867 180.647 68.2788 182.546 60.127 179.919 cv
60.127 179.919 li
60.127 179.918 li
60.127 179.918 li
60.1255 179.911 li
60.1235 179.898 li
60.1191 179.873 li
60.1108 179.822 li
60.0933 179.721 li
60.0591 179.519 li
60.1865 179.406 li
60.1738 179.024 li
60.1509 178.858 li
60.1353 178.787 li
60.1309 178.771 li
60.1289 178.763 li
60.1284 178.762 li
60.1284 178.762 li
64.2866 184.068 61.2808 180.232 62.209 181.417 cv
62.2085 181.417 li
62.2065 181.417 li
62.2021 181.418 li
62.1704 181.427 li
62.0898 181.449 62.0449 181.48 62.0566 181.52 cv
62.1201 181.585 li
62.1885 181.622 li
57.6626 175.847 60.9336 180.021 59.9233 178.732 cv
59.9233 178.732 li
59.9233 178.733 li
59.9224 178.734 li
59.9214 178.736 li
59.9194 178.741 li
59.9146 178.75 li
59.9058 178.771 li
59.8872 178.814 li
59.8936 178.756 li
59.8955 178.741 li
59.896 178.734 li
60.9165 180.035 57.6128 175.812 62.1846 181.649 cv
62.1509 181.645 li
62.0181 181.626 li
61.7515 181.589 li
61.2188 181.511 li
60.1528 181.346 li
59.415 181.252 58.8013 181.057 58.1538 180.886 cv
56.8223 180.536 55.7051 180.17 54.5239 179.8 cv
52.4351 179.207 49.7217 178.6 47.5479 178.055 cv
42.5771 177.01 38.1074 175.934 33.3218 176.019 cv
31.0801 175.8 27.8779 176.173 25.4351 176.563 cv
18.0391 177.172 10.8936 177.251 3.31348 177.544 cv
3.31445 177.533 4.30957 176.548 7.4668 176.256 cv
cp
f
1.80469 170.148 mo
2.08838 169.982 2.52588 169.219 2.49902 169.957 cv
2.29492 169.968 1.93164 170.3 1.80469 170.148 cv
cp
f
8.54443 147.748 mo
8.49121 147.714 8.64063 147.416 8.67529 147.342 cv
8.68311 147.634 8.82422 147.917 8.70605 148.144 cv
8.71338 147.846 8.61572 147.887 8.54443 147.748 cv
cp
f
8.83496 141.719 mo
9.00879 141.812 9.13428 143.104 9.14746 143.868 cv
8.83496 141.719 li
cp
f
9.51807 136.095 mo
9.65234 135.608 9.73682 135.739 9.75049 136.391 cv
9.65918 136.441 9.60596 136.226 9.51807 136.095 cv
cp
f
9.10889 135.707 mo
9.09131 135.242 9.18652 135.008 9.28223 134.779 cv
9.13184 134.799 9.40576 135.854 9.10889 135.707 cv
cp
f
9.1499 123.58 mo
9.12354 123.292 8.95068 122.671 9.13184 122.394 cv
9.01074 122.701 9.4165 123.792 9.1499 123.58 cv
cp
f
8.66309 118.008 mo
8.66943 117.827 8.69873 117.751 8.64453 117.543 cv
8.71484 117.208 8.85254 117.555 8.87695 117.834 cv
8.66309 118.008 li
cp
f
62.5796 68.8315 mo
61.9995 68.9204 li
62.082 68.7432 li
62.5796 68.8315 li
cp
f
62.437 103.768 mo
62.5513 104.377 62.2769 104.195 62.252 104.298 cv
62.228 103.745 62.4678 104.5 62.437 103.768 cv
cp
f
64.9414 127.876 mo
64.917 127.692 li
65.2813 127.716 li
64.9414 127.876 li
cp
f
152.647 113.607 mo
162.38 96.0918 159.946 75.6563 159.298 56.3564 cv
158.974 46.1387 158.649 36.2422 159.622 26.1865 cv
160.271 19.0508 162.218 12.8867 163.839 6.0752 cv
164.487 6.40039 li
177.3 8.83203 190.599 7.53516 203.413 6.5625 cv
208.927 6.23828 216.062 4.61523 221.415 6.40039 cv
223.685 6.5625 li
223.36 10.293 221.901 14.0225 220.767 17.4277 cv
218.657 23.1055 217.036 29.1055 216.55 35.2695 cv
216.188 38.874 216.198 50.4912 218.495 70.3047 cv
220.44 85.7119 222.388 104.038 214.927 118.311 cv
215.089 117.176 li
211.847 116.852 208.765 115.393 205.521 114.742 cv
202.438 113.932 199.034 113.445 195.79 112.797 cv
187.843 111.336 181.517 111.662 173.569 112.959 cv
166.921 113.932 160.595 113.932 153.946 113.932 cv
152.647 113.607 li
cp
0 0 0 0 cmyk
ef
153.915 109.613 mo
153.498 110.781 154.477 109.137 153.701 110.403 cv
153.65 110.195 153.664 109.939 153.915 109.613 cv
cp
0 0 0 0.15 cmyk
f
160.116 114.338 mo
164.114 113.423 169.471 113.965 173.779 112.804 cv
174.287 112.696 173.729 113.317 174.86 113.041 cv
178.955 111.59 185.858 111.572 190.922 112.658 cv
190.6 112.757 li
191.556 112.991 192.802 112.687 193.831 112.892 cv
193.824 112.986 193.48 112.979 193.7 113.14 cv
194 112.901 195.591 113.247 196.059 113.129 cv
196.445 113.313 196.362 113.526 196.867 113.746 cv
197.521 113.539 li
199.317 113.076 201.501 114.331 203.803 114.446 cv
203.678 114.496 203.443 114.506 203.604 114.614 cv
207.153 115.063 212.002 115.955 215.279 117.769 cv
215.19 117.591 215.007 117.413 214.845 117.631 cv
214.924 117.467 215.221 118.781 214.887 117.97 cv
215.011 117.499 215.208 116.943 215.394 116.429 cv
215.906 116.117 215.838 114.587 216.516 113.495 cv
216.545 113.623 li
216.601 112.646 217.264 112.393 217.038 111.514 cv
217.458 111.018 li
217.096 110.48 218.066 109.771 218.032 108.948 cv
217.929 108.947 li
218.007 108.211 218.35 107.9 218.45 107.222 cv
218.521 107.171 li
218.706 105.58 219.072 104.698 218.702 104.674 cv
219.093 104.171 218.602 106.232 219.179 105.44 cv
219.791 100.17 220.011 94.7383 219.906 89.4185 cv
220.057 88.811 220.104 88.4229 220.232 88.2822 cv
220.122 87.7534 220.039 86.2813 219.813 85.8105 cv
219.832 85.9888 219.988 85.4561 219.989 85.1729 cv
220.075 84.1953 219.504 84.144 219.61 83.0713 cv
219.738 83.4858 219.872 83.6216 220.005 83.4683 cv
219.667 82.583 219.592 81.3726 219.387 80.3135 cv
219.467 80.4731 219.531 80.7271 219.647 80.6768 cv
219.193 79.5391 219.508 78.5376 219.194 77.5356 cv
219.453 77.8945 li
219.555 76.2158 218.947 77.457 218.956 76.0161 cv
219.067 76.3496 219.137 76.2197 219.234 76.271 cv
218.677 74.9888 218.549 72.8291 218.254 71.5229 cv
218.293 71.5981 218.353 71.5688 218.353 71.5688 cv
218.118 70.1367 218.098 68.6006 217.746 67.0337 cv
217.782 66.4448 218.305 67.165 218.059 65.645 cv
217.622 65.7476 217.599 63.0679 217.193 64.0195 cv
217.123 62.7046 217.121 60.6138 216.887 59.7559 cv
217.107 60.3291 217.37 59.0708 217.506 60.1553 cv
217.701 59.3091 li
217.894 59.4155 217.716 60.1597 217.921 59.8779 cv
217.854 59.3359 217.535 57.7651 217.564 57.2725 cv
217.207 56.2856 216.641 55.3945 216.465 53.7588 cv
216.692 54.5171 216.923 53.2871 217.036 53.8042 cv
216.021 51.5742 li
215.969 51.0298 216.364 51.4351 216.207 50.6519 cv
216.091 50.6987 216 50.3584 215.892 50.124 cv
215.934 49.9146 215.662 47.853 216.088 47.5957 cv
216.246 47.3452 216.226 48.4805 216.351 47.8687 cv
216.294 46.8623 216.136 46.8237 216.101 45.813 cv
216.158 45.791 li
216.204 45.1235 215.91 43.8315 215.69 44.563 cv
215.691 45.0288 215.949 44.3789 215.843 45.0713 cv
215.577 44.6089 215.458 43.4336 215.437 42.418 cv
215.51 42.7637 215.626 42.7197 215.755 42.855 cv
215.408 41.4971 215.251 40.0562 215.152 38.5117 cv
214.944 38.4844 215.519 39.0928 215.404 39.3154 cv
215.721 37.3682 215.103 35.2061 215.781 33.6172 cv
215.784 33.8882 215.469 33.729 215.529 33.7163 cv
215.672 32.77 215.967 32.8525 215.933 32.2236 cv
216.115 32.1851 215.971 31.4424 215.997 30.7979 cv
215.912 30.4487 216.103 30.6475 216.053 31.2012 cv
216.007 30.3047 216.436 26.7305 217.227 24.8149 cv
217.102 24.8262 217.15 23.4888 217.291 23.0342 cv
217.505 23.2871 li
217.779 22.9175 217.909 21.7573 218.154 21.7495 cv
218.106 20.6875 217.384 25.5576 217.504 24.1768 cv
217.818 23.9004 217.595 22.2305 217.874 22.6157 cv
218.101 21.6978 218.097 20.7319 218.643 19.9619 cv
218.516 20.1953 218.757 20.8027 218.984 20.0791 cv
219.371 18.7969 218.982 19.6777 219.25 18.6182 cv
219.365 17.9351 li
219.128 17.8027 219.789 16.8115 219.346 17.1816 cv
219.579 17.1816 219.832 15.334 220.201 15.623 cv
220.473 15.9097 li
220.635 15.3594 220.428 14.9023 220.428 14.4268 cv
220.481 14.3647 220.593 14.2471 220.638 14.292 cv
220.158 14.0366 221.095 13.0234 220.908 12.2632 cv
221.443 11.1929 221.697 9.43604 222.148 8.9751 cv
222.124 7.6665 li
222.177 7.00879 li
222.235 6.66797 li
222.274 6.49268 li
222.286 6.44824 li
222.287 6.44287 li
222.287 6.44141 li
221.129 5.08301 223.867 8.2915 223.584 7.96094 cv
223.584 7.96094 li
223.58 7.96045 li
223.568 7.9585 li
223.545 7.95459 li
223.447 7.9375 li
223.53 7.92627 li
223.573 7.9209 li
223.584 7.91992 li
223.587 7.91992 li
223.587 7.91943 li
223.588 7.91943 li
223.861 8.24023 221.204 5.12695 222.329 6.44482 cv
222.329 6.44482 li
222.329 6.44629 li
222.329 6.45117 li
222.33 6.47168 li
222.338 6.62988 li
222.347 6.72998 222.366 6.81396 222.419 6.84814 cv
222.548 6.46387 li
223.019 7.01563 221.495 5.229 223.604 7.7002 cv
223.603 7.7002 li
223.603 7.7002 li
223.601 7.7002 li
223.598 7.69971 li
223.593 7.69873 li
223.582 7.69775 li
223.561 7.69531 li
223.519 7.69092 li
223.438 7.68652 li
223.285 7.68896 li
223.085 7.70117 222.89 7.74414 222.584 7.76563 cv
222.955 7.71338 220.942 7.37207 220.439 6.95801 cv
219.56 6.90332 219.791 7.25781 219.667 7.4082 cv
219.022 6.67529 217.271 7.3623 216.318 6.87354 cv
216.625 6.79443 217.617 6.65869 216.891 6.49268 cv
216.085 5.979 215.253 6.78809 213.937 6.63037 cv
214.273 7.05225 li
213.677 6.81104 212.367 7.39063 212.469 6.94824 cv
212.038 7.14404 210.893 6.94141 211.078 7.35352 cv
208.875 7.18359 205.754 8.17041 204.278 7.48242 cv
203.942 7.58008 203.17 7.57031 203.35 7.77539 cv
203.855 7.97412 204.078 7.54639 204.279 7.69141 cv
203.988 7.729 203.934 7.85107 203.906 7.91211 cv
203.237 7.86963 202.674 7.87988 203.304 7.47607 cv
201.752 7.33008 201.778 8.32129 199.816 8.3042 cv
199.891 8.12207 199.737 8.06592 199.17 8.13916 cv
198.109 8.52148 li
196.84 8.54248 197.36 8.17334 197.308 7.87744 cv
196.637 7.97705 195.811 8.02441 195.519 8.26904 cv
194.673 7.95459 li
195.29 8.18115 194.13 8.17529 193.818 8.271 cv
194.13 8.17529 li
193.998 8.06006 193.221 8.18506 192.825 8.24561 cv
192.933 8.42285 193.738 8.45703 194.176 8.4751 cv
193.841 8.63428 193.299 8.63232 192.85 8.81494 cv
192.982 8.51367 191.731 8.67236 191.192 8.67383 cv
190.571 8.64746 190.509 8.97656 190.328 8.979 cv
190.304 8.82764 189.318 9.01318 189.789 8.77148 cv
189.997 8.7085 190.278 8.89014 190.619 8.73486 cv
190.206 8.64697 190.239 8.37939 189.404 8.62305 cv
188.774 8.80029 189.599 9.20361 188.379 9.06592 cv
188.692 8.98096 188.746 8.86475 188.987 8.74609 cv
187.846 8.63623 li
187.809 8.90625 li
187.652 8.84375 187.757 8.81543 187.687 8.78418 cv
187.359 9.07715 185.957 8.93359 185.71 9.25928 cv
185.137 9.30811 184.496 9.11914 183.948 9.10645 cv
184.054 9.08057 li
183.38 8.93115 182.492 9.03418 181.929 9.21777 cv
181.958 9.15918 li
181.592 9.13916 180.727 9.18457 180.264 9.34375 cv
179.34 9.14355 179.964 8.33984 178.938 8.67041 cv
178.003 8.64502 177.455 9.10449 177.828 9.29004 cv
176.146 9.02588 174.191 9.45654 172.651 8.85596 cv
172.398 8.94092 172.548 9.02295 172.039 9.04004 cv
169.563 8.77686 166.737 8.73145 164.855 7.9043 cv
165.59 7.90332 164.949 7.64893 164.962 7.49658 cv
164.544 7.72217 164.02 7.05518 163.734 7.33496 cv
163.34 7.41797 164.008 7.91357 164.624 8.06885 cv
164.249 7.97168 164.656 8.22949 163.609 7.8291 cv
163.326 7.70508 li
163.182 7.64063 li
163.109 7.60791 li
163.091 7.59961 li
163.082 7.59521 li
163.08 7.59424 li
163.078 7.59375 li
164.154 7.0918 160.668 8.71631 165.491 6.46875 cv
165.49 6.47363 li
165.481 6.5127 li
165.182 7.77295 li
164.965 8.59033 164.726 9.31787 164.519 9.68604 cv
164.726 9.31738 164.72 9.64258 164.713 9.97119 cv
164.364 9.7749 164.045 10.8149 163.979 11.6406 cv
164.18 11.8086 li
163.817 12.2627 li
163.815 12.584 164.213 12.7163 163.801 13.4424 cv
163.701 13.4624 163.601 13.4854 163.499 13.6123 cv
163.486 14.4736 163.512 15.6973 163.106 16.5332 cv
162.624 17.1782 li
162.582 17.5645 162.651 18.2427 162.885 17.6006 cv
162.371 19.0596 162.143 20.0249 161.751 20.4492 cv
161.999 23.1777 161.537 26.9023 161.353 30.0186 cv
161.184 29.9136 li
160.964 30.7319 161.461 30.3652 161.299 30.9341 cv
161.15 30.6558 160.894 31.5439 160.733 30.8794 cv
160.467 32.0581 160.934 32.4282 160.961 33.2012 cv
161.184 33.3296 160.855 32.5737 161.139 32.7373 cv
161.199 32.8711 160.855 34.3701 161.222 34.5703 cv
161.079 34.8643 160.827 34.6226 160.688 34.4556 cv
160.844 35.1904 li
160.42 36.0718 160.154 33.1289 159.634 34.0483 cv
159.675 34.7256 li
159.299 35.3608 159.298 32.9199 159.141 34.6162 cv
159.299 35.3618 159.793 36.0039 159.96 35.354 cv
160.027 36.8867 160.778 36.0854 160.718 37.7231 cv
160.503 38.166 160.693 36.4102 160.4 36.7192 cv
160.104 37.4863 160.527 38.272 160.417 38.958 cv
160.563 38.1963 160.903 38.8462 160.958 39.3394 cv
160.777 40.1694 160.638 38.7939 160.579 39.9746 cv
160.777 40.1704 160.907 41.2544 161.066 40.3184 cv
161.509 40.7441 160.919 41.543 161.29 42.1875 cv
160.974 42.5747 160.53 40.9702 160.387 42.2734 cv
160.693 42.0659 160.829 43.8765 161.278 43.1855 cv
161.197 43.6948 160.954 43.751 160.76 43.3818 cv
160.578 44.1118 161.347 45.1416 160.737 45.3887 cv
161.057 45.6343 li
160.957 45.8643 160.884 46.1914 160.718 46.5669 cv
160.721 47.209 161.175 48.625 160.695 48.5786 cv
160.747 48.7822 160.771 50.2549 161.085 49.6787 cv
161.258 48.7593 160.813 48.6328 161.253 48.1152 cv
160.893 48.7666 161.333 49.4312 161.468 49.9546 cv
161.285 50.0459 li
161.367 50.3584 161.348 51.084 161.554 51.2754 cv
161.441 51.0361 161.318 51.166 161.281 51.4165 cv
161.572 51.7397 li
161.75 53.0127 161.086 52.0547 161.205 53.2954 cv
160.959 52.3564 li
161.012 52.563 160.761 52.9937 160.866 53.5874 cv
161.13 53.8115 161.45 54.2358 161.655 54.4287 cv
161.788 55.126 161.375 54.7515 161.659 55.4336 cv
161.322 54.54 li
161.233 54.4048 160.917 55.1616 160.951 56.0977 cv
161.06 56.6865 161.467 57.6025 161.571 56.6567 cv
161.594 57.1245 161.462 57.7856 161.261 57.4214 cv
161.391 58.4795 161.532 57.271 161.727 58.1797 cv
161.57 58.561 161.367 59.7358 161.152 60.4526 cv
160.683 59.5132 li
160.704 60.1489 li
160.325 59.3394 160.461 60.5796 160.076 60.1284 cv
160.041 60.5669 160.187 61.0894 160.3 61.5068 cv
160.824 60.2075 161.156 62.8984 161.668 62.5044 cv
161.892 64.2432 160.43 63.6543 161.339 65.4404 cv
161.464 65.1357 161.904 65.9771 161.702 64.8818 cv
161.693 65.9717 162.267 65.5981 162.104 66.8911 cv
161.845 65.9507 161.613 67.9336 161.236 66.5757 cv
161.416 66.6587 161.336 65.8037 161.277 65.5957 cv
161.094 66.0518 160.738 65.5269 160.787 66.6387 cv
160.871 67.3145 160.914 68.248 161.187 68.1006 cv
161.488 68.0605 161.113 67.063 161.438 67.4863 cv
161.595 68.8394 161.141 69.0835 161.703 69.6245 cv
161.626 68.7686 161.931 68.542 162.14 68.5503 cv
162.305 69.5425 li
162.096 69.3569 li
162.01 70.9639 162.484 69.8145 162.48 71.3711 cv
162.103 72.1143 li
161.754 71.7529 162.184 69.8486 161.633 70.146 cv
161.652 71.1523 161.938 71.4805 161.821 72.4365 cv
161.69 71.729 li
161.682 72.0928 160.951 72.4717 161.425 73.8975 cv
161.614 74.6367 161.63 74.0898 161.839 74.1035 cv
161.938 75.7256 162.144 76.2124 162.192 77.2612 cv
161.782 77.0479 162.172 79.1147 161.743 77.9585 cv
161.976 77.4268 161.927 75.0693 161.528 74.5039 cv
161.061 75.104 161.562 73.2295 161.062 72.8965 cv
161.086 74.1934 160.608 74.1401 160.303 74.3555 cv
160.293 74.7144 160.425 75.0605 160.477 75.2739 cv
160.771 75.4214 160.762 74.9507 161.063 74.9175 cv
160.998 76.3687 161.186 77.7612 161.471 78.564 cv
161.32 79.0503 161.029 78.895 161.007 78.3213 cv
161.066 80.0479 161.042 81.894 160.866 83.5327 cv
161.388 82.4868 160.909 85.3691 161.335 84.6611 cv
161.477 83.7842 161.847 83.0342 162.043 83.5308 cv
161.991 84.084 161.834 83.5049 161.723 83.7329 cv
161.957 84.4502 161.262 84.8081 161.647 85.52 cv
161.553 83.9243 161.076 85.1841 160.713 84.874 cv
160.876 86.0215 160.456 84.812 160.396 85.9355 cv
160.517 87.0747 160.601 88.4814 160.561 89.7485 cv
160.043 91.2925 160.11 93.7471 159.863 95.1563 cv
159.559 95.8604 159.22 95.2925 159.021 96.0713 cv
158.876 97.002 159.595 95.4639 159.159 96.8037 cv
159.104 96.6563 li
159.111 97.0928 158.292 99.0957 158.8 99.6372 cv
158.441 99.1128 li
158.347 99.3579 158.399 99.6167 158.402 99.8389 cv
158.254 99.8149 158.06 100.078 158.051 99.6436 cv
157.56 100.404 157.639 101.39 157.414 102.297 cv
157.834 101.791 li
157.645 103.405 157.037 104.344 156.614 105.837 cv
156.379 105.704 li
156.23 106.629 li
156.064 106.329 155.64 107.065 155.635 107.583 cv
155.766 106.779 155.773 105.939 155.835 105.129 cv
156.196 104.559 155.904 105.914 156.287 105.611 cv
156.618 105.353 157.013 103.972 156.843 103.68 cv
156.638 104.187 156.686 104.229 156.64 104.66 cv
156.23 104.713 156.511 103.936 156.406 103.479 cv
156.329 103.752 156.092 104.098 156.184 104.191 cv
156.202 103.613 156.346 103.075 156.567 102.177 cv
156.542 102.82 156.878 101.911 156.917 102.168 cv
156.622 102.006 156.758 101.131 157.147 100.053 cv
157.711 99.3462 157.363 97.9009 157.745 96.6362 cv
157.959 97.2222 158.075 97.9512 158.037 98.7744 cv
158.372 97.9878 158.221 97.8604 158.559 97.0688 cv
158.408 96.6245 158.095 96.2725 158.109 95.1743 cv
158.358 95.1563 li
158.39 94.1611 158.032 94.1084 158.297 92.8853 cv
158.675 90.7739 158.91 88.5737 159.028 86.936 cv
159.275 86.8916 li
158.848 85.9487 159.241 83.8389 159.059 82.6006 cv
159.347 80.5117 158.9 78.0562 159.295 76.9795 cv
159.082 73.2783 158.763 70.0488 158.693 66.2026 cv
159.074 66.835 li
158.784 66.1567 159.26 66.3774 159.177 65.7031 cv
158.929 66.4932 158.77 64.7822 158.531 64.3164 cv
158.734 62.5903 158.327 60.4043 158.026 58.8896 cv
158.268 58.8203 li
157.745 57.2979 158.086 55.4399 158.109 53.5259 cv
158.204 53.3037 158.422 52.9512 158.378 52.3813 cv
157.954 51.3535 157.967 50.8091 157.676 49.291 cv
157.645 48.1772 157.729 46.3589 157.864 45.2236 cv
157.22 41.0313 157.651 36.7212 157.51 32.3232 cv
157.816 32.0215 li
157.423 27.7515 158.45 22.4946 158.955 18.8491 cv
159.362 19.2891 li
159.742 18.2002 159.77 16.7104 159.371 16.9199 cv
159.731 15.8125 159.784 14.0801 160.347 13.4707 cv
160.714 12.3643 160.47 12.0352 160.64 11.0786 cv
161.378 8.87939 161.543 8.04834 161.979 5.91895 cv
161.82 6.43457 li
161.867 6.69043 162.063 6.76025 162.226 6.24316 cv
162.278 5.88623 li
162.3 5.78467 li
162.311 5.73242 li
162.313 5.71875 li
162.314 5.71582 li
162.314 5.71387 li
162.314 5.71338 li
163.308 5.25049 160.093 6.74805 164.541 4.67529 cv
164.547 4.67822 li
164.572 4.68945 li
164.775 4.78711 li
165.411 5.07813 164.843 4.88135 165.205 4.90967 cv
165.737 4.96826 166.08 4.94141 165.74 4.59375 cv
167.926 5.3252 170.999 5.09912 173.173 5.69336 cv
172.998 5.51758 173.558 5.53809 173.797 5.45166 cv
175.788 5.56592 177.892 5.96045 179.497 5.72803 cv
179.815 5.80664 178.982 6.00195 179.804 6.01514 cv
180.29 5.95117 179.815 5.80664 180.415 5.71484 cv
183.665 5.43848 187.031 5.91846 190.017 5.67969 cv
195.27 5.07959 200.929 4.7793 205.935 4.30566 cv
205.89 4.42871 li
207.522 3.8125 209.926 4.43457 211.276 3.65869 cv
211.696 3.72559 212.872 3.58203 212.579 3.8335 cv
213.997 3.45557 216.554 3.90283 218.751 3.84766 cv
218.556 3.81396 218.438 3.82275 218.203 3.84814 cv
219.271 4.05469 220.291 4.25 221.343 4.51563 cv
221.982 4.69385 221.515 4.52197 222.401 4.62988 cv
223.147 4.70508 li
223.529 4.75732 li
223.722 4.78857 li
223.771 4.79688 li
223.795 4.80078 li
223.807 4.80273 li
223.811 4.80371 li
227.07 8.62402 224.714 5.86328 225.441 6.7168 cv
225.44 6.71826 li
225.439 6.72461 li
225.413 6.8291 li
225.408 6.73438 li
225.408 6.72168 li
225.408 6.71484 li
225.408 6.71338 li
225.408 6.7124 li
225.408 6.7124 li
226.838 8.3877 223.46 4.42969 223.808 4.8374 cv
223.808 4.8374 li
223.805 4.83789 li
223.779 4.84033 li
223.729 4.84619 li
223.522 4.87158 li
223.389 4.89209 223.273 4.92236 223.237 4.97852 cv
223.552 5.04541 li
223.717 5.05469 li
223.759 5.05469 li
223.78 5.05469 li
223.791 5.05469 li
223.792 5.05469 li
223.488 4.69824 226.44 8.1582 225.19 6.69385 cv
225.19 6.69434 li
225.19 6.69727 li
225.19 6.70313 li
225.186 6.79297 li
225.195 7.51904 li
225.205 7.99121 225.178 8.41748 224.863 8.60498 cv
224.791 9.09717 225.088 9.00879 225.119 8.69971 cv
224.03 13.5 222.362 18.2114 221.112 22.6919 cv
219.887 25.8242 220.144 22.625 219.835 25.2954 cv
219.67 25.478 220.001 25.502 219.878 25.5068 cv
219.735 26.5273 218.866 26.9092 219.012 27.6772 cv
219.409 27.4653 219.105 28.1841 219.308 28.249 cv
218.69 30.2085 218.223 30.5635 218.318 32.2134 cv
218.151 32.0664 li
218.422 34.0024 217.854 36.186 218.449 37.7793 cv
218.403 48.2861 219.712 58.5327 220.891 68.8423 cv
222.027 79.0464 223.506 89.4185 222.27 100.235 cv
221.568 102.718 221.436 102.883 221.231 105.685 cv
221.173 105.558 221.182 105.383 221.081 105.555 cv
221.427 105.761 220.858 107.511 221.093 107.84 cv
220.115 111.796 218.972 115.375 217.126 119.218 cv
217.355 118.584 217.2 118.138 216.908 118.873 cv
216.855 119.309 li
216.854 119.316 li
216.854 119.317 li
216.854 119.318 li
216.854 119.318 li
215.034 118.731 220.93 120.632 212.773 118.003 cv
212.773 118.002 li
212.772 117.999 li
212.771 117.986 li
212.767 117.961 li
212.758 117.91 li
212.74 117.809 li
212.706 117.605 li
212.833 117.494 li
212.82 117.112 li
212.798 116.945 li
212.782 116.875 li
212.777 116.858 li
212.775 116.851 li
212.774 116.847 li
212.774 116.846 li
212.774 116.845 li
216.935 122.156 213.928 118.317 214.855 119.502 cv
214.855 119.502 li
214.854 119.503 li
214.821 119.511 li
214.741 119.534 214.696 119.565 214.708 119.604 cv
214.771 119.67 li
214.803 119.688 li
214.82 119.697 li
214.83 119.702 li
214.835 119.705 li
214.836 119.705 li
214.836 119.705 li
215.328 120.333 210.55 114.234 212.572 116.816 cv
212.571 116.817 li
212.57 116.82 li
212.534 116.902 li
212.541 116.844 li
212.544 116.814 li
212.048 116.176 216.875 122.344 214.827 119.733 cv
214.819 119.732 li
214.803 119.729 li
214.669 119.711 li
214.403 119.673 li
213.87 119.596 li
212.804 119.43 li
212.066 119.336 211.452 119.142 210.805 118.971 cv
209.474 118.621 208.355 118.255 207.175 117.884 cv
205.086 117.292 202.371 116.683 200.199 116.137 cv
195.229 115.096 190.756 114.016 185.973 114.102 cv
183.73 113.883 180.528 114.257 178.085 114.647 cv
170.688 115.256 163.543 115.332 155.963 115.626 cv
155.964 115.616 156.959 114.63 160.116 114.338 cv
cp
f
154.453 108.229 mo
154.737 108.063 155.175 107.3 155.147 108.038 cv
154.943 108.049 154.581 108.38 154.453 108.229 cv
cp
f
161.193 85.8281 mo
161.14 85.7939 161.289 85.4956 161.323 85.4219 cv
161.332 85.7139 161.473 85.9966 161.354 86.2236 cv
161.362 85.9258 161.265 85.9663 161.193 85.8281 cv
cp
f
161.483 79.7983 mo
161.657 79.8906 161.783 81.1846 161.796 81.9478 cv
161.483 79.7983 li
cp
f
162.167 74.1743 mo
162.301 73.6875 162.386 73.8184 162.398 74.4707 cv
162.308 74.5205 162.255 74.3057 162.167 74.1743 cv
cp
f
161.757 73.7861 mo
161.739 73.3213 161.835 73.0874 161.931 72.8584 cv
161.78 72.8789 162.055 73.9341 161.757 73.7861 cv
cp
f
161.799 61.6592 mo
161.772 61.3706 161.6 60.75 161.781 60.4727 cv
161.659 60.7803 162.065 61.8721 161.799 61.6592 cv
cp
f
161.313 56.0864 mo
161.318 55.9053 161.349 55.8301 161.294 55.6221 cv
161.364 55.2871 161.502 55.6338 161.526 55.9131 cv
161.313 56.0864 li
cp
f
215.228 6.90674 mo
214.647 6.99609 li
214.729 6.81836 li
215.228 6.90674 li
cp
f
215.086 41.8457 mo
215.2 42.4551 214.926 42.2729 214.901 42.376 cv
214.877 41.8228 215.117 42.5776 215.086 41.8457 cv
cp
f
217.59 65.9546 mo
217.565 65.7715 li
217.93 65.7949 li
217.59 65.9546 li
cp
f
75.9316 144.365 mo
85.6621 126.848 83.2305 106.412 82.582 87.1133 cv
82.2578 76.8945 81.9336 67.0039 82.9063 56.9473 cv
83.5547 49.8115 85.5 43.6484 87.123 36.8359 cv
87.7715 37.1611 li
100.584 39.5938 113.883 38.2969 126.696 37.3232 cv
132.21 36.999 139.347 35.377 144.698 37.1611 cv
146.97 37.3232 li
146.646 41.0537 145.185 44.7832 144.05 48.1895 cv
141.942 53.8662 140.319 59.8672 139.833 66.0303 cv
139.474 69.6357 139.483 81.248 141.78 101.061 cv
143.726 116.469 145.671 134.795 138.212 149.066 cv
138.374 147.934 li
135.13 147.609 132.048 146.148 128.804 145.5 cv
125.724 144.689 122.316 144.203 119.072 143.553 cv
111.127 142.094 104.801 142.418 96.8535 143.715 cv
90.2051 144.689 83.8789 144.689 77.2305 144.689 cv
75.9316 144.365 li
cp
0 0 0 0 cmyk
ef
77.1982 140.371 mo
76.7813 141.539 77.7603 139.896 76.9849 141.162 cv
76.9341 140.953 76.9482 140.697 77.1982 140.371 cv
cp
0 0 0 0.15 cmyk
f
83.3999 145.096 mo
87.3975 144.181 92.7539 144.723 97.063 143.56 cv
97.5703 143.451 97.0112 144.073 98.1436 143.797 cv
102.238 142.346 109.142 142.329 114.205 143.415 cv
113.882 143.514 li
114.839 143.747 116.085 143.442 117.114 143.648 cv
117.107 143.742 116.764 143.735 116.982 143.896 cv
117.282 143.657 118.874 144.003 119.342 143.885 cv
119.729 144.068 119.646 144.282 120.149 144.502 cv
120.804 144.296 li
122.601 143.833 124.783 145.089 127.085 145.203 cv
126.96 145.253 126.726 145.264 126.886 145.371 cv
130.438 145.819 135.282 146.714 138.564 148.523 cv
138.476 148.346 138.292 148.168 138.131 148.386 cv
138.209 148.223 138.507 149.534 138.172 148.727 cv
138.296 148.256 138.493 147.7 138.678 147.186 cv
139.19 146.874 139.122 145.344 139.8 144.252 cv
139.829 144.379 li
139.885 143.403 140.548 143.15 140.322 142.271 cv
140.742 141.774 li
140.38 141.237 141.351 140.528 141.316 139.705 cv
141.213 139.704 li
141.291 138.968 141.634 138.656 141.734 137.979 cv
141.806 137.929 li
141.991 136.336 142.356 135.455 141.986 135.431 cv
142.377 134.928 141.887 136.989 142.463 136.197 cv
143.075 130.927 143.296 125.496 143.19 120.176 cv
143.342 119.568 143.388 119.18 143.517 119.039 cv
143.407 118.511 143.324 117.039 143.098 116.568 cv
143.117 116.746 143.273 116.213 143.274 115.93 cv
143.36 114.953 142.789 114.901 142.896 113.829 cv
143.023 114.243 143.157 114.379 143.29 114.226 cv
142.952 113.341 142.877 112.13 142.672 111.071 cv
142.752 111.23 142.816 111.484 142.933 111.434 cv
142.479 110.296 142.793 109.295 142.479 108.293 cv
142.738 108.652 li
142.84 106.974 142.232 108.214 142.241 106.773 cv
142.353 107.107 142.422 106.977 142.52 107.028 cv
141.962 105.746 141.834 103.586 141.539 102.28 cv
141.579 102.355 141.638 102.327 141.638 102.327 cv
141.404 100.894 141.383 99.3579 141.031 97.7915 cv
141.067 97.2026 141.59 97.9229 141.344 96.4028 cv
140.907 96.5049 140.884 93.8257 140.479 94.7773 cv
140.408 93.4619 140.406 91.3716 140.172 90.5132 cv
140.393 91.0869 140.655 89.8286 140.791 90.9131 cv
140.986 90.0669 li
141.179 90.1733 141.001 90.9175 141.206 90.6357 cv
141.139 90.0938 140.82 88.5229 140.851 88.0303 cv
140.492 87.0435 139.926 86.1523 139.75 84.5166 cv
139.978 85.2749 140.208 84.0449 140.321 84.562 cv
139.307 82.3325 li
139.253 81.7881 139.649 82.1929 139.492 81.4097 cv
139.376 81.4565 139.285 81.1162 139.177 80.8823 cv
139.219 80.6729 138.947 78.6108 139.372 78.3535 cv
139.53 78.103 139.511 79.2388 139.636 78.6265 cv
139.579 77.6201 139.421 77.5815 139.385 76.5713 cv
139.443 76.5488 li
139.489 75.8818 139.195 74.5898 138.976 75.3213 cv
138.976 75.7871 139.233 75.1367 139.127 75.8296 cv
138.861 75.3667 138.742 74.1919 138.722 73.1763 cv
138.794 73.522 138.91 73.4775 139.039 73.6133 cv
138.692 72.2554 138.536 70.8145 138.437 69.27 cv
138.229 69.2427 138.803 69.8511 138.688 70.0742 cv
139.005 68.127 138.386 65.9644 139.064 64.3755 cv
139.068 64.6465 138.752 64.4873 138.813 64.4746 cv
138.956 63.5283 139.25 63.6108 139.216 62.9814 cv
139.399 62.9434 139.255 62.2007 139.281 61.5562 cv
139.195 61.207 139.387 61.4058 139.337 61.9595 cv
139.291 61.063 139.72 57.4888 140.512 55.5732 cv
140.387 55.5845 140.436 54.2476 140.576 53.793 cv
140.79 54.0459 li
141.063 53.6763 141.193 52.5161 141.439 52.5083 cv
141.391 51.4463 140.668 56.3164 140.788 54.9355 cv
141.103 54.6592 140.88 52.9893 141.159 53.3745 cv
141.385 52.4565 141.382 51.4907 141.927 50.7207 cv
141.8 50.9541 142.042 51.5615 142.269 50.8379 cv
142.656 49.5557 142.268 50.4365 142.534 49.377 cv
142.649 48.6943 li
142.412 48.562 143.073 47.5703 142.631 47.9404 cv
142.863 47.9404 143.116 46.0928 143.486 46.3818 cv
143.757 46.6685 li
143.919 46.1182 143.712 45.6611 143.712 45.1851 cv
143.766 45.1235 143.877 45.0059 143.922 45.0508 cv
143.442 44.7954 144.379 43.7822 144.193 43.022 cv
144.729 41.9517 144.982 40.1948 145.434 39.7344 cv
145.409 38.4258 li
145.462 37.7686 li
145.521 37.4272 li
145.561 37.252 li
145.571 37.208 li
145.572 37.2021 li
144.413 35.8438 147.152 39.0522 146.869 38.7217 cv
146.869 38.7217 li
146.867 38.7217 li
146.864 38.7212 li
146.853 38.7192 li
146.828 38.7153 li
146.731 38.6982 li
146.813 38.6865 li
146.856 38.6816 li
146.867 38.6807 li
146.87 38.6802 li
146.872 38.6802 li
146.872 38.6802 li
146.873 38.6802 li
146.873 38.6802 li
144.358 35.7334 146.176 37.8633 145.614 37.2056 cv
145.615 37.2104 li
145.615 37.231 li
145.623 37.3892 li
145.632 37.4893 145.651 37.5732 145.704 37.6074 cv
145.783 37.3999 li
145.812 37.3086 li
145.823 37.2651 li
145.828 37.2441 li
145.831 37.2334 li
145.832 37.2285 li
145.833 37.2261 li
145.833 37.2246 li
145.604 36.9556 147.832 39.5664 146.889 38.4609 cv
146.888 38.4609 li
146.888 38.4609 li
146.569 38.4497 li
146.368 38.4619 146.173 38.5049 145.868 38.5264 cv
146.238 38.4741 144.226 38.1333 143.724 37.7188 cv
142.843 37.6646 143.075 38.0186 142.951 38.1689 cv
142.307 37.4365 140.556 38.123 139.602 37.6348 cv
139.909 37.5557 140.9 37.4199 140.175 37.2539 cv
139.369 36.7402 138.536 37.5493 137.221 37.3916 cv
137.558 37.8135 li
136.96 37.5723 135.651 38.1519 135.753 37.7095 cv
135.321 37.9053 134.176 37.7026 134.361 38.1147 cv
132.158 37.9448 129.037 38.9312 127.563 38.2432 cv
127.227 38.3408 126.454 38.3311 126.634 38.5361 cv
127.14 38.7349 127.362 38.3071 127.563 38.4521 cv
127.272 38.4897 127.218 38.6118 127.189 38.6729 cv
126.521 38.6299 125.958 38.6406 126.587 38.2368 cv
125.036 38.0908 125.063 39.082 123.1 39.0654 cv
123.175 38.8833 123.021 38.8267 122.453 38.8999 cv
121.394 39.2827 li
120.124 39.3037 120.645 38.9346 120.592 38.6387 cv
119.92 38.7383 119.095 38.7856 118.803 39.0303 cv
117.957 38.7158 li
118.574 38.9424 117.414 38.9365 117.103 39.0322 cv
117.414 38.9365 li
117.282 38.8213 116.505 38.9463 116.109 39.0068 cv
116.217 39.1841 117.022 39.2183 117.46 39.2363 cv
117.126 39.3955 116.583 39.3936 116.134 39.5762 cv
116.268 39.2749 115.016 39.4336 114.477 39.4355 cv
113.855 39.4087 113.793 39.7378 113.613 39.7402 cv
113.588 39.5889 112.603 39.7744 113.073 39.5327 cv
113.281 39.4702 113.563 39.6519 113.904 39.4966 cv
113.49 39.4082 113.523 39.1411 112.688 39.3843 cv
112.06 39.562 112.883 39.9648 111.663 39.8271 cv
111.977 39.7422 112.03 39.626 112.272 39.5078 cv
111.131 39.3979 li
111.093 39.6675 li
110.937 39.6055 111.042 39.5767 110.971 39.5454 cv
110.644 39.8389 109.241 39.6953 108.994 40.021 cv
108.421 40.0693 107.78 39.8809 107.232 39.8682 cv
107.338 39.8418 li
106.664 39.6924 105.776 39.7954 105.213 39.979 cv
105.242 39.9204 li
104.876 39.9009 104.011 39.9463 103.548 40.105 cv
102.624 39.9048 103.249 39.1016 102.223 39.4316 cv
101.288 39.4063 100.74 39.8662 101.113 40.0518 cv
99.4297 39.7871 97.4761 40.2178 95.936 39.6172 cv
95.6836 39.7021 95.832 39.7842 95.3232 39.8013 cv
92.8481 39.5376 90.0225 39.4927 88.1396 38.6655 cv
88.8745 38.6641 88.2339 38.4097 88.2471 38.2578 cv
87.8291 38.4824 87.3047 37.8164 87.019 38.0962 cv
86.6245 38.1792 87.293 38.6743 87.9087 38.8301 cv
87.5332 38.7324 87.9414 38.9897 86.894 38.5903 cv
86.6104 38.4663 li
86.4663 38.4019 li
86.394 38.3687 li
86.376 38.3604 li
86.3667 38.3564 li
86.3623 38.3545 li
85.8369 38.5986 90.9321 36.2251 88.7749 37.2305 cv
88.7749 37.2314 li
88.7744 37.2339 li
88.7656 37.2734 li
88.4653 38.5332 li
88.249 39.3506 88.0098 40.0776 87.8022 40.4463 cv
88.0093 40.0776 88.0039 40.4023 87.9966 40.731 cv
87.6484 40.5347 87.3291 41.5747 87.2637 42.4009 cv
87.4634 42.5684 li
87.1006 43.0225 li
87.0996 43.3438 87.4966 43.4761 87.0845 44.2021 cv
86.9854 44.2222 86.8843 44.2451 86.7827 44.3721 cv
86.77 45.2334 86.7954 46.457 86.3901 47.293 cv
85.9077 47.938 li
85.8657 48.3237 85.9351 49.0024 86.168 48.3604 cv
85.6548 49.8193 85.4268 50.7842 85.0356 51.2085 cv
85.2832 53.9375 84.8213 57.6621 84.6367 60.7778 cv
84.4678 60.6733 li
84.248 61.4912 84.7446 61.125 84.583 61.6938 cv
84.4351 61.4155 84.1777 62.3032 84.0171 61.6387 cv
83.751 62.8179 84.2178 63.188 84.2456 63.9604 cv
84.4683 64.0889 84.1401 63.3335 84.4224 63.4971 cv
84.4834 63.6304 84.1401 65.1299 84.5059 65.3296 cv
84.3633 65.6235 84.1108 65.3818 83.9722 65.2148 cv
84.1284 65.9497 li
83.7041 66.8311 83.438 63.8887 82.918 64.8076 cv
82.9595 65.4849 li
82.583 66.1201 82.582 63.6792 82.4248 65.3755 cv
82.583 66.1211 83.0771 66.7632 83.2441 66.1133 cv
83.311 67.6465 84.0625 66.8447 84.002 68.4824 cv
83.7876 68.9258 83.9775 67.1694 83.6846 67.4785 cv
83.3892 68.2456 83.8115 69.0313 83.7012 69.7173 cv
83.8467 68.9556 84.187 69.6055 84.2422 70.0986 cv
84.061 70.9287 83.9219 69.5532 83.8633 70.7339 cv
84.061 70.9297 84.1919 72.0137 84.3501 71.0771 cv
84.7925 71.5034 84.2026 72.3022 84.5737 72.9468 cv
84.2578 73.334 83.8145 71.7295 83.6714 73.0327 cv
83.978 72.8252 84.1138 74.6357 84.5625 73.9448 cv
84.4814 74.4541 84.2388 74.5103 84.0439 74.1406 cv
83.8628 74.8711 84.6313 75.9004 84.0215 76.1475 cv
84.3413 76.3936 li
84.2412 76.6235 84.1685 76.9502 84.0024 77.3262 cv
84.0049 77.9683 84.459 79.3838 83.98 79.3374 cv
84.0313 79.5415 84.0562 81.0137 84.3691 80.438 cv
84.5425 79.5186 84.0962 79.3916 84.5376 78.8745 cv
84.1768 79.5254 84.6172 80.1904 84.7524 80.7139 cv
84.5698 80.8052 li
84.6514 81.1177 84.6318 81.8433 84.8379 82.0347 cv
84.7251 81.7954 84.6025 81.9253 84.5654 82.1758 cv
84.856 82.4985 li
85.0342 83.7715 84.3706 82.814 84.4893 84.0547 cv
84.2437 83.1157 li
84.2964 83.3223 84.0454 83.7524 84.1504 84.3467 cv
84.4141 84.5703 84.7344 84.9951 84.9395 85.1875 cv
85.0728 85.8848 84.6597 85.5107 84.9434 86.1924 cv
84.6064 85.2988 li
84.5181 85.1641 84.2012 85.9204 84.2358 86.8564 cv
84.3438 87.4458 84.751 88.3618 84.856 87.4155 cv
84.8784 87.8833 84.7466 88.5449 84.5449 88.1807 cv
84.6748 89.2383 84.8159 88.0303 85.0103 88.9385 cv
84.855 89.3198 84.6519 90.4946 84.4365 91.2114 cv
83.9673 90.2725 li
83.9883 90.9082 li
83.6099 90.0981 83.7451 91.3384 83.3608 90.8872 cv
83.3252 91.3257 83.4712 91.8486 83.5845 92.2656 cv
84.1079 90.9663 84.4409 93.6572 84.9526 93.2637 cv
85.1758 95.002 83.7139 94.4131 84.623 96.1992 cv
84.748 95.8945 85.1885 96.7358 84.9868 95.6406 cv
84.9771 96.7305 85.5508 96.3569 85.3882 97.6499 cv
85.1289 96.7095 84.897 98.6924 84.5205 97.3345 cv
84.7002 97.4175 84.6201 96.5625 84.562 96.3545 cv
84.3779 96.8105 84.0229 96.2856 84.0718 97.3975 cv
84.1553 98.0732 84.1982 99.0068 84.4702 98.8594 cv
84.7725 98.8193 84.3975 97.8218 84.7212 98.2451 cv
84.8789 99.5981 84.4253 99.8423 84.9868 100.383 cv
84.9102 99.5273 85.2148 99.3008 85.4238 99.3091 cv
85.5889 100.301 li
85.3799 100.116 li
85.2939 101.723 85.7686 100.573 85.7642 102.13 cv
85.3862 102.873 li
85.0381 102.512 85.4678 100.607 84.9165 100.905 cv
84.936 101.911 85.2212 102.239 85.1055 103.195 cv
84.9746 102.487 li
84.9658 102.852 84.2354 103.23 84.709 104.656 cv
84.8979 105.395 84.9136 104.849 85.1226 104.862 cv
85.2212 106.484 85.4277 106.971 85.4761 108.02 cv
85.0659 107.807 85.4561 109.874 85.0269 108.717 cv
85.2593 108.186 85.2109 105.828 84.8125 105.262 cv
84.3447 105.862 84.8452 103.988 84.3457 103.655 cv
84.3701 104.952 83.8926 104.898 83.5869 105.114 cv
83.5771 105.473 83.708 105.819 83.7603 106.032 cv
84.0547 106.18 84.0459 105.709 84.3467 105.676 cv
84.2813 107.127 84.4697 108.52 84.7544 109.322 cv
84.604 109.809 84.313 109.654 84.2905 109.08 cv
84.3496 110.807 84.3257 112.652 84.1499 114.291 cv
84.6709 113.245 84.1929 116.127 84.6187 115.419 cv
84.7603 114.543 85.1304 113.792 85.3262 114.29 cv
85.2744 114.842 85.1172 114.263 85.0063 114.491 cv
85.2402 115.209 84.5449 115.566 84.9307 116.278 cv
84.8359 114.683 84.3594 115.942 83.9961 115.632 cv
84.1592 116.78 83.7397 115.57 83.6792 116.694 cv
83.7998 117.833 83.8843 119.24 83.8438 120.507 cv
83.3267 122.051 83.3936 124.505 83.146 125.915 cv
82.8423 126.619 82.5029 126.051 82.3047 126.829 cv
82.1592 127.76 82.8779 126.222 82.4419 127.562 cv
82.3872 127.415 li
82.394 127.851 81.5752 129.854 82.083 130.395 cv
81.7246 129.871 li
81.6294 130.116 81.6826 130.375 81.6855 130.597 cv
81.5371 130.573 81.3423 130.836 81.334 130.401 cv
80.8428 131.162 80.9214 132.148 80.6968 133.056 cv
81.1172 132.549 li
80.9277 134.163 80.3203 135.102 79.8979 136.595 cv
79.6621 136.461 li
79.5137 137.387 li
79.3481 137.087 78.9224 137.823 78.9185 138.342 cv
79.0488 137.537 79.0562 136.697 79.1182 135.887 cv
79.4795 135.316 79.1875 136.672 79.5698 136.369 cv
79.9014 136.111 80.2959 134.73 80.126 134.438 cv
79.9214 134.945 79.9692 134.986 79.9229 135.418 cv
79.5132 135.471 79.7944 134.694 79.6895 134.237 cv
79.6123 134.51 79.375 134.856 79.4663 134.95 cv
79.4854 134.371 79.6284 133.833 79.8506 132.935 cv
79.8252 133.579 80.1611 132.669 80.2002 132.926 cv
79.9053 132.764 80.041 131.889 80.4307 130.811 cv
80.9946 130.104 80.647 128.659 81.0283 127.395 cv
81.2417 127.98 81.3579 128.709 81.3198 129.533 cv
81.6553 128.746 81.5039 128.619 81.8418 127.827 cv
81.6909 127.383 81.3779 127.031 81.3921 125.933 cv
81.6416 125.915 li
81.6724 124.919 81.3154 124.867 81.5796 123.644 cv
81.958 121.532 82.1934 119.332 82.311 117.694 cv
82.5586 117.65 li
82.1309 116.707 82.5249 114.598 82.3418 113.359 cv
82.6304 111.271 82.1836 108.814 82.5781 107.738 cv
82.3662 104.037 82.0464 100.808 81.9775 96.9614 cv
82.3584 97.5938 li
82.0684 96.9155 82.5435 97.1362 82.4609 96.4619 cv
82.2129 97.252 82.0532 95.541 81.8159 95.0752 cv
82.0186 93.3491 81.6118 91.1631 81.3105 89.6484 cv
81.5518 89.5791 li
81.0293 88.0566 81.3696 86.1987 81.3936 84.2852 cv
81.4878 84.063 81.7061 83.71 81.6626 83.1401 cv
81.2388 82.1128 81.251 81.5684 80.96 80.0498 cv
80.9287 78.9365 81.0132 77.1177 81.1479 75.9824 cv
80.5039 71.7905 80.936 67.4805 80.7935 63.0825 cv
81.1006 62.7813 li
80.707 58.5107 81.7344 53.2544 82.2393 49.6089 cv
82.6465 50.0488 li
83.0264 48.96 83.0537 47.4702 82.6543 47.6797 cv
83.0156 46.5723 83.0674 44.8398 83.6304 44.2305 cv
83.998 43.124 83.7534 42.7949 83.9233 41.8384 cv
84.6621 39.6392 84.8271 38.8081 85.2637 36.6787 cv
85.1045 37.1943 li
85.1519 37.4502 85.3481 37.52 85.5098 37.0029 cv
85.563 36.646 li
85.584 36.5439 li
85.5952 36.4917 li
85.5981 36.4785 li
85.5986 36.4756 li
85.5991 36.4736 li
86.5918 36.0107 83.377 37.5088 87.8252 35.4355 cv
87.8262 35.436 li
87.832 35.439 li
87.8569 35.4507 li
88.0601 35.5483 li
88.6958 35.8394 88.1274 35.6426 88.4902 35.6709 cv
89.0225 35.7295 89.3652 35.7021 89.0249 35.355 cv
91.2104 36.0864 94.2837 35.8604 96.457 36.4546 cv
96.2827 36.2788 96.8423 36.2993 97.0815 36.2129 cv
99.0732 36.3271 101.176 36.7217 102.781 36.4893 cv
103.1 36.5679 102.267 36.7632 103.089 36.7764 cv
103.575 36.7124 103.1 36.5679 103.699 36.4766 cv
106.949 36.1997 110.315 36.6802 113.301 36.4414 cv
118.554 35.8408 124.212 35.5396 129.219 35.0664 cv
129.174 35.1895 li
130.807 34.5732 133.209 35.1953 134.56 34.4194 cv
134.98 34.4863 136.155 34.3428 135.862 34.5947 cv
137.281 34.2168 139.838 34.6641 142.035 34.6084 cv
141.839 34.5752 141.721 34.584 141.487 34.6089 cv
142.555 34.8159 143.574 35.0112 144.626 35.2769 cv
145.267 35.4551 144.798 35.2827 145.685 35.3906 cv
146.432 35.4658 li
146.813 35.5181 li
147.006 35.5488 li
147.054 35.5571 li
147.078 35.5615 li
147.091 35.5635 li
147.094 35.564 li
147.095 35.5645 li
150.354 39.3848 147.999 36.6245 148.726 37.4775 cv
148.725 37.4839 li
148.698 37.5879 li
148.693 37.4932 li
148.693 37.4805 li
148.693 37.4741 li
148.693 37.4731 li
148.693 37.4731 li
150.123 39.1489 146.745 35.1899 147.093 35.5977 cv
147.093 35.5977 li
147.091 35.5977 li
147.088 35.5981 li
147.063 35.6011 li
147.013 35.6064 li
146.807 35.6323 li
146.673 35.6528 146.557 35.6831 146.521 35.7393 cv
146.835 35.8062 li
147.001 35.8154 li
147.043 35.8154 li
147.063 35.8154 li
147.074 35.8149 li
147.077 35.8149 li
145.827 34.3506 148.78 37.8105 148.476 37.4546 cv
148.476 37.4551 li
148.476 37.4565 li
148.476 37.4619 li
148.471 37.5522 li
148.48 38.2783 li
148.49 38.7505 148.463 39.1768 148.148 39.3643 cv
148.076 39.8564 148.373 39.7681 148.404 39.459 cv
147.314 44.2598 145.646 48.9692 144.396 53.4507 cv
143.172 56.583 143.428 53.3838 143.119 56.0542 cv
142.955 56.2368 143.285 56.2612 143.162 56.2656 cv
143.021 57.2861 142.15 57.668 142.296 58.436 cv
142.693 58.2241 142.39 58.9429 142.592 59.0078 cv
141.975 60.9673 141.506 61.3218 141.603 62.9722 cv
141.435 62.8252 li
141.705 64.7617 141.138 66.9434 141.732 68.5371 cv
141.688 79.0444 142.997 89.2905 144.176 99.5996 cv
145.313 109.804 146.791 120.176 145.554 130.992 cv
144.853 133.475 144.72 133.64 144.516 136.442 cv
144.458 136.315 144.466 136.14 144.365 136.312 cv
144.711 136.518 144.143 138.268 144.377 138.598 cv
143.399 142.553 142.256 146.132 140.41 149.975 cv
140.64 149.341 140.484 148.895 140.193 149.63 cv
140.141 150.065 li
140.14 150.072 li
140.14 150.073 li
140.14 150.074 li
143.786 151.25 135.172 148.473 136.059 148.758 cv
136.059 148.758 li
136.059 148.757 li
136.058 148.753 li
136.056 148.74 li
136.052 148.715 li
136.043 148.664 li
136.025 148.563 li
135.991 148.36 li
136.119 148.248 li
136.106 147.866 li
136.083 147.7 li
136.067 147.629 li
136.063 147.612 li
136.062 147.604 li
136.061 147.603 li
136.061 147.603 li
140.22 152.911 137.213 149.074 138.142 150.259 cv
138.141 150.259 li
138.14 150.26 li
138.136 150.261 li
138.104 150.269 li
138.023 150.291 137.979 150.322 137.99 150.361 cv
138.054 150.427 li
138.084 150.445 li
138.103 150.455 li
138.112 150.46 li
138.117 150.462 li
138.119 150.463 li
138.121 150.464 li
138.121 150.464 li
140.145 153.047 135.364 146.944 135.856 147.573 cv
135.856 147.574 li
135.82 147.656 li
135.826 147.598 li
135.828 147.584 li
135.829 147.576 li
136.85 148.877 133.545 144.653 138.118 150.491 cv
138.084 150.486 li
137.951 150.468 li
137.685 150.431 li
137.151 150.353 li
136.086 150.188 li
135.348 150.094 134.734 149.898 134.087 149.728 cv
132.756 149.377 131.639 149.012 130.458 148.641 cv
128.37 148.05 125.651 147.439 123.481 146.895 cv
118.511 145.851 114.041 144.773 109.255 144.858 cv
107.014 144.64 103.812 145.013 101.368 145.403 cv
93.9727 146.012 86.8262 146.091 79.2466 146.384 cv
79.2476 146.373 80.2427 145.388 83.3999 145.096 cv
cp
f
77.7368 138.987 mo
78.0205 138.82 78.458 138.058 78.4312 138.796 cv
78.2271 138.807 77.8643 139.138 77.7368 138.987 cv
cp
f
84.4766 116.586 mo
84.4233 116.552 84.5728 116.254 84.6069 116.181 cv
84.6147 116.472 84.7563 116.755 84.6382 116.982 cv
84.6455 116.685 84.5474 116.725 84.4766 116.586 cv
cp
f
84.7671 110.557 mo
84.9409 110.649 85.0664 111.943 85.0791 112.706 cv
84.7671 110.557 li
cp
f
85.4502 104.933 mo
85.5845 104.446 85.6689 104.577 85.6826 105.229 cv
85.5913 105.279 85.5386 105.064 85.4502 104.933 cv
cp
f
85.041 104.545 mo
85.0234 104.08 85.1191 103.846 85.2148 103.617 cv
85.064 103.638 85.3384 104.693 85.041 104.545 cv
cp
f
85.083 92.418 mo
85.0566 92.1299 84.8838 91.5088 85.0649 91.2314 cv
84.9438 91.5391 85.3496 92.6309 85.083 92.418 cv
cp
f
84.5967 86.8452 mo
84.603 86.6641 84.6323 86.5894 84.5781 86.3809 cv
84.6479 86.0464 84.7861 86.3926 84.8105 86.6724 cv
84.5967 86.8452 li
cp
f
138.512 37.668 mo
137.932 37.7568 li
138.014 37.5796 li
138.512 37.668 li
cp
f
138.37 72.604 mo
138.485 73.2134 138.211 73.0313 138.186 73.1343 cv
138.162 72.5811 138.401 73.3359 138.37 72.604 cv
cp
f
140.875 96.7124 mo
140.851 96.5293 li
141.215 96.5527 li
140.875 96.7124 li
cp
f
21.6875 133.772 mo
21.6875 133.772 22.334 133.622 23.1172 133.059 cv
23.1172 133.059 25.3223 134.145 25.3223 135.657 cv
25.3223 135.732 25.2871 137.331 24.4004 137.57 cv
24.4004 137.57 21.918 137.531 21.6738 135.266 cv
21.6738 135.266 21.5469 134.784 21.6875 133.772 cv
21.6875 133.772 li
cp
21.9453 144.236 mo
21.9453 144.236 19.8516 142.348 21.875 141.707 cv
21.875 141.707 24.4316 141.389 25.0176 141.92 cv
25.0176 141.92 28.3203 144.371 25.1777 145.33 cv
25.1777 145.33 24.5371 145.596 25.2852 145.914 cv
25.2852 145.914 27.7344 148.26 25.6563 150.709 cv
25.6563 150.709 25.1738 150.887 24.5977 150.852 cv
24.5977 150.852 23.4199 151.934 23.2598 152.252 cv
23.2598 152.252 28 154.385 30.291 155.93 cv
30.291 155.93 36.7344 157.58 37.5879 158.059 cv
37.5879 158.059 51.1699 161.732 54.2598 161.094 cv
54.2598 161.094 56.9219 161.947 54.5801 163.066 cv
54.5801 163.066 53.5801 163.799 51.9688 164.33 cv
51.9688 164.33 51.582 166.207 49.6387 165.822 cv
49.6387 165.822 32.3145 161.414 27.3086 157.793 cv
27.3086 157.793 23.0273 154.66 21.4473 154.535 cv
21.4473 154.535 20.9883 154.389 20.5664 154.91 cv
20.5664 154.91 18.748 156.191 18.1387 154.984 cv
18.1387 154.984 17.5332 153.879 19.0332 153.43 cv
19.0332 153.43 19.8242 152.359 22.0449 152.199 cv
22.0449 152.199 23.6504 150.33 23.9746 149.422 cv
23.9746 149.422 24.2227 148.201 23.5996 147.768 cv
22.9414 147.311 21.8711 146.338 21.9453 144.236 cv
21.9453 144.236 li
cp
30.5684 132.436 mo
30.7207 131.674 31.8789 131.555 32.4238 132.102 cv
32.5371 132.216 34.748 133.415 35.7578 136.344 cv
36.6914 136.318 li
36.6914 136.318 37.5879 135.789 39.4941 132.682 cv
39.4941 132.682 40.1621 130.295 42.3984 132.026 cv
42.3984 132.026 45.125 134.108 38.5977 136.318 cv
44.3789 136.394 li
44.3789 136.394 45.3652 137.165 45.0352 139.373 cv
37.0313 139.625 li
35.4277 141.279 li
40.1875 141.289 li
40.1875 141.289 41.5977 140.344 42.5527 142.4 cv
42.6016 142.506 42.5488 154.99 42.5488 154.99 cv
42.5488 154.99 42.0059 157.047 40.7949 157.148 cv
40.7949 157.148 39.0273 157.012 38.8887 154.434 cv
33.6992 154.283 li
33.6992 154.283 29.5449 156.43 29.3438 153.791 cv
29.3438 153.791 28.4961 152.016 31.0469 151.486 cv
31.5742 141.35 li
32.7773 140.08 li
29.5723 140.383 li
29.5723 140.383 28.6309 140.809 26.9824 140.775 cv
26.9824 140.775 25.666 140.229 26.041 138.281 cv
26.0977 137.996 26.7852 136.635 27.8652 136.836 cv
28.0156 136.865 31.627 136.773 31.627 136.773 cv
31.6797 136.469 li
31.627 136.344 30.7832 135.793 30.416 134.489 cv
30.416 134.489 30.2617 133.985 30.5684 132.436 cv
30.5684 132.436 li
cp
33.623 143.955 mo
35.9727 144.066 li
37.1445 145.348 36.5508 145.971 36.5508 145.971 cv
36.5508 145.971 33.7793 146.215 33.623 146.236 cv
33.3652 146.275 33.3223 147.432 33.3223 147.432 cv
35.0488 147.475 li
36.1172 148.045 36.0859 149.58 36.0859 149.58 cv
34.4258 150.336 33.7949 150.533 33.5352 150.596 cv
32.6094 150.816 33.0508 151.482 33.0098 151.553 cv
32.877 151.773 39.3379 152.367 39.3379 152.367 cv
39.1387 142.605 li
37.4785 142.584 li
34.9063 142.518 33.623 143.955 33.623 143.955 cv
33.623 143.955 li
cp
38.1191 83.2954 mo
39.0156 83.1099 40.9668 84.3071 41.5 84.9731 cv
41.5 84.9731 42.1133 86.3042 40.4883 87.1567 cv
40.4883 87.1567 37.7715 88.8345 36.5742 88.9409 cv
36.5742 88.9409 37.0273 89.4478 37.3184 89.5269 cv
37.3184 89.5269 43.4727 89.2075 45.3359 89.7397 cv
45.3359 89.7397 47.7871 90.4058 46.8809 92.2964 cv
46.8809 92.2964 40.8887 94.8267 39.3965 94.2935 cv
39.3965 94.2935 39.0234 94.2134 41.1016 92.5103 cv
41.1016 92.5103 42.0879 91.8169 36.5195 92.1372 cv
36.627 98.5552 li
36.627 98.5552 36.4629 99.5444 36.2441 100.135 cv
35.9883 102.602 li
45.7891 102.389 li
45.7891 102.389 46.1348 102.07 46.7734 102.389 cv
46.7734 102.389 48.6641 103.561 48.6113 104.2 cv
48.6113 104.2 49.1289 105.692 46.6934 105.692 cv
36.8125 105.559 li
36.8125 105.559 40.4355 109.444 43.0195 110.135 cv
43.0195 110.135 49.5977 112.159 50.4219 112.985 cv
50.4219 112.985 52.3398 113.25 52.3926 114.45 cv
52.3926 114.45 52.5273 115.221 51.3809 115.328 cv
45.0156 115.727 li
45.0156 115.727 36.4141 109.443 36.1465 108.511 cv
35.6152 116.766 li
35.6152 116.766 34.0977 119.537 32.8984 117.805 cv
32.8984 117.805 31.0605 115.594 30.875 115.569 cv
30.875 115.569 30.3164 115.381 30.0215 114.983 cv
30.0215 114.983 29.9941 114.956 30.875 115.116 cv
30.875 115.116 31.1152 114.61 30.7148 114.317 cv
30.7148 114.317 29.1426 112.799 31.8867 114.475 cv
31.8867 114.475 32.2324 114.422 31.8867 114.078 cv
31.1934 113.198 li
31.1934 113.198 32.8184 114.264 33.0059 114.078 cv
33.1387 108.138 li
33.1387 108.138 25.3359 114.396 24.9355 114.61 cv
24.5352 114.823 20.8867 115.116 20.8867 115.116 cv
20.8867 115.116 23.7871 112.905 24.082 112.906 cv
24.1895 112.906 25.6289 111.415 28.0781 110.055 cv
28.0781 110.055 32.127 105.851 31.9668 105.585 cv
31.8066 105.319 24.8828 105.639 23.8965 106.223 cv
22.9121 106.808 20.4883 106.968 21.5 104.414 cv
22.5117 101.856 22.9648 102.737 24.3242 102.895 cv
25.6816 103.055 28.7715 102.762 28.7715 102.762 cv
33.4316 102.629 li
33.8633 99.563 li
33.8633 99.563 34.2832 98.7778 34.4961 95.9976 cv
31.7793 98.395 li
28.0254 98.9009 li
28.0254 98.9009 29.8105 98.3687 33.5645 92.6431 cv
33.5645 92.6431 34.3359 91.897 31.7012 92.3228 cv
31.7012 92.3228 26.0801 92.936 25.3633 93.3618 cv
25.3633 93.3618 23.0195 93.894 23.0723 92.0298 cv
23.0723 92.0298 22.4863 90.6724 25.2813 90.5923 cv
25.2813 90.5923 32.2324 90.5923 32.4727 90.2456 cv
32.4727 90.2456 32.873 90.0063 32.1797 89.5532 cv
32.1797 89.5532 31.0098 88.5679 32.3926 87.8228 cv
34.6836 87.9028 li
34.6836 87.9028 35.6699 86.6763 35.6953 86.1978 cv
35.6953 86.1978 32.1797 86.9438 31.834 86.7563 cv
31.4863 86.5708 30.0215 85.9575 29.8359 84.7603 cv
29.8359 84.7603 29.6758 83.9077 30.7949 83.8013 cv
30.7949 83.8013 35.9336 83.7485 38.1191 83.2954 cv
38.1191 83.2954 li
cp
f
119.49 58.502 mo
118.662 59.3984 117.787 60.0527 116.922 60.4658 cv
116.277 60.7734 116.072 60.6309 116.109 59.9395 cv
116.145 59.2598 116.393 59.0996 116.754 59.0293 cv
119.49 58.502 li
119.49 58.502 li
cp
110.729 71.6807 mo
111.504 76.7578 li
111.65 77.7207 111.707 78.8887 111.477 80.3398 cv
109.408 79.5078 107.512 78.8105 106.129 78.709 cv
106.338 76.9531 106.822 74.9766 107.387 72.9365 cv
108.537 72.665 109.648 72.2373 110.729 71.6807 cv
110.729 71.6807 li
cp
100.781 54.3711 mo
100.727 53 li
106.787 50.9941 112.873 48.2529 117.658 47.082 cv
120.186 46.4629 121.359 47.6855 122.316 48.5625 cv
123.186 49.3555 123.195 50.3633 122.482 51.1914 cv
117.385 55.7402 li
120.146 55.1162 122.453 54.9072 124.016 55.5215 cv
125.954 56.2852 126.235 57.6016 124.729 59.084 cv
123.016 60.7695 121.059 62.0195 119.248 63.3584 cv
118.451 63.9492 117.199 64.0742 115.467 64.0703 cv
114.383 64.0693 113.77 64.7607 113.549 66.1523 cv
113.326 67.5527 114.15 67.293 115.357 67.1943 cv
116.969 67.0625 118.723 67.3955 120.453 66.8105 cv
122.938 65.9727 124.563 64.958 126.591 65.4395 cv
127.671 65.6973 128.593 66.3184 129.497 66.9756 cv
130.083 67.4023 130.272 68.3711 130.183 69.8467 cv
130.114 70.9834 129.563 70.6523 128.62 70.208 cv
126.517 69.2207 123.895 69.2666 120.893 69.7783 cv
119.393 70.0332 117.902 70.085 116.467 70.0059 cv
116.117 69.9883 116.178 69.9951 116.135 70.3428 cv
115.545 75.2891 115.33 82.2051 114.918 85.4961 cv
112.111 84.8516 108.727 83.2949 105.307 81.0449 cv
104.734 80.666 104.59 80.8535 104.287 81.2773 cv
103.533 82.332 102.678 83.0547 101.711 83.4141 cv
100.715 83.7852 100.357 83.2539 100.836 82.0449 cv
101.484 80.4004 103.105 78.4531 102.918 77.168 cv
102.973 75.6875 li
96.7793 77.4414 li
95.1582 77.9004 95.0078 76.1387 96.1758 75.4141 cv
100.77 72.5635 105.355 70.6436 109.822 69.0586 cv
109.197 68.4316 110.053 66.5928 110.426 64.8926 cv
109.186 66.3359 107.959 67.5254 106.691 68.5098 cv
105.199 69.667 104.457 69.4121 105.164 67.7422 cv
106.699 64.126 li
103.061 65.5273 99.9805 66.2227 97.4375 66.5371 cv
95.9219 66.7227 95.6465 65.1719 97.1094 64.5098 cv
101.936 62.3223 106.777 60.2109 111.576 57.9873 cv
108.613 57.6494 108.207 56.3154 109.779 55.6582 cv
111.354 55 112.975 54.6191 114.488 53.377 cv
115.479 52.5645 115.555 51.332 114.578 51.4932 cv
112.666 51.8086 111.453 53.8027 109.928 54.8125 cv
109.193 55.2988 108.447 55.5 107.85 55.4121 cv
100.781 54.3711 li
100.781 54.3711 li
cp
ef
118.203 77.2754 mo
116.531 77.2598 116.432 78.1816 117.977 79.9492 cv
119.131 81.2715 120.383 82.543 121.74 83.0566 cv
122.52 83.3516 123.117 83.3945 123.545 83.2441 cv
124.639 82.8594 124.625 81.2168 123.746 79.332 cv
123.404 78.5977 122.754 78.1855 122.031 77.875 cv
120.83 77.3555 119.354 77.2402 118.203 77.2754 cv
118.203 77.2754 li
cp
ef
115.615 98.2715 mo
114.688 99.123 114.885 99.6641 115.963 99.9766 cv
116.393 100.102 116.621 100.311 116.881 100.596 cv
117.346 101.102 117.982 100.836 118.447 100.295 cv
118.74 99.9551 119.057 99.7676 119.338 99.5234 cv
119.869 99.0605 119.73 98.3281 118.705 97.7129 cv
117.717 97.1211 116.545 97.4199 115.615 98.2715 cv
115.615 98.2715 li
cp
ef
100.844 110.018 mo
100.316 109.207 li
101.586 106.912 102.514 104.531 103.527 101.865 cv
104.434 99.4766 106.57 99.8926 106.844 101.549 cv
107.445 105.164 104.385 107.891 100.844 110.018 cv
100.844 110.018 li
cp
ef
110.293 95.2988 mo
110.354 93.8047 113.355 93.5293 113.52 95.6113 cv
113.639 97.1113 113.072 98.9063 112.854 101.094 cv
112.75 102.145 112.756 103.033 113.904 102.646 cv
116.543 101.762 117.396 102.191 115.668 104.621 cv
112.729 108.021 li
113.021 112.852 li
113.416 111.729 113.662 109.865 113.945 108.189 cv
114.309 106.947 114.967 106.609 116.381 107.561 cv
116.539 107.666 116.574 108.08 116.764 108.08 cv
116.951 108.08 117.344 107.641 117.516 107.561 cv
120.379 106.209 119.588 105.826 120.455 104.789 cv
122.008 102.93 122.203 101.563 120.781 102.857 cv
119.77 103.779 118.855 104.758 118.271 104.074 cv
117.531 103.211 117.863 102.195 118.564 101.555 cv
120.176 100.09 121.557 99.1602 122.891 98.8672 cv
124.402 98.5371 125.554 98.6777 126.208 99.5391 cv
126.817 100.342 126.122 101.58 125.034 102.773 cv
122.43 105.629 li
123.521 105.322 124.613 105.012 125.704 104.705 cv
126.362 103.752 126.944 103.693 127.679 103.781 cv
128.745 103.91 129.515 103.725 129.989 103.992 cv
130.519 104.494 130.884 104.984 131.081 105.504 cv
131.45 106.48 130.792 106.941 129.737 107.141 cv
123.018 108.568 li
122.971 109.158 123.17 109.428 123.436 109.408 cv
124.018 109.367 124.227 109.695 124.318 110.92 cv
124.352 111.361 124.129 112.885 124.738 119.908 cv
125.017 123.102 125.032 126.096 124.779 128.6 cv
124.248 133.924 119.957 131.441 117.096 129.314 cv
114.004 127.014 114.068 126.172 115.416 126.123 cv
117.232 126.053 118.787 127.977 121.086 127.844 cv
121.471 123.416 121.301 119.627 120.707 116.211 cv
120.457 114.775 120.119 113.355 119.826 111.928 cv
119.453 110.727 119.133 111.133 118.482 112.053 cv
117.91 112.863 116.912 112.852 115.877 112.348 cv
115.674 112.092 115.4 112.186 115.164 112.684 cv
114.449 114.195 li
115.475 114.711 116.504 115.217 117.264 116.002 cv
118.574 117.354 118.271 119.021 117.6 118.824 cv
116.396 118.469 115.33 117.813 114.232 117.043 cv
113.342 116.418 112.867 117.139 113.189 118.646 cv
114.197 123.35 li
114.77 125.264 113.936 126.074 112.182 125.785 cv
110.197 125.461 110.516 124.293 109.285 123.309 cv
107.912 122.211 107.254 122.615 107.227 120.326 cv
107.193 117.48 106.943 114.818 106.555 113.104 cv
106.242 111.721 106.691 111.09 107.438 110.961 cv
108.273 110.818 109.02 111.139 109.074 112.137 cv
109.328 116.729 108.203 119.389 110.461 121.25 cv
110.605 119.061 110.691 116.715 110.566 114.262 cv
110.498 112.932 110.314 111.641 110.166 110.164 cv
110.123 109.729 109.877 109.846 109.242 109.955 cv
108.678 110.051 108.096 109.863 107.521 109.619 cv
107.08 110.02 106.602 110.357 106.094 110.627 cv
105.984 111.934 105.74 113.078 105.295 113.986 cv
106.6 117.6 106.922 121.879 105.631 127.088 cv
105.135 129.09 102.574 129.014 102.404 126.953 cv
102.213 124.566 103.219 122.688 102.859 119.865 cv
99.959 124.297 96.4414 127.93 92.2344 130.658 cv
91.9902 130.816 91.7246 130.611 91.4785 130.322 cv
91.1426 129.924 91.3008 129.439 91.7734 128.852 cv
93.6973 126.461 95.4375 124.043 96.8789 121.568 cv
98.1719 119.35 99.209 117.082 100.172 114.824 cv
102.607 109.115 li
102.883 108.467 103.314 108.168 103.951 108.107 cv
106.746 107.836 109.119 106.779 110.754 104.537 cv
110.432 101.121 110.188 97.8906 110.293 95.2988 cv
110.293 95.2988 li
cp
ef
188.657 28.9707 mo
188.716 28.9707 188.802 28.9707 188.831 28.9414 cv
188.978 29.0283 189.151 29.0869 189.267 29.1738 cv
189.499 29.1445 189.614 29.4639 189.847 29.3184 cv
189.876 29.5508 190.138 29.5215 190.226 29.6953 cv
190.458 29.7539 li
190.196 29.8125 190.515 29.9863 190.312 30.1016 cv
190.341 30.3633 190.573 30.5664 190.573 30.8271 cv
190.515 30.9727 190.718 31.2051 190.397 31.292 cv
190.458 31.6406 190.079 31.3496 189.935 31.5234 cv
189.499 31.5527 189.063 31.7559 188.569 31.8438 cv
188.136 31.959 187.729 32.0459 187.294 32.2197 cv
187.12 32.3652 186.743 32.3066 186.569 32.3945 cv
186.452 32.6563 186.104 32.627 185.901 32.8008 cv
185.728 32.7422 185.61 32.9453 185.351 32.8867 cv
185.001 33.0898 184.712 33.1777 184.364 33.2363 cv
184.276 33.1777 184.161 33.1777 184.132 33.1201 cv
183.522 33.2646 183.087 32.7129 182.622 32.5391 cv
182.362 32.2197 181.956 31.9883 181.636 31.7559 cv
181.665 31.5527 181.55 31.3496 181.347 31.2344 cv
181.288 31.2344 li
181.288 31.1182 li
181.433 31.1465 181.376 30.9727 181.433 30.9434 cv
181.927 30.8271 182.333 30.5371 182.854 30.4785 cv
183.552 30.4219 184.073 29.9863 184.771 29.8994 cv
185.728 29.5215 186.743 29.1152 187.729 28.8828 cv
187.845 28.71 188.165 28.8262 188.366 28.7969 cv
188.454 28.8262 188.569 28.8828 188.657 28.9707 cv
188.657 28.9707 li
cp
ef
182.216 29.4355 mo
182.245 29.2891 182.333 29.2314 182.419 29.1152 cv
182.419 29.1445 182.304 29.377 182.216 29.4355 cv
182.216 29.4355 li
cp
0 0 0 1 cmyk
ef
204.731 33.8457 mo
204.847 34.0771 205.167 34.1055 205.399 34.1641 cv
205.167 34.0479 204.964 33.9609 204.731 33.8457 cv
204.731 33.8457 li
cp
175.833 31.4082 mo
175.747 31.5527 175.601 31.7559 175.456 31.8438 cv
175.397 32.0176 175.108 32.1035 175.224 32.3066 cv
175.747 31.8145 li
175.718 31.6406 176.009 31.5811 175.948 31.4082 cv
175.833 31.4082 li
175.833 31.4082 li
cp
182.622 28.5938 mo
182.884 28.6514 182.769 28.3613 182.884 28.2744 cv
182.798 28.3906 182.681 28.4775 182.622 28.5938 cv
182.622 28.5938 li
cp
185.38 17.8867 mo
185.669 18.0322 186.075 18.293 186.308 18.584 cv
186.626 18.7578 186.831 19.1934 186.946 19.5117 cv
186.888 19.6289 187.062 19.7734 186.917 19.8887 cv
187.032 20.209 187.12 20.3535 187.179 20.7012 cv
187.12 20.7305 187.062 20.7598 187.032 20.7891 cv
187.091 20.876 187.062 20.9336 187.062 21.0205 cv
188.077 21.4561 189.034 21.9785 189.847 22.7324 cv
190.079 23.2549 190.63 23.4863 190.979 23.8633 cv
191.53 24.5605 192.399 25.2275 193.097 25.6914 cv
193.097 25.75 li
193.735 26.2441 194.46 26.8809 195.187 27.2871 cv
195.157 27.375 li
195.476 27.4902 195.593 27.8389 195.97 27.8682 cv
196.114 28.0703 196.376 28.1875 196.579 28.332 cv
196.665 28.5645 196.956 28.4482 197.042 28.71 cv
197.159 28.6514 197.218 28.7383 197.218 28.7969 cv
197.769 29.0869 198.001 29.4063 198.552 29.6953 cv
198.958 29.9277 199.188 30.1895 199.567 30.3633 cv
199.624 30.5371 199.8 30.4785 199.915 30.5371 cv
200.233 30.7695 200.524 31.0313 200.901 31.1465 cv
200.931 31.4082 201.335 31.4375 201.511 31.6406 cv
201.917 31.4941 202.237 31.9014 202.526 32.0459 cv
202.614 32.0176 202.729 32.1035 202.729 32.1914 cv
203.282 32.6836 203.948 32.8574 204.47 33.3809 cv
204.761 33.6416 205.167 33.7871 205.485 33.9609 cv
205.37 34.251 205.747 34.1055 205.864 34.251 cv
205.688 34.251 205.515 34.1641 205.399 34.1934 cv
205.485 34.4834 206.415 34.3379 205.892 34.8604 cv
205.661 35.2383 205.226 34.541 205.167 35.0059 cv
204.905 34.8604 204.585 34.7148 204.296 34.7148 cv
204.239 34.7734 204.267 34.8604 204.239 34.918 cv
204.384 35.0059 li
204.063 34.8887 203.513 34.7148 203.194 34.4258 cv
202.991 34.4258 202.874 34.3086 202.729 34.3965 cv
202.933 34.6865 203.339 34.7734 203.657 34.918 cv
203.368 34.9766 203.106 34.6572 202.786 34.7734 cv
202.642 34.8311 202.468 34.5127 202.353 34.6865 cv
202.438 34.7734 li
202.149 34.7734 li
202.323 34.918 201.917 34.9473 202.034 35.0928 cv
201.946 35.0635 201.743 35.0928 201.685 35.1504 cv
201.599 35.3535 201.454 35.3242 201.308 35.498 cv
201.019 35.498 200.96 35.8477 200.669 35.7598 cv
200.524 35.7305 200.38 35.9629 200.263 35.7305 cv
199.771 35.876 199.45 35.4697 198.987 35.6152 cv
198.755 35.4697 198.464 35.209 198.175 35.209 cv
197.972 35.2959 197.942 34.9473 197.739 35.0635 cv
197.507 34.6289 197.071 34.541 196.812 34.1641 cv
196.579 33.9023 196.202 33.5547 195.854 33.4385 cv
195.825 33.1777 195.534 33.1201 195.331 32.8867 cv
195.128 32.916 195.069 32.6563 194.837 32.5977 cv
194.634 32.3945 194.46 32.1621 194.2 32.0176 cv
193.677 31.5811 193.009 31.1465 192.487 30.6533 cv
192.11 30.1602 191.675 29.667 191.212 29.1738 cv
191.239 29.0283 191.095 28.9707 191.009 28.8828 cv
189.876 27.5195 188.831 26.0977 187.874 24.4443 cv
187.351 23.835 186.743 23.0234 185.872 22.9648 cv
185.524 23.168 185.554 23.5449 185.437 23.8633 cv
185.321 24.0664 185.292 24.3574 185.263 24.5898 cv
185.204 24.7344 184.944 24.5898 184.944 24.7637 cv
184.972 24.8213 185.001 24.8213 185.06 24.8506 cv
184.856 25.1406 li
184.856 25.082 184.8 25.082 184.771 25.082 cv
184.827 25.2852 184.683 25.4883 184.597 25.6338 cv
184.509 25.75 184.421 25.5762 184.364 25.7207 cv
184.335 25.8652 184.421 25.8652 184.276 25.9824 cv
184.276 25.9531 184.276 25.9531 184.247 25.9531 cv
184.218 25.9531 184.218 26.0117 184.218 26.04 cv
184.218 26.0977 184.276 26.0977 184.276 26.0977 cv
184.276 26.3008 184.044 26.5332 184.044 26.7656 cv
183.841 26.7656 183.956 27.0547 183.753 26.998 cv
183.638 27.2871 li
183.493 27.1719 183.493 27.4336 183.435 27.4902 cv
183.405 27.7227 183.202 27.7813 183.146 28.043 cv
183.028 28.332 182.854 28.623 182.681 28.8828 cv
182.595 28.8828 li
182.595 28.7969 182.595 28.71 182.565 28.6514 cv
182.245 28.7383 182.333 29.2031 182.042 29.3184 cv
181.927 29.3477 181.983 29.4639 181.897 29.4639 cv
181.868 29.4639 li
181.751 29.6377 181.577 29.8125 181.376 29.957 cv
181.259 30.3926 180.853 30.4785 180.649 30.8555 cv
180.214 31.002 180.272 31.5811 179.837 31.6689 cv
179.749 31.8145 179.548 31.9014 179.46 32.0176 cv
179.315 32.1328 179.171 32.3945 178.968 32.3945 cv
178.241 33.1777 177.372 33.5254 176.675 34.1934 cv
176.21 34.541 175.804 34.8311 175.253 35.0635 cv
174.817 35.3535 174.237 35.4697 173.714 35.6738 cv
173.339 35.7891 173.048 36.0215 172.612 36.0508 cv
172.671 35.9629 172.815 35.9629 172.96 35.9336 cv
173.425 35.6738 174.093 35.5273 174.558 35.1504 cv
174.325 35.0635 174.063 35.2383 173.86 35.3242 cv
173.831 35.3242 li
173.919 35.209 174.149 35.1504 174.179 35.0059 cv
173.978 34.7734 173.774 35.0635 173.542 35.0928 cv
172.874 35.6152 172.032 35.7598 171.481 36.2822 cv
171.22 36.3691 170.96 36.5146 170.669 36.543 cv
170.669 36.5146 170.64 36.5146 170.64 36.5146 cv
170.813 36.4561 170.96 36.3398 171.046 36.1953 cv
170.929 36.0215 li
171.075 35.8184 171.452 35.9629 171.54 35.6426 cv
171.54 35.6738 171.597 35.7012 171.626 35.6738 cv
171.655 35.7012 171.714 35.6738 171.772 35.6426 cv
172.235 35.3828 172.497 34.9766 172.874 34.6289 cv
173.077 34.6572 173.165 34.3379 173.339 34.251 cv
173.28 34.2217 li
173.339 34.251 li
173.86 33.6709 174.79 33.0322 175.224 32.3652 cv
175.167 32.2773 li
174.817 32.6563 174.382 32.9746 174.093 33.3223 cv
173.802 33.4961 173.542 33.7578 173.396 34.0479 cv
173.366 34.0195 173.339 33.9609 173.28 33.9902 cv
173.251 34.0195 173.194 34.0479 173.194 34.1055 cv
172.671 34.541 172.177 35.1797 171.685 35.5273 cv
172.323 34.7734 172.989 34.1641 173.569 33.3223 cv
173.628 33.3809 li
173.919 33.0615 174.208 32.7129 174.47 32.3359 cv
174.499 32.3652 li
174.673 32.0459 174.962 31.8438 175.194 31.5811 cv
175.456 31.6113 175.312 31.2051 175.544 31.1465 cv
175.601 30.9727 175.747 30.8555 175.979 30.7988 cv
176.124 30.5664 176.181 30.334 176.442 30.1895 cv
176.501 30.2764 176.56 30.1895 176.616 30.1309 cv
176.646 30.0732 176.763 29.9863 176.675 29.8994 cv
176.616 29.8994 li
176.704 29.8125 176.763 29.6377 176.878 29.5801 cv
176.907 29.6377 176.79 29.667 176.878 29.7246 cv
177.284 29.4063 177.429 28.9707 177.806 28.5938 cv
178.097 28.1289 178.415 27.6074 178.792 27.1133 cv
178.821 26.8535 179.054 26.4746 179.286 26.3887 cv
179.403 25.8652 179.896 25.4883 180.04 24.9961 cv
180.214 24.9082 li
180.128 24.9082 180.157 24.793 180.187 24.7344 cv
180.214 24.7344 180.272 24.7344 180.331 24.7051 cv
180.214 24.5313 180.388 24.4443 180.419 24.3281 cv
180.562 24.2988 180.388 24.2129 180.505 24.125 cv
180.737 23.9219 180.823 23.6318 180.997 23.4297 cv
182.187 21.9492 182.884 20.2656 183.841 18.584 cv
183.841 18.3809 183.929 18.2354 183.841 18.0605 cv
183.929 17.7715 184.218 17.7422 184.421 17.5967 cv
184.8 17.6553 185.233 17.4512 185.38 17.8867 cv
185.38 17.8867 li
cp
0 0 0 0.15 cmyk
ef
189.644 36.6602 mo
189.644 36.7168 li
189.413 36.8047 189.151 36.8916 188.919 36.8613 cv
188.599 36.9785 188.021 37.0371 187.786 37.0957 cv
187.729 37.0371 li
187.612 37.2402 187.526 36.9492 187.468 37.1816 cv
187.323 37.0078 187.12 37.2695 187.003 37.0371 cv
186.946 37.123 li
186.685 37.1816 186.278 37.1816 186.019 37.2695 cv
186.019 37.1816 li
185.755 37.5 185.147 37.3555 184.972 37.6748 cv
184.653 37.791 184.509 38.1387 184.188 38.1094 cv
183.929 38.0527 183.581 38.1973 183.319 38.3418 cv
183.261 38.4297 183.146 38.6035 183.319 38.6611 cv
183.261 38.8652 183.464 39.0967 183.552 39.2988 cv
183.929 39.4443 183.753 39.9668 183.929 40.2285 cv
184.364 40.9824 183.608 41.6211 184.132 42.2891 cv
184.509 42.2305 184.886 42.1719 185.233 42.0557 cv
185.96 41.9111 186.772 41.6211 187.556 41.6494 cv
187.962 41.5049 188.396 41.5625 188.802 41.5049 cv
189.151 41.0977 189.208 40.4902 189.354 39.9961 cv
189.384 39.6484 189.644 39.3574 189.702 39.0098 cv
190.079 38.3711 189.993 37.6465 190.253 37.0371 cv
190.226 36.8613 190.226 36.6885 189.993 36.6885 cv
189.876 36.834 189.761 36.6309 189.644 36.6602 cv
189.644 36.6602 li
cp
191.501 33.9609 mo
191.733 33.9902 191.763 34.1641 191.966 34.251 cv
192.081 34.5996 192.487 34.541 192.634 34.8604 cv
192.808 34.8604 192.923 35.0352 193.009 35.1504 cv
193.241 35.0928 193.155 35.4697 193.358 35.498 cv
193.88 35.8184 194.171 36.252 194.403 36.7461 cv
194.604 36.8916 194.604 37.1816 194.81 37.3555 cv
194.751 37.4707 194.925 37.5586 194.81 37.6465 cv
194.722 37.6172 li
194.604 37.791 194.548 38.0527 194.604 38.2549 cv
194.519 38.3711 194.374 38.3125 194.345 38.458 cv
194.315 38.4297 194.257 38.3711 194.2 38.3711 cv
194.026 38.6035 194.112 39.0967 193.765 39.0684 cv
193.677 39.3574 193.444 39.4736 193.415 39.7637 cv
193.271 39.9961 193.155 40.2852 192.923 40.4316 cv
192.894 40.5762 192.835 40.6924 192.778 40.8379 cv
192.72 40.7793 192.634 40.75 192.573 40.75 cv
192.372 41.127 192.052 41.3301 191.763 41.5625 cv
191.966 41.7656 192.255 41.998 192.198 42.3184 cv
192.228 42.5791 192.081 42.8984 192.198 43.1016 cv
192.255 43.1016 li
192.14 43.2773 192.14 43.7412 191.763 43.625 cv
191.733 43.6816 191.733 43.7705 191.646 43.7705 cv
191.327 43.5957 191.298 44.0625 191.009 43.917 cv
190.921 44.1191 190.718 43.917 190.544 43.9736 cv
190.312 43.917 190.138 43.7705 189.935 43.917 cv
189.817 43.6816 189.644 44.0625 189.499 43.8877 cv
189.354 43.7412 189.208 44.0625 189.063 43.8291 cv
188.919 43.9453 188.948 43.7119 188.802 43.7412 cv
188.802 43.917 188.569 43.7998 188.542 43.917 cv
188.222 43.917 187.991 43.7998 187.671 43.7705 cv
187.149 43.7705 186.599 43.7998 186.104 43.917 cv
185.901 43.7705 185.698 44.0039 185.466 43.9736 cv
185.233 44.3232 184.683 44.1777 184.276 44.4102 cv
184.073 44.498 183.726 44.6426 183.552 44.7578 cv
183.608 44.7871 183.608 44.8457 183.608 44.9033 cv
183.29 44.9316 183.175 45.2227 182.825 45.2227 cv
182.595 45.4258 182.419 45.1055 182.187 45.0771 cv
182.071 44.8164 181.81 44.6426 181.897 44.3516 cv
180.94 42.8115 181.056 40.9531 180.534 39.3574 cv
180.302 38.9219 180.187 38.3711 179.837 37.9941 cv
179.634 37.791 179.575 37.5293 179.315 37.3848 cv
179.345 37.3262 179.345 37.2402 179.228 37.1816 cv
179.2 37.1816 li
179.315 37.123 179.374 37.2695 179.46 37.123 cv
179.374 37.0371 179.315 36.8916 179.142 36.8916 cv
179.112 36.7168 179.286 36.5146 179.345 36.3691 cv
179.548 36.3984 179.663 36.3691 179.866 36.3115 cv
179.837 36.3691 179.896 36.3691 179.896 36.3984 cv
180.069 36.4863 180.128 36.252 180.272 36.3984 cv
180.562 36.1074 180.794 36.3984 181.144 36.2236 cv
181.405 36.166 181.722 36.166 181.897 35.9922 cv
182.798 35.6738 183.87 35.4697 184.827 35.1504 cv
185.466 35.0635 186.163 34.9473 186.772 34.7734 cv
187.179 34.7148 187.759 34.5703 188.136 34.4834 cv
188.542 34.2793 188.89 34.251 189.296 34.2217 cv
189.673 34.1641 190.108 34.251 190.282 33.8457 cv
190.427 33.6992 190.601 33.6133 190.804 33.5547 cv
191.095 33.6133 191.298 33.7871 191.501 33.9609 cv
191.501 33.9609 li
cp
ef
182.187 47.7754 mo
182.159 47.8926 182.216 47.9209 182.245 47.9785 cv
182.622 47.9209 182.595 48.2969 182.94 48.2969 cv
183.175 48.5586 183.319 48.8203 183.608 48.9941 cv
184.044 48.9941 184.103 49.4297 184.421 49.6035 cv
184.421 49.6895 184.479 49.8066 184.567 49.8066 cv
185.263 49.8652 185.813 49.4297 186.423 49.3145 cv
186.481 49.3721 li
186.743 49.3145 187.062 49.168 187.235 49.1396 cv
187.235 49.0518 li
187.12 49.0518 li
187.323 48.9648 187.497 49.1113 187.786 48.9648 cv
188.28 48.791 188.86 48.5 189.325 48.4141 cv
189.44 48.3262 189.528 48.2402 189.558 48.0957 cv
189.47 48.0371 li
189.614 47.9209 190.079 48.0664 190.312 48.1523 cv
190.63 48.3555 191.124 48.2969 191.239 48.7617 cv
191.298 48.8496 191.239 48.9941 191.183 49.0811 cv
191.269 49.2852 191.212 49.459 191.269 49.6621 cv
191.153 49.6895 191.095 49.7773 190.979 49.8066 cv
191.036 49.9229 li
190.95 50.0391 190.776 50.0684 190.63 50.0098 cv
190.427 49.8945 190.282 50.0684 190.108 50.0977 cv
190.108 50.0684 190.079 50.0391 190.079 50.0391 cv
189.935 50.0098 189.79 50.2129 189.644 50.2705 cv
189.558 50.0098 189.499 50.3867 189.325 50.3281 cv
189.267 50.3867 li
189.237 50.3584 189.208 50.2998 189.151 50.3281 cv
189.063 50.4453 li
189.093 50.4727 li
188.628 50.7061 188.28 50.7354 187.729 50.9082 cv
187.7 51.1133 187.497 50.9961 187.411 51.0547 cv
186.831 51.3457 186.22 51.4609 185.728 51.7793 cv
185.669 52.041 185.175 51.9258 185.03 52.127 cv
184.653 52.1563 184.132 52.4746 183.753 52.1855 cv
183.522 52.3018 183.405 52.6797 183.087 52.7666 cv
182.94 52.998 182.536 53.0273 182.362 53.2891 cv
182.245 53.1719 182.159 53.375 182.071 53.2012 cv
181.927 53.3174 181.897 53.375 181.78 53.4629 cv
181.636 53.375 181.665 53.5498 181.521 53.5205 cv
181.433 53.6074 181.376 53.7529 181.2 53.8105 cv
180.911 53.6074 180.911 54.1582 180.649 53.8975 cv
180.358 54.043 180.099 54.1875 179.866 54.4199 cv
179.692 54.4199 179.722 54.6816 179.489 54.623 cv
179.374 54.7109 179.2 54.7969 179.054 54.8555 cv
178.88 54.7402 179.112 54.6523 179.054 54.5361 cv
179.2 54.3047 179.374 54.043 179.46 53.8398 cv
179.548 53.8398 li
180.272 52.3311 180.767 50.6191 181.376 49.0518 cv
181.521 48.6465 181.2 48.6465 181.144 48.2969 cv
180.94 48.1523 180.708 47.9492 180.679 47.7461 cv
181.085 47.6885 li
181.085 47.6309 li
181.2 47.7461 181.376 47.5723 181.491 47.543 cv
181.78 47.4854 182.042 47.6016 182.187 47.7754 cv
182.187 47.7754 li
cp
ef
190.282 51.8086 mo
190.573 51.8379 190.833 52.0117 190.979 52.2441 cv
190.892 52.4463 191.153 52.7949 190.862 52.9395 cv
190.95 53.1426 190.747 53.2012 190.892 53.3174 cv
190.892 53.4629 190.573 53.5205 190.688 53.7227 cv
190.515 53.8105 190.282 53.8672 190.108 53.9551 cv
189.79 54.043 189.614 54.1299 189.296 54.1875 cv
189.151 54.4199 188.919 54.1006 188.86 54.4199 cv
188.454 54.5938 188.106 54.6816 187.729 54.9131 cv
187.12 55.0859 186.54 55.5234 185.872 55.6963 cv
185.813 55.7266 185.755 55.7832 185.755 55.8418 cv
185.466 55.7266 185.437 56.0449 185.204 56.0156 cv
185.001 56.248 184.653 56.3047 184.421 56.4795 cv
184.421 56.4512 li
184.017 56.7422 183.552 57.002 183.028 57.0889 cv
182.798 57.0889 182.622 57.0313 182.419 56.915 cv
182.042 56.8867 181.636 56.7129 181.491 56.3633 cv
181.347 56.1035 181.026 56.1602 181.056 55.8418 cv
180.94 55.8125 180.882 55.7832 180.853 55.668 cv
182.071 55.2031 183.261 54.5361 184.421 54.043 cv
184.915 53.8105 185.437 53.4922 185.901 53.2891 cv
186.249 53.1719 186.569 52.998 186.888 52.8535 cv
187.642 52.5049 188.454 52.2734 189.208 51.8965 cv
189.325 51.9258 189.47 51.8379 189.558 51.6914 cv
189.79 51.8379 190.079 51.8672 190.282 51.8086 cv
190.282 51.8086 li
cp
ef
192.487 54.8838 mo
192.979 55.2031 193.415 55.6963 193.765 56.1602 cv
193.88 56.4512 194.171 56.8281 193.968 57.0889 cv
194.026 57.1475 li
193.938 57.2051 193.909 57.3496 193.968 57.4375 cv
193.647 57.582 193.851 58.0469 193.444 58.1631 cv
193.097 59.0918 192.573 60.0781 192.573 61.0645 cv
192.487 61.877 192.487 62.543 192.487 63.4141 cv
192.634 63.7324 192.487 64.1396 192.72 64.4883 cv
193.067 65.7354 193.821 66.9258 194.81 67.8242 cv
195.825 68.7246 197.101 69.2168 198.522 69.4492 cv
198.87 69.7109 199.364 69.5938 199.771 69.7686 cv
199.915 69.6816 200.233 69.7686 200.468 69.7686 cv
200.728 69.7686 201.134 69.8838 201.364 69.7109 cv
201.946 69.7402 202.468 69.4199 203.048 69.5361 cv
203.774 69.5078 203.774 68.8691 204.354 68.4629 cv
204.905 67.7969 205.079 66.9258 205.282 66.1113 cv
205.282 65.4453 li
205.167 65.1563 205.253 64.75 205.196 64.4297 cv
205.167 64.1973 204.964 63.8789 204.79 63.791 cv
204.817 63.8223 li
204.876 63.7637 li
204.731 63.4434 204.384 63.3262 204.181 63.0371 cv
204.325 62.9785 204.151 62.8926 204.093 62.8047 cv
204.007 62.6895 li
204.151 62.7168 204.239 62.8633 204.384 62.834 cv
204.704 62.6602 204.239 62.543 204.384 62.3125 cv
204.239 62.2246 204.21 62.0215 204.181 61.9336 cv
204.354 62.2246 204.499 62.543 204.817 62.6895 cv
205.167 63.1816 205.458 63.6758 205.892 64.0518 cv
205.95 64.4883 206.415 64.5166 206.415 64.9531 cv
206.907 65.3867 207.052 66.0254 207.429 66.4609 cv
207.575 67.0703 207.72 67.709 207.808 68.3174 cv
208.097 68.8105 207.69 69.334 207.864 69.8838 cv
207.952 70.0586 207.663 70.1445 207.778 70.3193 cv
207.487 70.582 207.778 70.959 207.487 71.2188 cv
207.487 71.4512 207.255 71.6836 207.575 71.7988 cv
207.313 71.7695 207.052 71.6836 206.907 71.916 cv
206.761 72.0029 206.937 72.0889 206.937 72.1777 cv
206.761 72.2051 206.53 72.1465 206.589 72.4375 cv
206.327 72.1777 206.269 72.6699 206.007 72.4668 cv
205.835 72.6992 205.573 72.584 205.341 72.7578 cv
205.282 72.6992 li
205.253 72.9023 205.021 72.6992 205.021 72.8721 cv
204.905 72.8721 li
204.905 72.8438 li
204.876 72.7578 204.817 72.8721 204.761 72.8721 cv
204.675 72.7578 li
204.614 72.8438 204.442 72.8154 204.47 72.9609 cv
204.384 72.9297 204.296 72.9609 204.239 72.9023 cv
204.181 72.9883 204.122 73.0469 204.036 73.0469 cv
204.036 72.8721 203.89 72.9883 203.802 72.9609 cv
203.657 73.1055 li
203.657 73.1055 203.687 73.1631 203.716 73.1338 cv
203.716 73.25 li
203.657 73.25 203.63 73.2207 203.571 73.1631 cv
203.571 73.2207 203.513 73.2783 203.513 73.3086 cv
203.282 73.1914 li
203.253 73.25 203.253 73.3086 203.222 73.3086 cv
203.077 73.1338 li
202.933 73.4248 li
202.759 73.1338 202.556 73.627 202.353 73.3359 cv
202.353 73.3965 202.294 73.3965 202.267 73.4531 cv
202.208 73.3359 li
202.12 73.4824 li
202.179 73.4531 202.12 73.3965 202.149 73.3359 cv
202.12 73.3086 202.091 73.3086 202.034 73.3086 cv
202.034 73.3086 202.062 73.25 202.034 73.25 cv
202.005 73.2207 201.976 73.25 201.976 73.2783 cv
201.888 73.3965 202.149 73.3965 201.976 73.4531 cv
201.888 73.3965 li
201.888 73.3965 201.888 73.4531 201.888 73.4824 cv
201.743 73.4824 201.685 73.3965 201.511 73.4824 cv
201.599 73.3965 li
201.511 73.3359 201.54 73.25 201.454 73.2783 cv
201.394 73.3086 201.454 73.3965 201.454 73.4531 cv
201.511 73.3086 201.308 73.3359 201.163 73.3086 cv
201.104 73.4824 200.989 73.3086 200.901 73.3359 cv
200.698 73.3359 li
200.757 73.1338 200.554 73.3359 200.554 73.1914 cv
200.407 73.1914 200.524 73.3965 200.351 73.3086 cv
200.351 73.25 200.292 73.1631 200.204 73.1055 cv
200.147 73.1338 199.972 73.1055 200.001 73.25 cv
200.001 73.3086 li
199.972 73.2207 199.741 73.3086 199.653 73.25 cv
199.567 73.3086 199.45 73.3086 199.335 73.3086 cv
199.247 73.3086 li
199.247 73.2783 li
198.987 73.1338 198.784 73.3965 198.552 73.1338 cv
198.522 73.1914 198.464 73.2783 198.378 73.25 cv
198.261 73.1338 li
198.233 73.1631 198.204 73.1338 198.175 73.1338 cv
198.175 73.1055 198.175 73.0469 198.146 73.0176 cv
198.028 73.0762 198.001 73.1631 197.825 73.1631 cv
197.854 73.1338 197.825 73.1055 197.798 73.0469 cv
197.681 73.1914 197.565 73.0762 197.507 73.0176 cv
197.507 72.9883 197.448 72.9609 197.448 72.9609 cv
197.304 73.0176 li
197.218 72.9023 li
197.187 72.9609 li
197.218 72.9023 197.159 72.8721 197.159 72.8438 cv
197.101 72.9883 196.985 72.9609 196.868 72.9023 cv
196.753 72.8154 li
196.722 72.9023 196.638 72.9609 196.579 72.8721 cv
196.521 72.5234 196.202 72.9609 196.202 72.6113 cv
196.056 72.6113 195.997 72.4951 195.854 72.5527 cv
195.767 72.3223 195.419 72.4668 195.331 72.293 cv
195.272 72.293 195.128 72.293 195.011 72.2344 cv
194.983 72.1777 194.983 72.0889 194.896 72.0889 cv
194.81 72.1777 li
194.575 71.9443 194.315 71.8281 194.054 71.625 cv
193.647 71.3359 193.329 70.9873 193.009 70.6113 cv
192.808 70.5234 192.573 70.3193 192.458 70.0859 cv
192.284 69.8262 191.907 69.6816 191.907 69.3613 cv
191.675 69.3613 191.819 69.0137 191.616 69.0723 cv
191.298 68.4336 190.804 67.9414 190.544 67.332 cv
189.935 65.9688 189.267 64.5166 189.413 62.8926 cv
189.499 62.6318 189.413 62.1953 189.47 61.8477 cv
189.47 61.2969 189.614 60.7148 189.585 60.2227 cv
189.585 59.498 189.847 58.8301 189.935 58.1055 cv
189.876 58.0469 189.79 58.0469 189.731 58.0469 cv
189.79 58.2207 189.528 58.1914 189.413 58.2783 cv
189.034 58.3359 188.745 58.6855 188.366 58.7715 cv
188.251 59.0625 187.874 58.7139 187.845 59.0625 cv
187.612 59.0625 187.468 59.2656 187.179 59.2939 cv
187.179 59.3535 li
186.976 59.2939 186.946 59.4395 186.772 59.498 cv
186.831 59.5264 li
186.685 59.498 186.599 59.6719 186.452 59.6426 cv
186.337 59.7578 186.278 59.9023 186.104 59.9336 cv
186.046 59.875 li
185.872 60.2227 185.437 60.0488 185.263 60.3672 cv
185.233 60.3379 185.175 60.3672 185.147 60.3096 cv
185.03 60.4551 li
185.03 60.4258 185.001 60.4258 185.001 60.3965 cv
184.741 60.4258 184.712 60.832 184.421 60.7148 cv
184.335 60.9473 183.899 61.0059 183.696 61.0645 cv
183.493 61.1221 183.405 61.2969 183.261 61.3555 cv
183.028 61.4414 182.798 61.3838 182.651 61.6152 cv
182.622 61.5859 li
182.565 61.7021 182.39 61.7305 182.245 61.6738 cv
181.81 61.3555 li
181.636 61.3838 181.577 61.0928 181.433 61.0059 cv
181.229 60.8027 180.968 60.8613 180.737 60.6006 cv
180.476 60.3096 li
180.446 60.3672 li
180.358 60.0488 179.778 60.2227 179.896 59.875 cv
180.157 60.0781 180.302 59.6133 180.562 59.7012 cv
180.591 59.6719 180.649 59.6426 180.622 59.584 cv
180.737 59.7285 180.853 59.498 180.997 59.5264 cv
182.739 58.918 184.073 57.8438 185.901 57.292 cv
186.626 56.7988 187.468 56.4795 188.28 56.1318 cv
188.454 55.9873 li
189.151 55.7832 189.817 55.4063 190.515 55.3486 cv
190.458 55.1455 190.688 55.0293 190.573 54.8555 cv
190.659 54.7686 190.63 54.5361 190.862 54.5654 cv
191.009 54.3906 191.386 54.4492 191.413 54.1875 cv
191.646 54.7109 192.343 54.3047 192.487 54.8838 cv
192.487 54.8838 li
cp
ef
184.741 62.0215 mo
185.437 61.6445 185.755 62.6318 186.249 62.8926 cv
186.511 63.2695 187.845 63.4141 187.265 64.2275 cv
187.468 64.8945 186.802 65.3867 186.54 65.8809 cv
186.278 65.9082 186.249 66.1992 186.19 66.373 cv
186.54 66.7793 186.626 67.332 187.032 67.6504 cv
187.149 67.9102 187.382 68.1152 187.411 68.4336 cv
187.206 68.4922 187.294 68.7246 187.235 68.8691 cv
187.179 68.8691 187.149 68.7813 187.12 68.7813 cv
186.743 69.0137 187.206 70.1758 186.481 69.8262 cv
186.337 69.7402 186.19 69.5938 186.104 69.5361 cv
185.872 69.5361 li
185.728 69.3613 185.407 69.4199 185.233 69.2461 cv
185.03 69.043 184.827 68.7813 184.567 68.6084 cv
184.479 68.6084 184.364 68.6367 184.392 68.7246 cv
184.392 68.8105 li
184.161 68.8691 184.218 69.1309 184.073 69.2461 cv
183.929 69.3916 183.638 69.4492 183.608 69.7109 cv
183.175 69.9717 182.769 70.4941 182.39 70.5234 cv
182.419 70.668 182.333 70.6963 182.245 70.7842 cv
182.159 70.6963 182.101 70.7842 182.042 70.7842 cv
181.897 70.9297 181.78 71.0742 181.636 71.1318 cv
181.376 71.248 181.288 71.5674 180.968 71.5674 cv
180.94 71.7129 180.794 71.6543 180.708 71.7129 cv
180.562 71.7129 180.446 71.5957 180.358 71.7402 cv
179.954 71.9443 179.431 72.0313 179.054 72.1172 cv
178.763 72.2344 178.386 72.1172 178.097 72.2344 cv
177.284 72.293 176.56 72.4375 175.833 72.6699 cv
175.776 72.6113 175.601 72.6113 175.601 72.4951 cv
176.036 72.3506 176.472 72.1465 176.849 71.8574 cv
177.923 71.0156 178.821 69.9717 179.749 69.0723 cv
180.069 68.7813 180.358 68.4336 180.737 68.2012 cv
181.2 67.6807 181.722 67.1289 182.159 66.6064 cv
181.722 66.084 180.997 65.8516 180.446 65.3867 cv
180.302 65.416 180.214 65.2715 180.128 65.2139 cv
180.069 64.9229 li
180.679 65.0977 181.056 64.6328 181.577 64.5752 cv
182.216 64.3721 182.854 64.5469 183.435 64.6035 cv
183.667 63.9668 184.073 63.502 184.132 62.8047 cv
184.073 62.543 183.608 62.4561 183.841 62.0801 cv
184.044 61.9639 184.364 61.9639 184.567 61.9639 cv
184.597 62.0508 184.653 62.0215 184.741 62.0215 cv
184.741 62.0215 li
cp
ef
175.253 80.4746 mo
175.312 80.416 li
175.659 80.7637 176.269 80.5615 176.646 80.9102 cv
176.964 80.9102 177.372 81.1709 177.573 81.4023 cv
177.632 81.8672 178.097 81.8965 178.241 82.2451 cv
178.444 82.332 178.356 82.5059 178.589 82.5918 cv
178.735 82.7949 178.821 83.0273 178.821 83.2891 cv
178.647 83.4043 178.415 83.5801 178.532 83.8691 cv
178.647 83.9854 178.444 83.9561 178.474 84.1016 cv
178.097 84.1016 177.72 84.1016 177.343 84.2168 cv
177.052 83.9561 176.589 84.1309 176.298 83.8105 cv
176.124 83.5801 li
176.036 83.6074 li
175.948 83.5205 175.718 83.2598 175.515 83.0859 cv
175.544 82.8818 175.224 83 175.312 82.7666 cv
174.935 82.5625 174.702 82.1563 174.47 81.8086 cv
174.093 81.4619 174.499 81.0264 174.179 80.6484 cv
174.325 80.4746 174.034 80.4746 174.063 80.3301 cv
174.44 80.416 174.876 80.4453 175.253 80.4746 cv
175.253 80.4746 li
cp
ef
192.487 85.291 mo
192.284 85.4648 191.966 85.3486 191.704 85.4063 cv
191.327 85.4375 191.036 85.582 190.718 85.7549 cv
190.37 86.0156 189.935 86.0742 189.614 86.3652 cv
189.614 86.5674 189.384 86.4229 189.413 86.627 cv
189.267 86.9453 188.89 87.1777 188.569 87.2939 cv
188.569 87.1777 li
188.366 87.1191 188.454 87.4375 188.251 87.4082 cv
188.222 87.7578 187.933 87.6416 187.729 87.8438 cv
187.642 87.9023 187.612 87.6992 187.612 87.8154 cv
187.642 87.8438 li
187.411 87.9883 li
187.323 88.3379 187.671 88.4238 187.786 88.6563 cv
187.874 88.7139 187.786 88.9473 187.962 88.8887 cv
188.513 88.5986 189.093 88.3076 189.585 88.0469 cv
189.614 87.9023 189.79 87.9316 189.847 87.8438 cv
190.138 87.8154 li
190.312 87.9883 190.485 87.6709 190.659 87.6992 cv
190.659 87.7578 li
190.862 87.6992 190.921 87.8154 191.095 87.8438 cv
191.327 87.7578 191.501 88.0771 191.675 88.1338 cv
191.763 88.627 191.095 88.3965 191.009 88.7734 cv
190.659 88.8594 190.341 88.918 190.079 89.1787 cv
189.558 89.2656 189.208 89.6992 188.802 89.9619 cv
188.89 90.0801 188.657 90.0195 188.716 90.166 cv
188.919 90.5137 188.89 90.9492 188.86 91.2969 cv
188.802 91.3838 188.802 91.5879 188.948 91.5586 cv
189.063 91.4414 189.296 91.4717 189.325 91.2383 cv
189.702 91.2969 189.876 90.8047 190.167 90.9492 cv
190.458 90.6875 190.892 90.6582 191.212 90.7168 cv
191.327 90.9492 191.763 90.832 191.616 91.1807 cv
191.356 91.2109 191.472 91.6162 191.183 91.4717 cv
190.921 91.5879 191.239 91.7598 191.036 91.9355 cv
190.226 91.877 189.673 92.4287 189.005 92.6895 cv
189.005 93.1543 188.978 93.7051 189.063 94.168 cv
189.151 94.3145 189.063 94.6035 189.151 94.6914 cv
189.79 94.459 190.312 94.3145 191.065 94.082 cv
191.56 93.9668 191.995 93.9375 192.487 93.6758 cv
192.604 92.834 192.487 91.8193 192.573 90.9492 cv
192.604 89.3818 192.634 87.6416 192.72 86.0742 cv
192.634 85.8125 192.923 85.3193 192.487 85.291 cv
192.487 85.291 li
cp
193.735 74.3223 mo
193.909 74.3223 194.083 74.5547 194.228 74.6719 cv
194.665 74.9902 195.214 74.875 195.622 75.2246 cv
195.854 75.2246 195.97 75.543 196.229 75.4844 cv
196.376 75.5117 196.493 75.6006 196.55 75.7451 cv
196.55 75.9492 196.462 76.0928 196.259 76.1523 cv
196.144 76.5283 196.812 76.7305 196.493 77.166 cv
196.173 77.166 196.202 77.6309 195.854 77.5449 cv
195.272 78.2969 li
195.128 78.3574 195.099 78.1523 194.983 78.1816 cv
194.722 78.1816 194.78 78.6465 194.519 78.3848 cv
194.46 78.6465 194.171 78.4434 194.112 78.6465 cv
194.142 78.6758 194.112 78.7041 194.112 78.7344 cv
193.909 78.793 193.677 78.8789 193.618 79.168 cv
193.792 79.1973 194.083 79.168 194.286 79.168 cv
195.04 79.4297 195.825 78.9063 196.493 79.459 cv
196.665 79.7207 197.218 79.5752 197.218 79.9521 cv
197.448 80.0684 197.448 80.3877 197.392 80.5898 cv
197.187 80.5615 197.187 80.9102 197.071 80.8799 cv
197.071 81.373 196.433 81.084 196.144 81.3164 cv
194.575 81.3438 li
194.374 81.4023 194.083 81.373 193.88 81.4902 cv
193.388 81.5771 192.72 81.4316 192.255 81.7227 cv
192.255 81.6934 li
192.198 81.6348 192.052 81.7813 192.052 81.6641 cv
191.937 81.8672 191.675 81.7227 191.472 81.8672 cv
191.356 81.6934 191.183 82.0117 190.979 82.041 cv
190.804 82.0986 190.515 82.0117 190.37 82.2148 cv
190.515 82.5625 191.009 82.709 191.036 83.1445 cv
191.065 83.1729 191.124 83.1445 191.183 83.1445 cv
191.356 83.377 191.095 83.666 191.413 83.7539 cv
191.386 83.9561 191.386 84.1309 191.616 84.1602 cv
192.343 83.8691 192.835 84.4209 193.444 84.5654 cv
193.647 84.8271 193.968 84.9141 194.2 85.0879 cv
194.519 85.2617 194.634 85.5527 194.983 85.7246 cv
195.476 85.9863 195.419 86.5098 195.794 86.7988 cv
195.737 87.1777 196.202 87.2344 196.085 87.5547 cv
196.317 87.7578 195.997 88.1055 196.229 88.2793 cv
196.347 88.5693 196.026 88.627 195.997 88.8301 cv
195.825 88.9473 196.026 89.1504 195.854 89.2656 cv
195.854 89.6152 195.825 90.0488 195.649 90.3672 cv
195.997 90.5723 195.419 90.832 195.708 91.0928 cv
195.593 91.7598 195.649 92.457 195.649 93.1826 cv
195.708 93.8203 195.854 94.6914 195.708 95.416 cv
195.825 95.6777 195.593 95.8516 195.622 96.1416 cv
195.505 96.1719 195.476 96.2578 195.476 96.3438 cv
195.272 96.2871 195.069 96.5771 194.896 96.4609 cv
194.519 96.8398 194.026 96.7813 193.591 96.6641 cv
193.444 96.9844 li
193.444 96.9551 193.415 96.9258 193.358 96.8975 cv
193.358 96.8975 193.329 96.9258 193.3 96.9258 cv
193.126 96.7813 193.155 96.2578 192.835 96.4609 cv
192.634 96.1719 192.72 95.6777 192.399 95.5049 cv
192.14 95.6484 li
192.284 95.7656 li
192.284 95.7354 192.284 95.707 192.343 95.707 cv
192.052 95.707 li
192.14 95.6777 li
192.052 95.5625 191.966 95.6777 191.907 95.5049 cv
191.763 95.6777 191.56 95.5918 191.616 95.8223 cv
191.53 95.8223 191.501 95.9102 191.413 95.8516 cv
191.53 95.7939 li
191.298 95.707 191.298 95.9102 191.095 95.9395 cv
191.124 95.9102 li
191.065 95.8516 190.95 95.9102 190.95 95.9971 cv
190.688 95.9971 190.458 96.084 190.253 96.1416 cv
189.993 96.4326 189.558 96.3438 189.267 96.5771 cv
189.063 96.6641 188.745 96.7227 188.628 96.8672 cv
188.396 96.8672 188.165 97.1582 187.991 97.0127 cv
187.815 97.1875 187.612 97.3896 187.323 97.3027 cv
187.235 97.2168 187.062 97.1875 186.946 97.0127 cv
186.655 96.9551 186.685 96.5771 186.481 96.375 cv
186.278 95.7939 li
186.337 95.7939 li
186.19 95.416 186.366 95.0977 186.19 94.7217 cv
186.134 93.1543 186.134 91.3262 186.19 89.8457 cv
186.308 89.584 186.163 89.2363 186.19 88.9473 cv
186.278 88.5693 185.96 88.1338 186.278 87.8154 cv
186.308 87.5244 186.655 87.3223 186.626 87.0313 cv
187.206 85.6973 187.786 84.4209 188.425 83.1445 cv
188.396 83 188.454 82.9121 188.366 82.8535 cv
188.021 82.9707 187.786 83.1729 187.468 83.3184 cv
187.294 83.1729 187.294 83.4639 187.12 83.4355 cv
186.685 83.4043 186.569 83.8984 186.163 83.9561 cv
185.813 83.8984 185.437 84.2461 185.06 84.332 cv
184.827 84.1309 184.624 84.2754 184.421 84.0137 cv
184.276 84.0439 li
184.188 83.8691 183.956 83.8105 183.841 83.666 cv
183.753 83.4355 183.464 83.2305 183.261 83.1445 cv
182.595 83.1729 182.013 83.0273 181.376 82.8535 cv
181.577 82.7383 181.81 82.7666 181.897 82.5918 cv
182.536 82.3613 183.175 82.3027 183.753 82.1563 cv
184.044 82.2148 184.276 82.0703 184.509 81.9541 cv
185.321 81.4902 186.19 81.3164 187.003 80.7637 cv
187.062 80.5615 186.772 80.5039 186.772 80.3008 cv
186.599 80.1855 186.626 80.0098 186.423 79.9805 cv
186.452 79.8076 186.308 79.6621 186.249 79.459 cv
186.075 79.5176 186.075 79.3145 185.96 79.2852 cv
186.104 79.0234 185.813 78.8496 185.813 78.6172 cv
185.554 78.5313 185.872 78.3574 185.669 78.2119 cv
185.466 78.0098 185.466 77.6309 185.147 77.6602 cv
185.089 77.2539 184.712 77.166 184.538 76.8477 cv
184.421 76.8477 184.276 76.7891 184.188 76.6738 cv
184.479 76.6738 li
184.247 76.5 li
184.276 76.3838 184.479 76.5 184.567 76.4121 cv
184.567 76.5859 184.771 76.5586 184.886 76.6162 cv
185.118 76.7305 185.38 76.5283 185.61 76.7305 cv
185.901 76.6445 185.989 76.9639 186.19 76.9639 cv
186.626 77.0215 187.062 76.9053 187.411 77.0508 cv
187.642 77.0801 188.165 76.9932 188.31 77.2539 cv
188.831 77.166 188.948 77.6309 189.325 77.7764 cv
189.151 78.0371 189.614 78.2402 189.267 78.4141 cv
189.093 78.7344 189.585 78.8789 189.47 79.2266 cv
189.499 79.459 189.585 79.7207 189.413 79.8359 cv
189.354 79.8945 189.296 79.9229 189.413 79.9805 cv
189.993 79.7207 190.921 79.9229 191.153 79.1973 cv
191.298 78.3574 191.675 77.6309 191.763 76.7305 cv
191.995 76.6738 191.966 76.3262 192.052 76.0928 cv
192.052 75.7451 li
192.052 75.7734 li
192.14 75.7168 192.052 75.6582 192.052 75.6582 cv
192.228 75.1074 192.69 74.6133 192.487 73.9766 cv
192.72 73.9766 192.952 73.9463 192.979 73.6855 cv
193.009 73.8008 193.155 73.5977 193.271 73.627 cv
193.444 73.8301 193.792 73.9463 193.735 74.3223 cv
193.735 74.3223 li
cp
ef
177.429 86.1895 mo
178.386 86.0449 179.054 86.8301 179.866 87.1191 cv
180.011 87.3799 180.243 87.4668 180.331 87.7578 cv
180.505 88.627 179.778 89.2363 179.548 89.9043 cv
179.374 89.9043 179.431 90.2246 179.228 90.2529 cv
179.2 90.2246 li
179.171 90.2529 179.2 90.3398 179.171 90.3975 cv
179.083 90.3975 li
179.171 90.8047 178.589 90.8906 178.503 91.3262 cv
178.356 91.7031 178.386 92.2246 178.677 92.4854 cv
178.88 93.0098 179.345 93.4434 179.46 93.9951 cv
179.896 94.6621 180.011 95.5049 179.925 96.2871 cv
179.896 96.3438 179.925 96.4326 179.896 96.5195 cv
180.187 96.6348 180.419 96.5195 180.679 96.5771 cv
180.823 96.7813 180.94 96.5195 181.144 96.6064 cv
181.897 96.6641 182.651 96.8398 183.405 96.9551 cv
183.638 97.0996 183.899 97.0127 184.132 97.1582 cv
184.364 97.0703 184.421 97.3613 184.653 97.2734 cv
184.653 97.3613 184.771 97.3896 184.827 97.3613 cv
184.827 97.2461 li
185.089 97.1582 185.321 97.5342 185.583 97.5059 cv
185.755 97.5059 185.872 97.709 186.104 97.6523 cv
186.655 97.7676 187.032 98.2012 187.612 98.2891 cv
187.642 98.2598 li
187.497 98.1152 li
187.671 98.1445 li
187.671 98.2012 187.7 98.2324 187.729 98.2891 cv
187.962 98.2598 li
187.962 98.2891 li
188.136 98.3174 li
188.136 98.5215 188.31 98.2598 188.425 98.4355 cv
188.978 98.6084 189.325 98.8105 189.935 98.9277 cv
190.138 99.043 190.427 99.0723 190.63 99.2188 cv
191.472 99.4795 192.14 99.1895 192.979 99.1309 cv
192.979 99.1895 192.894 99.2188 192.923 99.334 cv
193.009 99.3633 193.126 99.334 193.212 99.2754 cv
193.097 99.1309 li
193.3 99.1309 li
193.3 99.1895 193.271 99.2188 193.271 99.2461 cv
193.415 99.3633 193.591 99.2754 193.765 99.2461 cv
193.765 99.1016 li
193.821 99.043 194.112 99.043 194.2 98.9854 cv
194.083 99.2461 194.46 99.1895 194.575 99.1895 cv
194.751 99.2188 195.069 99.043 195.099 99.2188 cv
195.39 99.0156 195.767 99.0723 196.114 98.9277 cv
196.317 99.2188 196.433 98.6963 196.722 98.8691 cv
197.042 98.7813 li
197.042 98.8994 li
197.159 98.9854 197.304 98.8398 197.218 98.7813 cv
197.681 98.6963 198.378 98.7813 198.812 98.5215 cv
198.812 98.4639 198.812 98.377 198.726 98.4063 cv
198.405 98.4922 198.175 98.4922 197.825 98.5215 cv
197.651 98.4355 197.536 98.666 197.478 98.4639 cv
197.825 98.4922 198.087 98.2891 198.435 98.4063 cv
198.958 98.2012 199.509 98.4063 199.972 98.3174 cv
200.062 98.4063 200.204 98.2324 200.321 98.3477 cv
201.394 98.4639 202.497 98.1152 203.63 98.2012 cv
205.079 97.998 li
204.817 98.2324 204.384 98.2324 204.063 98.3477 cv
203.86 98.1729 203.687 98.4639 203.513 98.2598 cv
203.194 98.3477 202.903 98.377 202.614 98.3477 cv
202.7 98.4922 202.468 98.5508 202.353 98.4922 cv
202.353 98.4639 li
202.294 98.5215 202.179 98.5508 202.208 98.666 cv
202.267 98.7539 202.294 98.6367 202.353 98.6367 cv
202.556 98.8691 202.933 98.6367 203.077 98.666 cv
203.106 98.5215 li
203.136 98.6084 203.194 98.6963 203.282 98.6963 cv
203.687 98.666 204.007 98.3174 204.442 98.4922 cv
204.675 98.377 204.817 98.4355 205.079 98.3477 cv
205.079 98.377 205.079 98.4355 205.138 98.4639 cv
205.196 98.3174 205.282 98.3477 205.399 98.3477 cv
205.573 98.5215 205.718 98.2324 205.864 98.2891 cv
205.864 98.3174 205.776 98.377 205.835 98.4063 cv
205.573 98.4063 205.399 98.6084 205.108 98.4922 cv
204.993 98.8691 204.731 98.7813 204.47 98.9854 cv
204.239 98.957 204.21 99.2188 203.948 99.1895 cv
203.89 99.2188 203.86 99.3047 203.86 99.3633 cv
203.86 99.3916 203.919 99.3916 203.948 99.3916 cv
203.716 99.7109 203.339 99.8848 203.048 100.147 cv
202.847 100.377 202.526 100.292 202.294 100.523 cv
202.179 100.727 201.946 100.814 201.743 100.986 cv
201.511 101.016 201.425 101.277 201.163 101.248 cv
201.019 101.51 200.64 101.598 200.38 101.627 cv
200.204 101.742 200.292 101.887 200.089 101.887 cv
199.771 102.207 199.335 102.234 198.841 102.266 cv
198.696 102.613 198.319 102.266 198.116 102.525 cv
197.739 102.555 197.419 102.41 197.159 102.758 cv
196.956 102.699 196.782 102.844 196.608 102.902 cv
196.521 103.367 195.708 102.932 195.911 103.569 cv
195.825 103.627 195.97 103.803 195.794 103.86 cv
195.563 103.6 li
195.505 103.627 195.534 103.657 195.534 103.715 cv
195.476 103.627 195.39 103.627 195.419 103.512 cv
195.39 103.424 195.331 103.542 195.272 103.569 cv
195.243 103.657 195.476 103.657 195.302 103.744 cv
195.272 103.744 195.187 103.715 195.157 103.657 cv
195.011 103.918 194.665 103.627 194.519 103.803 cv
194.489 103.773 194.575 103.627 194.46 103.569 cv
194.345 103.569 194.315 103.86 194.257 103.918 cv
194.112 104.034 194.026 103.773 193.909 103.947 cv
193.821 104.121 193.647 103.918 193.503 104.064 cv
193.444 103.86 193.3 104.034 193.183 104.034 cv
193.212 104.207 193.04 104.236 192.923 104.236 cv
192.894 104.207 li
192.835 104.268 192.749 104.354 192.634 104.325 cv
192.517 104.207 192.284 104.295 192.14 104.354 cv
192.081 104.44 191.937 104.236 191.819 104.325 cv
191.79 104.295 191.763 104.236 191.704 104.295 cv
191.616 104.41 191.298 104.236 191.298 104.47 cv
190.688 104.354 li
190.659 104.498 li
190.458 104.47 190.427 104.092 190.226 104.207 cv
190.226 104.149 190.138 104.092 190.138 104.092 cv
189.876 104.236 189.761 103.569 189.585 104.034 cv
189.558 103.918 189.413 103.86 189.325 103.773 cv
189.296 103.803 li
189.267 103.744 189.237 103.627 189.151 103.569 cv
189.093 103.627 li
188.86 103.222 188.31 103.279 188.136 102.961 cv
188.077 103.135 187.874 102.902 187.874 103.106 cv
187.786 102.902 187.497 102.902 187.556 102.642 cv
187.497 102.495 187.382 102.555 187.294 102.642 cv
187.149 102.555 186.976 102.41 186.772 102.467 cv
186.802 102.352 186.772 102.207 186.714 102.234 cv
186.54 102.234 li
186.54 102.207 li
186.366 102.207 186.278 101.83 186.019 101.887 cv
185.843 101.77 185.669 101.598 185.524 101.567 cv
185.583 101.51 li
185.495 101.539 185.38 101.395 185.321 101.539 cv
185.263 101.451 185.147 101.248 185.03 101.395 cv
184.741 101.104 li
184.712 101.104 184.712 101.162 184.683 101.133 cv
184.567 101.016 184.683 100.873 184.479 100.842 cv
184.392 100.727 li
184.392 100.611 184.509 100.727 184.567 100.64 cv
184.538 100.582 184.538 100.523 184.479 100.494 cv
184.276 100.727 184.044 100.377 183.841 100.377 cv
183.552 100.205 183.29 99.9141 183.028 99.7695 cv
182.854 99.7695 182.622 99.623 182.448 99.4795 cv
182.245 99.5664 182.071 99.334 181.897 99.2461 cv
181.839 99.334 181.78 99.2188 181.665 99.2188 cv
181.722 99.1309 181.577 99.1016 181.577 99.043 cv
181.433 99.0723 181.347 98.8994 181.2 98.8398 cv
180.737 98.7813 180.069 98.4922 179.575 98.6367 cv
179.054 98.6084 178.562 98.4063 178.067 98.6963 cv
177.952 98.666 177.806 98.666 177.806 98.7813 cv
176.964 98.8691 176.298 99.0723 175.456 99.0723 cv
175.253 99.334 174.935 99.4492 174.644 99.5078 cv
174.47 99.4795 174.325 99.7988 174.093 99.7695 cv
174.005 99.7988 174.005 99.9141 173.919 99.9141 cv
173.86 99.8848 li
173.86 100.001 173.687 99.9717 173.628 100.029 cv
173.28 99.8564 172.96 99.5938 172.815 99.1895 cv
172.585 99.1602 172.323 99.2754 172.206 99.1309 cv
171.8 99.334 171.452 98.957 171.046 99.043 cv
171.104 98.8398 170.843 98.9277 170.755 98.8105 cv
170.524 98.7539 170.495 98.5215 170.407 98.3174 cv
170.466 98.3174 170.524 98.4063 170.581 98.3477 cv
170.524 98.1152 170.204 98.2012 170.233 97.998 cv
170.495 98.2012 170.728 97.9707 171.017 98.0293 cv
171.134 98.2324 171.22 97.9707 171.337 98.1152 cv
171.685 97.9707 172.062 98.1729 172.409 97.9414 cv
172.409 98.1445 li
172.845 97.9707 173.425 98.0293 173.831 97.709 cv
174.122 97.7383 174.093 97.4473 174.354 97.4473 cv
174.411 97.418 174.44 97.5342 174.499 97.4473 cv
174.47 97.3027 174.673 97.3896 174.731 97.2734 cv
174.876 97.2461 175.05 96.9258 175.312 97.042 cv
175.456 96.7227 176.009 96.5195 176.325 96.1992 cv
176.442 95.8516 176.907 95.5049 176.878 95.0684 cv
176.819 93.8789 176.181 93.0098 175.804 91.9355 cv
175.747 91.4414 175.515 90.9785 175.747 90.5137 cv
175.718 90.3096 175.776 90.1367 175.804 90.0488 cv
175.747 89.875 175.833 89.875 175.892 89.7305 cv
176.095 89.2656 175.833 88.8301 176.124 88.3965 cv
175.921 88.3076 175.688 88.541 175.515 88.541 cv
175.341 88.6563 175.138 88.7734 174.905 88.8887 cv
174.644 89.0342 174.354 89.2949 174.237 89.5547 cv
174.354 89.7305 174.063 89.7598 173.948 89.7891 cv
173.774 89.6152 173.687 89.9336 173.513 89.875 cv
173.222 89.9619 173.048 89.584 172.759 89.6152 cv
172.671 89.4395 172.468 89.5273 172.351 89.4395 cv
172.206 89.4395 172.091 89.584 171.976 89.4395 cv
171.8 89.584 171.452 89.6992 171.161 89.6152 cv
171.249 89.498 171.308 89.4121 171.481 89.2949 cv
171.308 89.2656 171.423 88.9473 171.161 89.0625 cv
171.423 88.5693 172.032 88.7441 172.265 88.25 cv
172.38 88.1055 172.612 88.1338 172.845 88.1055 cv
173.774 87.4082 174.847 86.7988 175.892 86.3359 cv
176.036 86.2773 176.384 86.3652 176.472 86.1621 cv
176.79 86.3359 177.108 85.9297 177.429 86.1895 cv
177.429 86.1895 li
cp
ef
197.187 98.6084 mo
197.071 98.6367 196.868 98.5215 196.782 98.6084 cv
196.782 98.5215 li
196.812 98.5215 196.868 98.5215 196.868 98.4922 cv
196.927 98.5801 li
196.927 98.4063 197.304 98.377 197.187 98.6084 cv
197.187 98.6084 li
cp
0 0 0 1 cmyk
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (atelier1) ()%%Title: (logo_judo.eps)%%CreationDate: 1/24/08 3:40 PM%AI9_DataStream%Gb"-6qcXrPmO8"h5jfd8;U3CS%oA:;!$rTlKgMK0!E)Gp#u/:Kf":q6QaLa>hq462bN##79I;%N>JKho++5&``Zs6D/BP2.(CFC6%\(3pAosiQOkAjo'mC[.KH-7o4[dE/`KtYK?]c/P%Zo-aYJjish%4J=p%G.iC't7lQRKN"q\*r3\lE/o7VgVq@G0B8b]@1'2D`)>)%cagpT^3s4"2!^EMkG?bQqaCs&\oG@Ten@5e]tN4O43MnBo+>fqZFA/l[E&,aT)HpMqlTbXgI(oBE7Q-)?f5o?+1SfHn$@>D#Ao2f%F_FSHnEN8U$UD\Gg$=i*[p+WBFIqg#mrKKCQhnm@Zdu1`/fVN+[%WsmdI]O[nl:p0hJi%17GW&kBRJ4:9Ik%n/dHWUM%G`7&*Qsl%X&8o;ErN:dhe;]:h'_(6PK#a5dq5M%f(^&'g]k>/Y3k:59.tU_n+#S=Dp<Uk][c69Nc+:^*5Q(\U#(I"9.Z??%>gd`IsUV+$[epr%*pYs+lZVm%f4_XZo:@9M_/N@hJ(HbJ"imh>esH(6C\Ntu]Y^-@U]EsSo=C^7LT]As$s&.!k$;3BaSp81L^;B>INW7]"NKl>ds,]9%Q::,pgYGWb+W+!_3KJZo%MV(f^JFlT9;0hJ?G.Xg%LcB%%.Iq6naMK=nDst$Y#T6;`H24O)Hn2mJ#a((fWOm^bB_tHpg3okq5qDY%aCcFhQmR8C%Y"7<I[8.[2,4!cReYAhnYp6nVj.V'c/3O]/EJkdc#KtPj'X=VWDj/$mpd6ma"fjVi7ku,V0j@XiEuA:V93@#<A*=$%jYB"KQa'5\Jkmm3a2,58'ms>en99,8H$ag`G`DVM^.HXF1KV@f/;8Mh:Fq3JU7UpgfH^=41>!iL`-r@Gpq,0+r5<O+,Q'r'S5(%[%p'<mfhtS.afI*ba;j5goV6F>%M.J.OK[KR&b;kPB'fhQKPJ>4dc<JWLcJ-?Sa-P0k;$m5SV6GIEM4"&Dnm:p#I)PM5QGWXK#]m$8%GHlYmM;PO]I/NMu[i?RdM5@G+prQ$gEs\`pY9.O**l+'Ts3R/'p2R*B.8Dgr$h$)o4gpliMq?-,ds1BqoRg_ZGJop%4+*OlRQndj%i?srNr/L[81u[o_-^MU*jU/rZ1j:q@GR^1TM2-phLtf/qS5VC#d(H#+j`K[fj&G47Ek5]&Bgen<]^8gYC?O7FqtrJSi@X4KPB/N%%F&![7Tu)7<rs#g#^QU1pC^jtld4+"%cJ?G5!WV-5!>!RO%n;tc*/k!.La\*u#LoET;L>BLNgIM[lPfZ:hcqYril<bJPMeD"Yq5l;%ps";/"l&1$i&C[U?2d"^c$qj:J+l(*gClf@S,>kIS,[;AnaF;4rf\jKDf\J=S,_jAnF+23rhIRW0$eP(n<8n`s%_JHDs3g%PqBVR%m;,cPRpK[\Xl+-k(R3VF/)/c9Hbu@hY5B7<j2fR\H\]?@s*XfM/]hCN9/hL/b1hRJ;]E14ZM8=dgQdXEjmsk2)(oXep^HKN&.T@l%LJ)nY)2>+'r%76j(+o!ULHcAhl;Wt\/SMX/oHdT&HZtB],l0d.@;cAspkXcN.Os7#%POI]Dh.tFZLVj>TrkHp/\&SOWFjrsh>k/5%BOrJ,APnXe]k220S%LC,^!H"FhiH8=C9idHc;;9b<)+.(!\?t$"m'P=1"5CIkC@oBps,_F2-5M(@?@TMXlqkYrDmVI.A>%Sc&2?;%\OCRK\KirIU48:hi.r]O/t`?p:JuqG_VUTTGg?Eu:sX9rD^8GS(q0d"'Ml4&09k1['ps2WHjc`lOF0g2dnH%e;&5ZO,llr_Fc1QT%hP0J9+_aP+Z+:*,8dnkW<k.U%-.F.Dl'#nJ.+a3!0[r`_i>-"mEqpTEV/\(#rDq\8.rFl&/W3/%1#B"Vah<s=o>3J>IOf9f$Iu6!%6)?Np9$7BUFYo=@q@Tf+WMn6'graKA>tXur?U_a.d/,X9,JELa]3pX&)#R!bUgXfXX`]g!IRL=f1LIHjS0;&dAasUt3iWAkA3ib<%LFF_=h@>ktrM)k2)WkKm9;:uNREI5QT=3G18)EeJ#Li.UdU<G(U3TQZMT'0`0Ap2+j+0mH,<ZD!Wq<^B%bcV5dXlM0,#jOm6B\<E%#BCO--'hF]1o?Fn.[MV:Os?:;D@5p;noe"/7)q7;3f(j7_96<3I7A)!G7#,hiu(Cb^)<nP%U.bGEf*Cn&r_\reY`ol/s"UoXI#3&%b9_QVAc=(n'QAuIdJ+RtPJ2L]gP5(@G%AP.m8Y])`=c$O)BH)],Sk5$4GFWF_j5&@"k_MCMDEBQ&4U5Y8.u/DATdcrF#CmU&Xl39%G.\P)o[oiT)BMt&m+(sR^/-f:$ad[M?'OFsV.:&%P0dGCl&pjFVa]jb(&kAZPm,(i.i]2dCT'aN6n4@7d9:r%B0R`XU0+sS>YTC@%ffqr7DGhaD+),A4XF+0O(UP5a2:5IJ0igf$nOjQ\c7pjAG1-CSMo+Q@P!Hkh4guo:!?tXBK_8h7eW7r'fJ2;&7C6;?:FjqL^d`Lb%D)6"fF5G&'IT&+WMEfT4aleL,.]WH?aqu&c\@/I(rCSAP^WM"Z,a5FQZi9JnBI9tZTio6Jhi[N,db"%tjZo=SiC8OiD&V(EbClf@%B8eTe\SUjfI9'Bn[NMc-pb4h9ao#n-7P'X98dj2,E?iOobR_B)l)374Y\]Md.72KKk,-He-<oh5T*"gs8,>o[/D55Ym2ra:_L/Oj%*mqC1;Q$<iaOX2b.p&$3P1>b4(\c/ed1:ld:b7=)h&_8?7P$Y@iEMPm__iib7qFUI62Ys1/IuhDPpYr5ECj7O'7IEF*GF#[obCSF%RqeKN7ml=mDcJ9`eWh^`0^PVKoamIidYTq3Ui?I)-]bCjh!cktCm&<98uNTDfE)rM:i@):l3j#Sg9jP6Un>\/qlS:g;sK@h\r,j@%MM`4XQ(l=Ij`&!IiAD4Vi@E'L$EK?3CcC&MFTd>>W6tcTp4-\T'=:f6D6P(>E,^,]F_NA+ep>ucN64Ui%nb#tE0HR>hbL"J;/MDs%NN@h2gY#UjK;)'Tam"6F-dk3>e7]6-ZQlS8JXs@cOTH->(se?*+k%ZY797*Q-8<uY:u0V>FfaS>;o#V/oRZOmiMic(-E/-S'@K>=%FppMZs05S8df,%\J[ZpO$mT#@)>9fCi"*=ddFH`2Z=<t6>.@(Ra$bl4n6binn[7arZjhQs42c';jGf1gnmAK5eWpS''\_s5]ZY(:%SZ29bfYS!FWKp0I]LT/Dkj>$RYR2PGROTgnV<*T<-K5=@>GfPVOM+E?IF+Do\+J@$@6+`j'i<'Z^E&@YBEPrMm`'pj>IA^-\]e8"%GYDY]gr%''fV*cb>);('-b.%l*"e'IN4'>IlKqtYKm0[4i7.F5]DHFP)F$FBFp($$3pM^YEk)A[p"L52E1HnK3*-&aFU[s1d)_J&%d[(e0;S(@f<ZbnI)CQ3#GU;ICSmq"SjdKu-;(($`^8Ys^-Sd<iq+cXd]?4']XO=cMM<J:P^>4hT\Kq_,i/`Xl^Z?,9)7<1V7i$8O%%iF]Ps!kKb0LDm7EDS$RG-h.gT?4k$PI#T(m?L1`Z1#.lD(+4R@@U?cLct9G:RZ4kBXcH>HeiW=C?K1f+51r3r(4$bPi$6,>7]Q#%]RXk-*h2iBrR5!:Z//[\p=?A=rq4]gG\]X&C?)Mo;Q)jcep*`YXlE%ZKBjTMa*5;apH>V?m^;c>XgaNZQd4G+^%u,ABD36?f#_iQ%hRZMY0C<p]2Z)jKri\enq:]M)lchu,_p?'J44!r,^HMRWX00mPF^Rnq6U8Q'_J_=rp"$<YrVeeZNQSY@Zgl\I]fn=Aj'$mC4Kld`%T*kLZca.iSKFt;.gu=jS?i/ed(CJ+4qpt'+rX3Jrm.?HVgM/Per_)Q<qtoKXh/%1?![^tkr9mVa_fl#o!3^S:Cd(KSfK'^ZO7dD(%pTGWWHFnehK,:g#JF31dGVtj5*4g?(Qu97`-a"^Ws42M;?N;B5#f3BK@'!tB<U8]`S8(slkP&2r=1.3tj0/ARXi]WAb"(A\&AAdl%I1$ZlQ,uZlK7l+/_T#e6GAd,eeZ-=4*s<A[3,d('[/;9K^\gUi/Or+GnF^_pnd5<j%A843Xo)W,qR`&C^lkV+-.haJU?@qVhK*eP%kZOdLImL<9(H'D/'lZ#=f%d"e=>gBh8.r]=OquPpS>40gB2Qlm9HE$aMn3E_]Eu<o+bluLH!\_cFGg5Qh=pO"R\?PCRe\_hD";`N%9%u9m=VjHc),PB31EThH3VSGSeUXj+-uGEABU*0F%GS[!kZUjT%1eS7<mgGZ8!Gk>L0:j@SuW1AT&r&GBpquM0P$f./^:&rVF?dG%RZln\Fj$Niqmmp^\4'?F4OF4TN\G.YmMNU8.gQ??D9O18ZnX035(G66EelW^aTi3hcrrA%*>g`[n-""gp^f\(,K`#CEs0`*fVC\J%ShA/(L*j,C^-r;9BYA)1kL]e:gSOlfVC0Nt5./2q*CA]M*jrd@>_0[=C8N?#R\"1E!$rA%hm<NJNA^1+#K&h59S:E"g-FDm!5#BY%\B4Jj]1cn4-=E]gEJduI!:#q]=k#/+,FKD$p'gK*DqP92^jQ7UWEDj.XJ.@.*sfoB`[Mh;,PVQ>R$/J6_pAP52`3q[_Y@%74Aue'%J0q\H6#$Z.)Bl>%a,pX$gU7E>+G!a=HpZcW3[+!@6]fZ=Cne"4e."_Edu#C>J?@MO!:q'n6ilp2`tdt.)Q#n&?1nG(F+lm-O]P80%K2&9gc[i[rRabM.^atJm)[`mKAb!M%clDWt00niJRV7?\e.jBZP;p[lD$DfsS#o<dQKTuR/PC1[ZNr5HWE>I"/t:W9BNZC=bVBIf%QmU'u?$@T$-X7\4$hMlS/VRjXBM'Gh`30.ZXtEnnjW+SY>Shh[!J>'<chWlLK!PoN"E'PNBi9_GU+HU:dnF'`(uMW5iZRV"BS.9`%W=(Zj3!(%2N'f.ngQj8Rg)?(n`Oc+r0$Q0+#nSeNk@INS+OK)AL]`4f!bg745!0fjNW?l+Ae<VA79SBrbru8j6'B@kI[:=BjpdqF%Y"&bFh%U"DCbG/cR!T`O`Q6:9\2]F(@R?+ud%\YJl7O4k"--CW^*=4D<@*CTG=5TSG$S!6''NP?NhFB8"MSKhW?[/Q`E>V$!X!t'%(27)VPDfVXh2skl`/&\rY[hd:"!+#dhD7hm,-[bPU+BnlE=Rb\DFp\"F(keh?,LXbD%4<;W!a&4YeECd!sDSk8Hh!++GOlXQ[jVm%Qb(:([Hu7f2Ro7XTH?iG+TP6(ihklhD.3b^XLik7;DH(RP9/q,-&OE('<4N7o?`.>B978oH+#5R+H^BTR7'4=]=La9cB\`PS<BlR%10#@[fU=,DpGJ/s]V2ZlRU@BYL,<I`:B4gF6q7]=PSJ^S;til!n6':Re`7Y]nc@,"`WZZ9Nkd1IhpI,)355RBeS&tb^244MV1g`C%+`IicoG5B:YXYlYh^28)"c0,$pSf^J52gVdUW)g+]K.buWI30X(3*_*!DmugQcqI^H=h``+^5T_#aJu-8&tpf&$??EOmM4om0I9O%PK(fO\Ko<9%bYo`Y??Oo+CiWX@fqnCP%kG=G?'/ZC_7NW]I<*g+g\]?#!cP\)46);`9Y%$R"pDBW!J-\,<286'c[Lr:oH6`U2^;9%p0:g9(^IVf;2/4@*!iu0kqC;h,Qa&b6lF%>b(OeJ;hWn"Lt._.<0M\?!`_$ihV\eR5g\r;[QX^$O#3eIg4i!<=I][]8!qg,[TkSg%R==-\d%dI)7LjMK)KX@O`<p!We*Y67\6S]I"PdJ%RR$h525T!sI7GYF@9Kn;&(V?ug1%]Wcq1%35j?_DJ3_^DMr*Uu*J&t5:g:J&%!?`p`aIKRV>p9::&_og@/c_;_@6d=>$7;62e7KrOhZpA["Rq-3nbLms2[\,a">gRf8=,ME%9Znc%JYrp/WGtt!6M#@TP]fZ"&1@:%^d@H6/Ru>_9kF,U%N?pW5m6I0%pZES!=H"<W8lS'^2$rI0$pAR!($pi!ALQ#!oLAA"b\aJl"!Y$=k>D3&/JDXYT2I8,Qt@9dB%sl%m>/'@W'jcm=EfSOf*R73L(IIA,7lPm$\=$VW'-1pK`N$X4,uZR1ruc6"ur=XTG/q@O`6`Q=9<0I"p&jN$mL941,#'g<u#,d,e:aU%(^IX<+j.YOROWA!63+Np@hpX6=W]b-oDr"9,e7/a]W_.L7CG]E,Cj4<BP;dS)?;+PTRh$&'o5,-f[u=\'AFhPXR#tp8p:PlYf6]W%fJZGAT9f'KAkQf4)6rg("?)CXF<10@EL\KF+oj\c%?4md$UftACnOZ(NmpYE\u#-aK*8L?l9_BkfVJ?%q-7'+W7G4="rsS`8J>4#%#dum-/od6f9,bVd@Z^[V&22N5P?)&sjp!Gpe#EC0RZq';AI9,(2ojH7YSA>KU>-m(0HK5m2lNZF1j"D3!J.C"4%kkbK$be#I1Ytn%K#PAK\Pr)O!=U:q@j@#LTf!E?^unaO"kq!@5,=GZ!%g4s*(M2lBar/q3.q9465ES@amF'M/eF3DI/n%.H!jWgMR&[-k2`<?TMB=e%lD3eZJPRc7#('742<:QSI$_(+4u&!(G+V013og?`;/($CCR_?rk!2BrTfqM=6P"`D8eIFJ07^W&!tGZsJ0pNa\YDe#VB`LKWDcsY%FbHHB'eJYPT$1X,Ut'9ZX1#5Q7!H1-CS>*d-B1`Z@U9bBl$QRH%WYaaUpuh2@gOp(JMhiVF?Pd5fHtq%nKi+IKW,;4X?UD14PhY/%P_s/^Nn&:?BsLT5ODhq28S=e/OLW@FRL4Rr@H2;_%Uc_8_@0Ir6C?F1#W'Y\e.8;*iZ_:`/di.'MtN137'J=kb>gF8>\V%,@[.3a%d)j4/RO;IO%H8Pnq[b_-OsIKr=L*B2:7:SWlIR?&lb4c_j#TZR%A.rX9,[3O?I/^S,DIM*#69==*BC@R!S8Fr_Bs'A#0H=r@0J.]%hH8,:RRTp"iAq$j_MNhl2/%"S=>PdfY!iU]<)NgO%g%8Tr!4&lL]ej1I8[&gSQQ\89:DBba_)Ci%F:2hQi$"Z-l7eXO9r*:(E&Oc%WW7-g)B1@J/HJ70IDBh"I<<+p6X$B^$JSSqPouD\5!;:`()$[)9U[]E>hA_:XV+_k1@lc4+@p,0QuI!H&/6Z=^bm.k%?+'1#hT>O%G84C6WfjMS=!s2i[?i<%TiYI*5Un6ZXN=QPjBN*]N5PN+10\U#IZ]UaAhO.4WG5_LnuuD](?A),>]->^cm5^:mid3&)3$h?U-p,*%Kq;Cc"44>fiq[%&#S0!P/@UZT5q>!f3_9KUT00r]@nWIO$^g.B#^"=Pn0]FLV!RhdZOE#GJO9p_[SParE_9eVKfP0B>=.UidcA:\%%DD4$mGU&XQ$&l(Am/']A<P?^6mj,hDE;U#D$kJ*Ju+%=`/Fg(qDN#i-gc;8MLj*(Yp*32],oWK,X=Y$9-qdtFrVoXK$9O%M/>Di%R,MGXAd;`%#lr([$Qubk"bW"%MI7f>EKHX%B@;:.1*c4Fq/TVI&s2?\_-jVYARJE=N,8j(fOR@R-1M0d)Qes7T3N(HARgT0G0iG"%W,Itr#^i,O6$KjdGL4T(<E[`kFO5U_q4geYiNL^_eZGUg"c+k(l#kl0R6n9'FRmi>?6.0&%`BT)U8AKRV1mo-$NOjB`8WgbJN/B@%l#j_Za:Z4.9:#eU\21oT\M.Q*9p8so+,m<9aJ&kmBd*%A@S)?&+j<k/J?JMTi.@<1%a*2KU`+:kG9YBWM.DJQ0)uorTtqF1Yk6l$%BSXb,*`ol^Xu>D<`R/OZ^bS$)$lj.B3OUcC6U4g1X(E#qq71+-Y[!u4=i1e9h/lm&1c62'?lKNt8r`(ld=T?'X%NW5G;B6_qU-6+%-+.7Sm>@R>WW4QNJNBEU*S^p_(':BM_L*8?0b"-(p@L@KFBk0Oqh@UPL&;(@WC`MXEH`]1j][Wm)g^CbHpT?*.f`/2k]6:IE>?@-%@ZX^3jZF,gbc1YI(24OE'2X;0[+A$g*No$=7.?B8NI_jmg3SoFFm4tmT^_c?OiH;Qpf`4BJIeNVd2j:EI,8"-;`ecY(Y'7`9f,KV%CO$^4W\h;UE&G2IJ0Z<iLPlF>kO)$(f:g_!+qTc:N!J;/+'7W+=>1Tq!n3k)Q?3>@3gX^#_Vf$pM`W$s0t>k9![.(f"^N5RA?,b]%iSI!+_P`$6`)k@eFA0_$_.1R\akBdoB[CoC2F+?E!(]9"Ps'Kp)nP>I`B?Q'QAOQA(t.@mggYq%RCS?^1BAu6-^@8\SX#cj>F><?%=Ijj>Ja4@mo1ef>UEbWbK!@uGAO<7;?FdPdALbF^csDWGqI\+,rn!jG-<XiUfLBBtBdqB`:P?N+BqrMq9e'r5;PG$3!sq<C9/D5l%F\P<*P1q#"3g)QNa$EFS1boLbk^bBMM`1*[8J*t/i7J.)C"dUP959Ts^m-ET0aLTV1MMGt`Kb3g_SDCjN,.uI/Kq,O.SF#;HUV%3%f4fCH$3amGpMHP&dN&D;%[=++!A$8@NM<n8p$JIXo5ph2*,+Qc/4WUbOuo8HgpfVFSeNKfK88nG'\%5]5^.WD%QBYq>YU(g0sDF^%/(B*"#qTcp_+Y["2[BiS[oaFId,qsS@WKlnY&o&)_P?2GE_f6hqpPW1d/mO=F.Tp(V9mSBq?&E/9$RKCnrg;V%5\'RMPnf1YYq9N%/gJ_Je?iZf`P*IH/.sS(%-;IL"X3aq?#2Rj":#h\Yll"-WnR2Q8Pj;i.92SXb>lf<^c<'SS_5@&.ZfQt4NP-dNA?<fjXpU$/J@hP%-r^A;%!GqEKX_kn@>f$VK[c,Aak[hfl4g&X#k&N1/L$&d57[)*1W^[L'Or?*Gdr=Q"Ok2]d?BaHiVWA>!l!S@=C`=2EMPt<+A`j"%J0aMkgCc0/jFW3CO2;C8FeiN;><dpFl9%d%li@M-QY$e9d^lq].Jmo&G-N&1d4t4^!SHKWIFp8R8K?sXJ^uU`8Bq9Bfs*fTEZ&7V%Wt<*fI6sNN<gag`oita33YLS<MY@fhN<0UjBR2Mt@.LpT.VXckZrI6`6QNLeB-)Sh8c".l=,9j;HJ'8b"9Hir4rn,*IB(NP[Q+>)%.2`3dLA*";OJ<G=A4,Z<[a`:;:!">8m6S@U\pUu`OT90(7kSl1\P]3O1=Ap$E#=^O#g6+(fB34Rj%`%KqQ[+p%Wbp#Lg5muO:FfW%n3$tbaM<FY`A..N]F^[Z_d6UarZr"[T/u?(6j5K/%"Y<J%oG#kSu,UN/8BqBaj$\<N>K+KFh[h!JW<GKJN6^iOLE*#"ZiW./1\cb%FLYb9Q.\"=4kl\HpmNg-"s+G4J=)'8:coRpQc>@=\L0:94Lr*I"J2TVm_O\bJMlrlML[sQD#fZrQ^bThf!-FU!`*X+$i>^*i(<B$%_YEH.i`DtT('"PIdZ.FW,#G3!TI78M_4!4>%#r?qS)g3>Lf:CtQKr0?h$JY/9*?:P5+[^He:VTn%op'&I3d3&SUuCERR*jGVF<P)%U/)VfjD;&uLM1g.[4]"E4Oe!hWF[b<5Xg2Sj((Ncb9OWX[\5iOm^%c>H!Zm^j1eGMks>aZf[*0Icl*;^$=@FRXEZdM)KKl/jQcpO%6lFG5fE/rl%2_sW7r$CiakM_]K.KBIfuHPg7i5-ilP7A'b>jTrFq'c18cFqOAsKpTB>YIRLPl7<ZhQ9U*Pgand:Kg;!'PrKPFMo5%11c&.'b?8h@-oALZY)n.^!QTqkdX#^>PcbZX9U524$#NH,nU_\"[P`+Tg@2MAG0u?b)=>ec]n;U3qmWM^<5]V4Ka?&o>qM\$V(bm%"e/l1<!/fKG*%%r8/RhDWfHKcP$54;6maho4^UUJ.Dj0aYtq&qAo*`&M_SDD!0G^<8>Mn"O?".GJg#^gSACF\/IH-p'`tTS%#=*h%NE-TH7aW_?/7_8-!!SA_7a%*[.^#]XJ3'g<Bd)Ho>"Yq/A\8_AA]ZB1#X%)I?g\\%2?s'8-FtZfbuV2/>7GSFil61q7^8fX;>m0g%%^m_;BQ0W<91A#YKRiu13X0:9!<S>7OS5ZXXGGL9QECMcag&_b@0hE9*@$l+?bt=9:`1_0D8dsL7(6u`9o^bOni8Dn4]6q5!d35%%ATEVPE52[>lH>=G'g\XA&=SJ&j[@I,OG&Dg6sK4*hrsW_'grUqkda<i%W)T"khm[<0Z994kODf@ODP.dbFu_.^aflP@"6lUNSs=,%3^.0X"Kk1B);g])6slSq:)<g67,ZEcUbt/uP]K<\B"FlYP:308Rdh-QMRgD\d.V"#\8_1e(l_-,e>@?L@9M3YQu/84JYaqj\+5B_%4p<`P=W0_9W\9?Mg(E0a]?;Q^mIMn=OZ=Yf1EWB".9XfWAe;[G;89QlZLC`N;+;$';Wg<M'.ngXg&&KQq+oMmWW3:OBJ>ctesWaY%H!.DdoPkA(3?:XY"IkW\`r&J0!=j@:Gu>ni"t<JSOH9*fN2[W`9`Tk*V666IFn*lF8L-*&Un+^\>VQh?mg0E2bRUuHTGKZNEO[di%%+,uX7mR0e^.(jU-0WoMW@&?QHn@T+j>@>=G/@chOu'>=4B;K6QuY[b#8&bXOG_Zj^/)\a^St']*(*,D)fg$h$mp^N$b$SrcZKd7%ebS4O(VW=8P/:$-J]oao71_X<L[Buqfp\--`I9oN8N$CTO[Y_hOS#l$$7KP<2oM7Te0$mb_)?k0We)KO8l!3ZT[?TZqJh+5<#7u,%GeVB\oD"'4O=,YX6/iNAe2>9EfSTc>pdCTf&aGDY6Dq2L+GLWSHBaf5f!YYDaKtqQVthoffiZ?]*#^.M[ZLdfpl6kCPSqP5S$E<f%!DWo:dk[.rXU;;KK6n2a-3ZO54iu<K&pt`DJAAs0E_-K\]h$.''W<)XZ4'>8PST=tK:2sP4Y^;@Xbg:R03Eh[I,C;\QHTnG8.:Pt%dZGQFOMTGf&G*F!YBaBSEM2\4Bj!hKR=_Xe2\ituI-mV#"<oeNA$#&p>A6#'Q^]l>4r.[-Q-3/k',A/(n:Zj_Tr`Ge2oC^hS=Ve+%`%E"ELpgW_IaB3V6qsg+3%]fq*+'L$Ep*khRl4AJQrgF<P?'e`Zq31eNt&t3cu\H3@<NLjRj-#\rEl]Zg-l#[kh+p(Jj`#tWu83(%MA8G'TLPnq@*ij/MZ]h,M9$fnJN67q_Q/gJ'+B%=MA0BU5$Qj:NlbBOFSg+1%tQa&;UV5qRR9?+)C;W9r[$tBE0EZ\GfK:ehk75j%LT'FZ]g(ofa-%\mE1;q.Y,hZ<YZY4ji_MClRtXL_YE['>!RRR>!uEmR71\$KL\=_*DR3^mE8JrjY?6Qh01<H!mL=N/8So%9[9sJ*%3oQ>61u)EGM2lBkG):'(#@'Vc*c>+r1dt*K706j/bClFjGSDS.%@SEH/VuR]N["fVKfY,>0Sk[Z#SaPc`'[oD&-2r'?eL_eKe?4$%XN,N=WrhXTL.D4(MZj=W"C>7H+C:[D&8XO=pk5m6TYD\jfJ/YJ,?tp"eA:b,OBQ[k"2KXa$qAE2`un`ljouD,kaco$*s<gkoC,b?%<pV78OG*jZT^\++keQ;+h8RVrq7a"W5!f!B_\%es_-L;d3>sIVYU!eS,?,n.CLXsn"9:mIf.>$I,iid(_CCqgZ1COhYp@Wt@1A=W%QC^cHGGV7I4[lC_CTnpARWWofH"PM@0&dVSJIUZ):`!eRB;7,2VEnTFfJ7.DnR@kT<IcZ`L@*,c!*^hK0sVD16_cs7R+)0TfVm7k%(98+jLj!acJ]h+l*6@C[9M]Fk%&k#r)<9gHE$lu='-FKXeKl!E%=BYYL]f;]I@;4Gf^lCr$M?cZa>3=3X;]>e?bS1FdZM/\<kROV%)ctunN5-6$NuhY`EWgp;VHLg\.LlUY`2#C@>3.1HajLn,RSA$06H'S\+V6Y.fE+>>QfhoKpLQ=;jmit2%X(6M?#H&:<Yb`*Y09&J%p5.BAauq&MZ,AFf/5hB?BnQ4=6(=[MZ4(<qRmE&GAL)WXe'1OCD)g+p:du+LD4t#CBGf5"@H7V1;,"/t!<S&R<a!2Inc0eD$[R32%^k'<5"DP$+I`45kQqFSO;%X1pXcfmR;XC[uDuR=CiE]Pb/3u#:b9dBd_;CP2:Fu&2162u[HoF>n$Tu0nmMdhp0%'oO\b>QhST"?=%<Zde'R'c)r,S(?H:i"3P5[<`$?XgRo@NQ.WSWP@(L.;PI=;LY:QM@-U4If5hjYi\BUc#bhZ?$/Q0G_\2Ga)Hi0TCn0U7+*(dX5>l%CJF7bZUr1$g_5aaJ.G(R.kBl2Pa.OjioM4kCmPE#`KMBki[n=H+Aem0\j7)9*bsXp67("hXmT&R#Sn-ur45N-<=DFBXh3$"FXc2J%@D^tB(fC&lcSeUb(S2Bd<q%a95u\/,BjtU9O#G/N*"n6#JPPNM6+g$(*>/4J]<lKAV[W+L0_iO#@'X4nT"@Ep=l_s/14faN@8/N=%Jf>@]Fb3+Z0KsR"<Y/S>%CbCE!fb2mZ_VNTPL1><M2!r,_fS^OE.3r]&0-6rH`"s>]`.u+$[sjnO..VMdfAV,,/A"*f&M2eMjtBn%,r<q3iANC2oo?(b)(pPL8!b`RH"`B"d<R?$TDMh8%ScLJ(.8?uUBGugYV"<o7)1j)rQ66od52!K:iS_PA[T)Jk$[aN#G0ZmS-slX%AOH5J8Ae@>f?+!PZ$6t?+;ZQ2r[q%)/1$20#EAIE:tLOl0`j$7OjHP$3UQnb'Qq3mp2V_<Wi44)PgHs&njS(7):e%TE_F]c.=B4e%JfQ&Q+W+o&"C#n:cj9>cB\SDRh>6FjbD(lH(r`=J_^JG,#_k_hJ;ibNK\$]aQ42FSEq9!c'Q#PN#,X\!]s+UET@t5uJS5sV)0ckJ%bE?ID#cptRCl3R+0,j5Ed_6bTj*<U/m?c7a5M3u?$X:"*.'S>/_u20[VPuj3bb+o%@)Jgs?"$>L:a;VZ/8#BgZ%Mg^2&\shX]XSq%%ou^85LH2iaS?XP^Du,b_14)+O;uJ<fY%QpmE>D7Qa3PHjer@F-E+rE&BIS,cMD"^o9PJHGclQM;_UX"L?ZffZlkYJJU2fd/E1dX%JM6@^;pAgK4h^h1LljH8-/":rk:Zu3j^Adh]MKoY8+&J$po27X_2b/Z'E*)X&#&Um7Q;3GT2s#D;l-5rq5Jn"[8u\"hT6j`*pT<,%oOn!\j!@@oKD&6M?CK%RA`H.CNk+\b7pP1g=X2k6OY>g+:-U;kkoZKH=N^74jGSc*?<nLcqgJGHmt:*-h5kgAV1VhG+"d14^C4C^%[9I_JdLe;l^R-NghY.q<e`geIgjXNc^U5+4N@#\o$g#Q-[72[m$ZP;LCNW2_=c@^lXB3#`:4HuYens1IDknBtWe]G)4u5$&im`UT%Fj[tWi8da[r2%eV,1L#aR`Cu*?DmbGkcimQa8>4=S\Od>5b3)e[!pm:(4:Xf;#=t?f#6Thf`Ap1!5eg_k^BQ^TVYp2\^UC.^`h>S%TA$W73o'Orr%*1Sa6VN4,5KoU:A_HT@;Te;#Q(W0IeN]IgN]Z8_pGF115l<sl+YibJ,Vs5>A$YFcScko^NFmJ<jN,b\!ub[j'O[F%@?-J:\%?b=C>?9?J2KB4-M$MHU\icHrQW*_^2i3>eq"u*'h;orWH7lfbQiQ*WQPM`!?g,h4pU]gn7"O2Gr@YXPoPmdf'1.-:V#;-%G\cpa==rW'jFVJ3:#cVP`ot'>hta>03du<]KL)[?=m/7N/cV?/-<Mlg'8\Jq+t7qNLGHWZP9opOd%+tn#[/:^T%N[?C$2,]q_r<m%HbeKtP?W;Qes;3_3buC@2Pop&Ut/ZVLF4r@$[4l/YY+rAe:%i.[ImA^4FA5IJ&#`qnfZ[qVIFpgQs'MR'I]5tRd$X!XFg\m)KBf<%0]Tq$l]YM]>OT5S3m[KMGN?]cDCu:@S_WC'[U^\;CDa`dD01+J](L2tQ$A@EeM[>^T/2I?rZ;.F6kNf.Em`P,pAGrQ@t'gED2H!E%E8iff<oWks_s.g>jOf6\3r\s'Cr,-X0\e^K]=2+[M\?SXDK\(Ks*%:u!P_OtrX![jVr$EE%&'lg.=UpgI]`4>ZQEB,gV7KomKuW!%;H[b^^M;"P.Z<e669-m[GVRU/DWoi).<Rn#eM@a@XbQ[>(<TIq`W'bhmM`24BW.MrDnm?*p"g;H`8LWoV8kFj,>pj(V*q3[2emQ]%H5=LB33*!Q'7K\[bYoO?reEKP]6=ctHMceg/'7d=I(7t6U"t;]&#NH0G5Shq$Y[``TVhX:@?u(drSrC32Z=4_K5S#8s5,GeFU(8p%KGPo5U]5!ioU`>sY:01<Q+n(]7Tm/WW)ldf`oBu5JK[\cBD]*TmOT7&WIJNKL&^D?R(C*I2@&m:mju0Jq`imUksJ).`a-1]`^$s2%X*<?5YcEE]pT"7arrJ"L8\DD'>N``7L#1hh\E4%poUg$<9>+DR!(1GLG5*;jA*Q@)*jTaO;A^S*;n]`FlZmfBDfjaY>-FO46iWct%)$@]kktL!ip[a15mSj+lL=`"'(NfY`%PPPY2`_QLEsl$AmC-F$Ol(K(,_Hk!If.cDK`^N&*?0'=KS(7NWc`W3m98ZrIuf'K]FO<V%.N(j`?DlB>^=HZlmf/"g1`l5D`kUdV;*K0gorQ\fBU*ERQJj-V1mE_)/?1O7?s2._4Z!]tSU.d%q5^+e;ZCA_^[oh9ea=@#7dk7U%C'#]GQ#80s!G&oJCH]D^*p`Wcp+$SX<9BVZNT=mBi??&E0=C4hUeT[sG*F"_c%_<t/reZ(CSN;h/KiE`Nb%M$rVYe^Y:Vc3hT(1r%rjDH'n%`>G]JXI*([6bj'GKj0YgMbol^^)dn>lA7rce+=p%Z4MP9l5oPpUCf[\-Yjo3OWM8uP+OjaYC(Y;A6+^Zq@koK7<G?at#4%?D5'B0)I#Tp`jm^gHYYd2dko.)m+G#b;O,k(@D4,Lk]RMLT!X'N:onoeaIk#IWr23X`\!3kE3!s3ib46C-A4q[=)Ct,)s2#H(9JM%A_G%IqqGjWp$ii'NFAs]W2+6g6lHcq2[L)NcaVWE@,r7Y7dP;b>s0%B+?,$h&;qsL@H;u.1\(Vu>K1Y7MfCm[a41Wp%PPtm^3%0t%^SMQ,,d_j]h+m@2JNR+O4U<JX&ZjZ3UuuqscI09<P3KXI.^IK7LY'eh:UKPoW59I9$.3,R=E*Sob1\>YGd5Hqj2D7%/DO8)f&47P%@)DEa;+03(!^!Uhd]-G_QpU_hqQ-"Kp6rsUqQJUWZcAHD:*M;24h`8c#KB/tG?u@ti,Q)g\P]O@R?;P\Rs[TtM#M/*f@Nd&nH/Qe%fE?gf>KL2UkV^$-.^`e7=<6BU"K>tC=YE3\J'iToqiCHS?ep$H:pHohYs+WUDVkIh]8aj3/S'j[(1]dZ-d;F<"l$d1c$G+b[I.=q%pJQ?40?VI[qX);:deD!]n\3f\3SZuS+f2/?;Te=;B'oRXV/5=gf^@\Q*^D,)p^75P;nMY)YSe'*`DhJI.qT?t<bPpJp0)jd=RNBR%[_4l=4;YiZ#DJL]rid46":@USb<%Cg4cI8jD8ElA33L;r0VqVZ/"WHQVSBtNBs`>s#8BP[##(<`"3(.lk1a1DdnLu<.gRE$5JV)5%j?n[=;FG%DWsFOjV,]8/,SnG6p27Cj)%+PfB.0gf3^`.fE9eI,?`dZ)U&!F<eS_3Xgt-EU9e2;0h=MlY(.%ejh:[CSM?<2rq9RZ%%-RrAgJr_GXQphEL3?a(jK/g7Y\$D2PFri^#nEc-7-*.s:g>-Xec1`k[>!q)[r1,23JqECH'A3Gl":(L8`C4gT=@T6/+WpZ-iIGYq%&.3YT6UE6Pq`;@ff"$:QJ*GH%G@5/P7?(=MLc[k6!LCOr85ZuB+dJjFl_0a%:JNIZHjcA'.;HUogLBgmg/!>87-AQo&qMff.BBrQ%;I*CPeHsjCE[_?P(OBrTs..$(XNZ*nRmp:(dq^e:#:`U-G:?!5V$rQmKChWgA7Sr/\JP\`8Sjg_gE#t0N#,jGqHro-Wdq]si2Rp-%8?;_l_Z8Tq!YnD;<dL12NafIe9o^<?'Y7)J#?VX_;l%nnQVi<eEoY@h&<7q&5`u+a2H%ah.+!FV:GEbiJSn*3=b2@;iS6O-"R/jP%$gkFSI3t)l9%R5uEeah!mClJNUbTsaJ59h$m91%OPa1:bdnRa)hotM\*TqR_Z.pX8g!DSAAo>Bc'30`qq&Aj(iY&NDOrbG12PSr:%P7$FST8])GI/hWm>D"+KDDC9_Lii`38Yq$-"t[dS#D4UP0^#.\H;%aZ/Co5e]Y\EZQ(jDG=9h5]Vd")G'T1D'\E^9jl>b>Qe@sZB%K3FtV6:]o4#T6_?HQ9taL1;7/*ZbE?`1ptU'#IWS;K;<0]YEpggNDR.`4E0bs)](.0CDG9C#O#[@K!0<ia7H5naj%8++0B(Ym2fA%qNp'ip+LpiH#Mti[C6$,]3:CoNJ5n]k@nDNgfp=O.a=LG$53e_cQ=OsNkY<&Mbae,o^c.(@c;2"Cgur(EdM7e4#F=mlI@GdhOZ.A%IC?^VpCJ7PrG8SXs'.@h4O\Ac3A98R0)_lYh63^L&3SM:DX6ChU!m.K^"Ze>4o2O*i-3ec]oQNYQ1d0&@]+;=:##YJ\b]3,h-@YF%k;V4_W5Y;+]MMq'5DAs6:/Z:]LPf]oT*C2G'rlF=SX&UZW+9mT.p6Mt)aVZY?DVjSr+J<EclPC7XQJOCD<JO^r<TpH[tV6GM%?]J%Cg=E@Ml!ScCO(D1I`'dn-G4c7*No%3oDS1@F*sgrmLOYis$nfPdN?q.eQa7qD,@4\37oh$=8HoG[aWb7SbPfQoG_So=Ip$QbnYhF%]/,A#9*pm;:U@HsX.B#XXfG*sU<Oe"<]XB/E,pYHpN5gOY-2$jbLc-78tDruak>fg;PcUch5P>U6)DpEV:sb%NLBaWiajZlDgp:X%;<c3H9SC(@9!A'+.Ks.kgBir*'l`_fj3nT@44c]s`G98^Ye0t$>4"LSqXLhR=K1+=T'QWG#+Wo<X`])?-sS#s>.Ji\1QE>WBm90\%R8iDl:oo(neW0+aa3!$&N;K:^=)$jbVd>a[?,-@[=/f6jGLh@<TpG2H:7kg6<oPX;Y.e\:msCt;4e8Zr<sm9MMmKocEs6E)na.`u%YKkWkrGgjWTr/R#:A=El)CqBI,Oag<r49KpE<qi@YIR!,Y>of48lU,E1`NFD3NG>Nn4InBSh$M+IbW5Lf/n.\V7Ap:EplfUI@g<%%Y\Kqu*mSsJM3Vs@hj-27._VG&cBdd%<[mTAKYRgc2[9ld`EmAWB=I1WM3T.<m![TFWtZkpF^<QNAhLc!!`)jphTd22*k^,t0<0=[%Z-r7"dVb7KROc>Kog$-62)c-t?(\b(nb)'WCo(Ljn)iX["dt>"hVN/D^*XEd`mVRCJ!l4uo]Z)?pZ;+hq:J<SpPPSGV5Rbtqtb?=%nDQ.%dY`5Fq9R+V8rkpn3nKkWEhlU3KiPbVHc\i%YdZR]ogl.S8o'X(h=.4Cn%=(^[]n26^.EB.[5.L:mH#*qjhll(::.2hk>/!E%V9f-g7+6P1%ZbF,WA1_;],.WWf]bSKR_h[`JkD^P+X!f(M45rl!gRYFqaBC;gZOj)cgE>Ra?-Y03M,2pId\k<$B]Q#HspT)ob5gV%eX$&#iOQ\`<^6M:8h4i-8ir%*3Do&3k@1s!HfnUe%j+rNk5'A2astA6G[IAO]Ct(R$!+)!&bsHI0R;@K]FU8GIF>[4H.P)a.$u+:%T5JosPHW942kOQO^XXYpCATpt]nE:>CO3+01)9Nt7\I%H;:q>o`i!ehB()na\<UbKTD,V8jPJ?9WNs%3Xc@c+IF!p9Q(u+GlZr?\%2`La'r=9P\a'X$S-Tpdu*:/0DlGc%Od(\ZMeV+2(/`F6]HaL'O2O!Y&i7H)VHa+:^e3!N(P9r.&@jkC.VWCo4ofmR_SCaofee4R'%S@p>#r43Jc.OeESRf>G)Bl#*.]si5jG.ubM5<[f'r*GpMkMi*TSUs?1h7_WI89fUZqo.ofN.e)^J(dQAFYEaYeb9a?['mp1NM5#!%q.n+.rGUTm\KH/7o<`[TXA1CZPpD7;097Tral@^FgV:,a:G]c[-Y&ba^4(O@R%63?O*fUFXPSEO(!MZ`Za9G>f`0aZg->SLon$!:%KMZ=Qp8'k@I:bS7l.aPGg%iM*M4a-K+3!16lJ2<WfD/V>p=eifa&fh2HY#NYc/5#ic(p]7p[b13QY(-jdS*qL9["T[kS&m/VdCee%07L^Jo(M%c`9d0P)uau3ld,.?d_RNf6C6"NIr0&1r=#eggL0[X24"fdedO*"0AkDkLTQ_gI?`8WPo?]IF(!s$m_Ek@'UG5Z8RlB*%A4\=qVVA*X?CN]Ir-s%OMk.KEdq;\LX4:Bp2p%=[<dlSG<iT0.SE#8pSLIYe[EOojT\<5==$KS4h4:d6/)B%K>ffT4Zn@SX]tLC0%cJ&e.]%[W,pq'_/FZ-@bp[cD(;X))S%oYcj:s2K&r$\L%6=Al_fD%t?X/k;R-S(6]BNBkgAS['S8msR`CPTNt8o'9KU,BZc/LU7W%=X8ihU-3Og7,GnU;JocnqmueN1910pfG^i;p6QVPUUQ"Pjc68(Oh%)\Eq4Ht,"&odg[0&JOVZS^.4p$u>)u?_G^FFR@B83IinP&o%Q-oTcB7qGNar.s@HjV\o>SJ:GRc;%irZPNJ>)T<DHoh''ic4+l/D=Akh1CA6\(=r!+21.V7Ss%al)DC&^lKpI_0j2G-+lCfT'L6A%Id;1]$^hu'+SOC;Fpc@s8B/I%(60rBnB$GM<((h0qC\G_g*aL/?m!GuTnS57fs0n[p;5OS\Yg!8U&49R$%2]%Rd4g^e]6fFEhg4.%7R`bFC.p34Z4B]+m]U&$!`jlhYSN_cXM,,j3r:m:fAn[b>LsCcEW+&qe/koVg?!M5#R9=%Y$ZQ:*&N,&LOrlP4bPrKha;)Eb'Z7T%ZB*o2=UY']'X:Pt>pM4QY)n4j"(GuZB)Z%IjfF!9,fNa.C?r:lRD#:BT1&EO^r[g"riV_cpKSWA,,478Yn\!:4#c8&[0#%YYis1D%#*-]a*I[*tG?:LmisE5Bn3In&Z*SK6k.$c3*[]VXn`*eq](XNh#?T7WEFM"T<mE"7c(&*#W".@cYSQ8p^6om5l487P,rJ)kf5Aoe%?E$%&lIFYpeuO$MHF<Md<YGQrPTXCXDRPHH#pZ?VLsNL*8b#1#<`b&jD>30',E)1A^Q1(`Q=mrYC$Es,BbhFY?:[@_/m`0U(68f7%?-!8_G%\1Wo<'uSrKC[HV9_3BagI!WPVAD]4,a#(N0W7WB8\im12])!;@3p_IL%CDSCfR/;4B\t'7$AFe6Z7:[#8qpnt1T$)1RUI%DuQ[0:+gG/``QZs+URN^XZ_$7OWf:bcTA,32QQ&p7=4B3VNRU>#2+qY?@:B793"D4jU+A8n$DaH]_)t'pS%,$'C!HPrfm[Gae)8S%PsKaPQul0^do95/2T4Cs3eE28SIi*9D_n@NIqSriR<7-&Y9R&48XqmMZA4k%:3sNmKri?"XZOtb("s=6aHCdspeD#oh&%OUQF%l7%/1f2'VO6jh#t?_Z0!CSX$eIP3.QbOPa$EptT-)h:>8n\F'SA;MN]leVRb,):T7J#$/*o]+iZl[ia$&J[gXa1P$Y@&AgHUk7og1n_%YnA.M3n]jJ5T=-9p/,Jsj<^iG+e^Q)h*<A6c'JjVPd\Mg1k](*YtZ)]"gTs1C0SE1-A/0Y22'Q%?qJV^Wi3&C>AL`+3T&8L0()OE%aj4P,8Ud\N[V*'r_c;fVeC`qG]XpOeO+[f@bHT+,-KPS%2<p_65k:9tjaQZZ8H;$U4q,'[:[I!8o&mo4P34S5ICg<J$CUf0+\Q/7%oblZ!:\o='$7=i!ibm]N-/I1@ZmPgdYPllsY;5T[DX[pLpTdQa`+>!3,pBP[&W$+[MN"1.]uU=H3Mq:PbHU7Qls9H%S`!'\Ou-MI%fZDV,X\#nWq`H.doJ/H7"tb]g\7@f-p,d9bn88k(0q6_,JW`6($%;);bO9Cg]R8/mh<1uP6@quWCPP*eAan+/#'fCVC&a6ZPq\&*%@C=m6L@Kg?q.kLA8cG/4-S'3njCnmhdMSFSKh^faW$r`6I]edKQkj29r-@RuZm0pV[jQGsC60_]U>>-$=:L_X[Fe<5E;B)Bk0$%i%#JPi:QTn9MVgQ8M^#!FDrOcNMkYNn&dgmWpmp-"Qo`/``ke$R$-J_gllW838[Ob=s*DR,:>F+#R@9#6F]+C"[J6lNQV9cdG=Vp42%&Af[\:S@<-.FRCn?.#bQ.R[=[11*#%V>FI/R5V'=/i,MrnMVSpZ;F7lH-.2c?p*D%j:JF"p;@i?O_5fSEYJ-!.l)Ae4@ABsA\B1<%/A+>0PS+Gm%l0,lequ(/&N6d4#.BR4;)n#f]O4s-2LUb_pl^Slb:a`)WL0<g6JVEB9!nC2M0;(q6qd*4^t]cZ7-d$,GH8&Sn1i"I%2gn4uB&#[=AB*i!;Akc+B9T+9rUW"*p5Z\55.j:Ao3F%4UJ%ucna*qE4L^/OB,b$fG@"bFP=tOa*JXi878$lOLUI]QD%p\gMPeV5%!dJQG'%E1(n0(0Ce`B6Z69>"04:GkmOHgm^iP[8i)b.oS\Xt9^Y?m!FIY^b]?Sd25>[_.F"[`b8Z:UF7GbTrJ:p#;_&>#"O+;gDH%9<`p/I3>-BR?M<Ia6k9.A4(\AdWFHBn6L^TiR^rnq[etJr*d0UZkX[cYQcL0.E;X.6U6rKq3\)g6RrO02R:Z*$mS`D*aO\P*T!V-%X2Vf5@c)sF#[KEQ(Af"_hoB0I'aE[>U^bdq+\A'TjIn;c2N6id$jg8LFJ5Y00D=L5iCMVub;`cEkXm^W.L<p_Zj!+.58'<X+]>UK%RI7>q`PMV514uDr1)Z0bRZJC<>sMs3ng^HXg+^KLKrcN@V.JYDkVD0\:YS$dWIXuQmdo$5.6fe^0&!,r8]j%R_t8g7VIGKf\k5pp%M>lR(`H9^+=em?3XsL:GYG/;o8YjQa\R6_tFnqQA2Tcs/<X)NQU8gX"Q_AS@&6UYB'+^m@(4UAQc9QV"Ocr/k\#IF]9T4"sPS/?O%*.\^%JgX/.)O9G#:75?b,7>Si?nh)Cn<j(%ZWUm9Vqm3KVr)-S)-<A2ns41R1?`b4n`8&nB@-<_%)"HP/j4iIY?j`FThE_)9?S(j%-AO3:K.`ZGq#28EoF/<9@6?Plko"T*Cr(>Yd%tC%jU1%iThE_)A'l<,aIu6[a0M>WO@,A+6)T%f7`h>sc_(sFf\da\E'SGaL=p@4%[@J3<T:?4pnRndI-$af45'-u4DQhpAB#p<:XM,8kCJR,&L^;8nklj,=$kl:*]Z54OP8n9p'V5*,D#,C$jte?:/S&gpK_P7>O=cLJ%5A%_AcCE)7^Z(p^P*tNrc()UE9$Vf(i!)hg;Lch/H:N`aR`d$nXqm::*K'5%/qIbn:_5hbPCc)Lm#5RqNlR1"-5-j?[8bU\7bnJH%Fpgf,%d+ZSrA(CnR$-:b[r%k?Uk-X*mg94)91pC$b.b$i1`a(75u]V/Ja<7XObH0,@*Q9p&Dj[k7+UERR?&4s<c.C_4iBWho]AJQ%)"nDP,r*M`W"`0ma-SZ;EU_\r'"=40fOIe1fjMkZ6GK#N@5ffik^>NncX(X$Ip<a+McE<l"2!utRhN^#nYI=5O?(VS@5fpX=H0iu%S6!b2BktET:C0`f0r<nmnBe,p(jJ&_RE!RF*Y\]@6lo\crN(RL+nGC4k/8N$6R[^k+?O@uLU2T'O6"NL@??2Nb(pbD)6dinMIO\3%+[^HO8@8+h/F<.S4+2ZT]sVar*dd&Oic/mE!i).JM13X4I(?2_84!jnSA`Xl009+M0Y;\tdhroU\L`ZP51a\p@P?]!#\318o"uk(%0F]OUeY93QK98p%M4,pgc4T@!)+e0+,cA-]T)4/^OhAXM@J`H%.-E&g,"J*`ZBp%$M*1/NRiQ3jn(nesG3&XqXB;&KPa^o*R6I`]%g_P<2-*ib5'BEVu:3&g'g^(R9*ePdSZFVW`4dJX:hJCd-R\"+MP8hlIXE9?fie1Hb1@-d$^nAo]`$RqDOYNDD.$%%oPK`!m=B^Gb%2NQ(Tkk#9TE@FV>T&$ZSJ*KKc1?PtD3ab[K`?V^l+&%\9V=l?j7n2q:%9PO$HlBsK'>A6I5F<>%CG?lu+M&eE)VX[%R@%eVs3H#o%K[m?mb=I%gIblb"R05`=&nXt9IE(=fTT,.lPI!\LCqTEeRP0/^(`YK+`E7RP(e7?\qRN1=0p#t?_7admj)O@gY/NiTL,F";1pkfD%iIg28qW7Am;s;*6oW^sN6;k8MTY.kp@MrZ#<"H:Sl_Wdp"Ze7n;g<83#YV<n5,:g4jD:N9;"N11,]"K/Zfr')>g_X;T'n\"HoN/X%1VbS+E^&9*c6!uh+"f_aHJJ=8,=SPCcA*>MTfT&u3$shZSq2ObiF5Rc9oKU1Da%D_)N)!'`g[JTF7(G#)fn2JL/S/nO:S7JM]1#&%k'X\+[91;S%XM%0]0R7T(TX>f;!+.da:Z>3[UkblaM''ZpW`[.dF7DY#\AsJ*/Gso1-"k80B.g>Sqh$>[)X#T;02(aQMu#JHjop\%M0>KU&<"OiMn,H@%:cj;0SM)A&LTCAjm>;&R9jCFLcXtc7Q9N;fgYJU8W[G=dr=L4l5f,b&SiBM4bdZqofADfJ/OrcBp`c1b4(?D%%94r5#tI,DL>tk^:QI_7.l#6dObJj`)0?dcMQ6-P7dT)#`.s&NJYmPCJm-8erAoste=/[4bX_nJj3(!,q(mba<.3197n.61no-<(%9=BdY^b_//<:\!`SLQD!26k?&@5Cff*s8VtM<!XmfE=c+1j.Fn,<Sh9H$6H2)D9>G(l3!W/WgC,.*'>r$A\?-^keS$-f:$nQS^>T%9naP.Dj`U#DRaiNHW/lIB+WmBr[k*gZ!N-hVnsbUa"jgD5_!AX"d/D?;\G_>!><;@#TpIpY/YXX)CCu:q`+Q@_$gfa6l%tBHitDN%XrBQ8Gdu"PE&N$Q=N\")P7kHW=akc_3jk7^aj#qpA`O-93uXk8KEp]s^GRX0S]UM6(M(+lY(+":h^TFT)l;ClFf4h@olg#Op9U>@%Pda8W^2?`s5FlYp0:[GnD?!j[i31rM-ok5/>i&F$N1%)qD/L"BGH^"%^5,@(4'G^,YqTUAm3GT8gXO3mM<_e^V1>["Q`mTUP2.`(%Zd/&P5!:40Na8]V:oQ7)QYM"G8p2/8@J=L`=,PUE-WZ+kC-O',@a0T_llsPh-ao^J)GU<C=&$k1UWICu6"Vo%_p4]Dafq89e;B*J%C6aF4-OH'tI=)4aB_uF?ZJ05"ZJ2aM>j:\>WGb)!IJ<7HNZ3b]Ue4E]aEr#JO]X'RZ(7HW8pF=5q1/_AQak<.D18mWWLR,B,3ATI%M3cY?c7a*J^ppW(md1.W'Dd)f71IXPPr'/L:s3Q-pB*d#UD>DBeXd0;&T).dE6=L#ZPki(A!BX$dZ5%0Mn)Gt<-^_kBmQ;)>eQ0b%-FpX5jC6G7)<iKY+h_iCLRu1@)mZ"bBEQNl&'+@>?6V<NY&@"#a<gO5iSM&&Z+:%,2"7Z!bXBbg8f9Z_mJZe"AY1XC60I@MKtCs/%J8UIHGPH!cp\J<QbGL2%#6\ACEFmV<jjM,?%l6g9?(=\EB"j4k9c'-h2aZZe&DPioOnS7hVMgN^RThqPCq;T*"&B1?3h%a>;4gQ-%&!K^([nid_at[JV`T>N:G"0K59c)u*$(hSaNbl9d?[K#'*EP.)auNO5bbg<AV$k>(N[(#G:2.&^+)<c?>a(m0)ipRb(H6fR_GKB/%L2=H2nV`B])C_/Y+4\.gL#8"eQY]ld1Ri81MS2*@XreCMV)IaX](]*=\88ad'io5=flV3>=Dme6Zg$H\jMmcc(UmVs(BZmB2I0Q?%?$,a#H8]&6qH.uTA/s9EEOg0grA&[W>oYRc[q1OFRk@&Tf,1gXic=9]mc,77!Ot>*h-g],aSfS/"&+Z4$"=P[]#WUNOY-)PZaAZA%`OPB;Mec4jFn)X3l;FaBCigS?ZYbLi-'b3MiqjT%MejrKh$Xi0'!n1i)qEiA9VNZYm;bSa;d>N2FN8ibI/9pdM@64NP;"G-Wb7m9%ThMWYMC<**q;kOW-,bI>Vg.></XCe3h%2S^n^lQMcah21Oq3&e?*].ZP[T&$lSWl8R9\DXkq\e9SfXLT0"N",6_E4c@\Y9ZA@UbS%Mb!<dnCRUaH5':1]$$8;<)1'fNcO$3M$$NF$CU5C$WD%n*pT8rf7U?i=fa9+cBS5f3(+(a[QHWl0$iiLVH=8b:Dl54T1Cp!\q7cr%Gp),Ba,ihN0_RGl.Dmi"La-\9)A:%-9+]cBU?aJTa]WN6@PY5RTBP>^;:3@T%@+<XKB[-iG?h'XNJ9J5?Sp9c32<1m1.FV?#])\M%aZB5%A3S:u]G8;f,T[2^.h%3rI4?nW8n*$7SUh2B7!9qh$4i0`@`Sa$eu%6<*_i`$7hdI0kMa<n\sCWj.NfocpP-!CP&5Y9An6c-%=*.Lf.=]t4,G`P&heS)]J_&O[1kHWRd7]o4XMbc^W6^5Sh,A46)qtgVW%5oSZ$F_l9OnuPmWY9Z>r4Ato5S>j<-+ehInK7CG,lLP%iUSuBm]l%=UA2F8MVaOVj@)1n$'Ln$0]W]sg0XB!M$u1i#%j`CS;&9EE#7S:`nte1Y%cO4_qk4YXWHVZ]+f%Nh/PB6bfB+)1#8'Q%@/=EJ.;pb_8P+-]%Ge);UV6QqP-S=L3V3c)"7CMAm.Xot^>U^1WTG%n17#j2&[%8/HHi$`>FW8GO:.Q$Slf3d]SgnMA6=M>1*=Pu%=F9We0"ZPaF07Ko@D,f`B1)`k0dP<o((,.U?],B5PC,!Q)Hro+$(71#oQ@,1p6Z`r)Vu5-3O]\Y%516FCFT"l,p+ZO1'99W1#7!s%CTXfV)jnXpQP#O#frg9,ikkY7jBsNM<aKBY;eJ[2]'Vo:mdFLa@\RMd,URf7E51<4MI%P9k+N2NSrm4#R`:T60J"$,,).8l;D&I+%,oI00X$jje`E`nAj19C/P^$(nm$[PEK_E?CYQ;qAX?/>1@aR7Uhs!Bq<3a`jpXh0JnJ_Qh(K0];*<!Ih].R$-RBiCh9=1bL';csV%cY5DB_<f]EQ.r.FqC'Ui?LDpdo`@q:qm,WrjU0c".T]uc^[6,$2YW^pT?:BWqf6t_FF[eiB<S+U$I*P]KQekc&)6nqo/\KG/m#jL%[-Ns7mQN:rW2p]ULKdlk5>FhfZ_-@f+",dB9F`Fd-0P8M-S#_(`(IG[Q`\SRQ0&GO*]>lK/6_;aZto)qI&581Q<:&s][0Z+(X\0/%XNRO,8j_t'jD8:?>3G:N*h.ff'Oq:F\FQBL3>Y9)MqkHOmcejtk22(/o"de:s4Uho,Zac8>(:ihWjEgK.Gam`*IYXq,d=^uFM4/?%WOE\T]J*ORB3)"+Of-j]'FeH"M'U=,^<qup[usig`*-*q2q:S=Xgo*O:8l:7'4Z.4`3$[0qsJo*ob28^BtLaVaT[.)>iZ[,&+-Ig%@qiOMH98dC?tAbg,c;pdakA#3!Kkg/TgE1N&t;^XN@D7"H93jc.dVf4i(5ttM2%[7(qR5H=g#5h$a!#m!/mF2q>RJ&5nTP0%Q4tb%[3NokhUnFe@6ujW2(?b<1%Q\IdBc>W0n44I.U]QSGf]]D&uW.RgX@5`)\uMoG2MHTeY7(kApbq,2KAD"-gUJ;M@Z#D)`O']j*#D6%a-;SU@qQ4^4OCL*dJ[Q>G/eK=,E-p'QM$@&>//Om*/tup)93o-Qii^5?YnZ#"d(*$Bk?gq7=n"sN-7$n[Ph8_mrMM9F(`.FCQ4k#%*LtLp>Y0mBj1>V#Y-/3FlS/.=X#QFdUKH6X1@/P-:]S?"i):Gdp.418r*_NQ3=_BHk4Jr9R?BRmlpp]<K4&eVcES9u]S4#'e>3*A%Q^QBMi].5]XDtX>I;qk(U]Q;4I;CBGjIE:3<5=X909g*(Z[/l52J0HI7eH[Na@[?((!`sV5rS6'hdIokn:%"rSM\>X0lrj!ZP&Dn%V$m$%LV\@`:DR?h*5H5UpH'#+1+YTQ</i.;"4N8djT+<(^HW)[3dsX\J4bL[40ek8F#a$i`SR!d(h&]J'kVq8CsiTKEha\RfR'q)%6UR$""5&rMPt6p4DU_V9aR@1O9Q!b\<ta2ijR)3t<Q'2%qGP&$DIe+gV0q7VZMn-ro#5kh`d]Gpi#C@hE@Du:,L;=(:5P>.Z(8hl%DSUV>V0m8h\FEqKQ[1mefIl:/H@P#^Qh#jC$J;;WFd(1Nj7>sD_$RUINT4h'][q'QR9X5`)eua,rPDiu-8rO^g,AY2^N?YU9TIZ8%me)KWA`Qn,pRVg/^"4pn/!ROV+7`aQKFnj+qB_[A2=/#*R5fKQHi;A;6PRks8GDslaQ+8W]m`)-/'4>4oui0cqPAD<s8L18h<UDV%X5CO,!/\8<0>0aC&ZWb+lPDWVl)0ubj'KLmLpMc@TYo:$RXUKgI&'km,Mh[PY3=LjcPZ*C9>B"qa:kKbn+B=\l6\nb%t1Wg>gu_l%X5D"mnVn^T4o;pAkucU%O5XE[oF2N]U3i\_rR)?l@kps>Fg#0ML'lc%(V-*qh=pd=LV]t!qGEd2]@0]s]mf4_//Q]>n%I=+G+V6m%&:Ba"qRq@B!S?:heG%kd(WtY#]@F+RS?$kjl^(@3\rgjZHi6k*g,X3E3:?H4h]3ct5/%V(nHe$m2gX=Jr2kFcB62#Kl^,=SS/cB-%gqA1$Q9<K=+8oN\oNV:6PEe$S4sO,Gcb4elqp!M:K(n-fQ[Z!m#l!iu&YtP4+5b.pl,[*-`c<0Y^pS9=di8/Poc*$C^5.F[m9[QA%A;eg:IPPDH`-_G.Hc=k,pR\IniQ[l\*ZOZV^GIb0jq"Qfa)\B@3:^A\hs6U\mrd-,r?R\fGGDqA?GGH.Y%$hlH[df`][\ZW5I.l$%1j%#Ag9#fQVjn3=Y?ul$'4sM%(455XId)DYI6OKOhWpMm*bPqV=SA8_jk4IVEo_TGL0I`npKkUri9Ir)Dj9HOoj5CTNlYdRnd`7_%0AS=H4,G3=l^+1S)ee<[me'5feM"o`He5r[BgrZC@E*;j?WJ+X[!Vbg,8n2F0/^@bLjT*KQ,A,'cHQ%ZV(2dZ.H+<=YtmM^Xct/R%^!Ikk&NNq8SG&RJ>jj2G?+,ZZ31\M#n&&jt&NOGTSq_H-5(og3m#10"@Y.`h#f>!m-j@alS__[!,0U=^R(])<Roh/b*#?f!5>?j3%h+l#SDGJD?G!;7Y$HjO8YD;hKm4<@Op.Oe^g<<mZoB4`/VnYr$m.]Wh2Ck]%af?N/o(:VeWU7QDl`<-GIsPDC'qDVqT3M'cU&):h%r:B.:TRQ&#7lPdE0$a+@K3r7eT,Z&Hh9t9:`U3*Km-SY8@IElTrVQBOA7=TOlb^,j?Dha#44EG]dh@r4HFm/'VOpoO^/aVT(Arm(%fsO&n03+P>L":FFZbCfB1&l[rE5L6gDD&$G>8pa7>@5i/?bTRJh5U+1[X3DoeEJg@QTB%\CGXe7`M5N]pk6_q>l1k6Yj*67j,cs=%Zo;jb_S,>Y+$WKYX?<Z+$7%>Y/AH;/gY;^.frS4T2coI#.j4XNJhpV\:?.2]e?-'To4bFm3u]d7B]A@*_*VC6Gu*=H(8p=['J<1Y%]p7_\iT+hLe'-.ErDh&@E9JjojA6\jS"1k7qVaB;`BpC_=kR/NkVU!U-Y!5@.B&Qm:3\sfe`l\3cj]_Nd@:dIeubT\JbDt*YjTft%J8s:t[I\P,cc&AQ2o!&:kM..4q"AD*rn?&YpiW`VZ*`91qp.L-<,SbZH>78%/aVt@c$!+<G/)>^?aC-pMhSX_m,%`U^@Pk1A$/XG%e4Mb3:2B%lq2__E/t\JhgV&A2X]52(KK=Q#,9iHCD,?V#m:UM=I'Ui?P&-bZ@>c;2A6X-A.o:&W%:>G<fN362e*.qSCbRt-J?ci0%r\CB9If*?ZS\%)4If7oDgfUONFJ.FpC-rfFekc*L?@>X&grTd<3NP>(f,s(KUAEefop:'!.1_`ApRgZcd2_JO^0@/08_=(pS1F*g%]0D2Io$NVPBD6OO6WcpY"T(a-KV]K5c`&+8*>ojkh2d0+rHWr1\U2lsP`F'_MLLrtAspX8@6PKQTmN\Ri)bmY)mA/f*ODpNmJXM0%SLmdIdT'kPFEmLq_UC/rm&;`&/5*9r.8hbOgpEssc*P:4U-JB^@n""s<`tU61&2/4Z?hM33WX(HJi#D-[$lSI026RR/tB+eS@*G(%B[cqZ0[&'W>K5I-ZO+Ii=4bIS9=rp64S\dGB>A3#gtT_&&`N%b0Qb>.hC@64?TF_tgY_^I4or+\O)=S,E:S2Dg^qiAlQ9rs)`r,K%gHHX6RSCnm?%":Q!^P&W3!"OimiV\k"b:a%ZuN=_=(RSDchMSZ'gu[4EdR*1D5ZAhSc)^T:VNH0%G']$4grNp-Z]pfP;ZdK^pIJ,%^"U'qdFCk8PJpF0o&Kmdl'J!=bndpCW-3.bMHh_fNs2$Cm&nT@`p;!D28Hl6\?L$o\X+fhq/>2^$_.uZ/AcB/"#c%\,D-X9SQ:*6%"S^su4,g^$]o4&s!Q^))hV'%u*c_EQ5d5M6ZJee?H#82URTUeeega,1(>gk1np.8rfrF7oY@VSJe&Sm$7?2Lnj9KmWnb'Usg0L8I%*eHdFQ;e=?JHKgc0<YQfP-$o,6#\c<(-.A<=WGmP5AV1`diOqpT0oU6h!A,ER.nT.J%54_'G\Po'><'O6\%:2FAMa0=S'-nCN&f5%=9YbmH.@4Mg?IW1pZ8\rSrHnQapbX;bJ9_uCe\h("B`k4rJ*QN>9sH,?FekA!tmo?M_B=-/<$c\fIAc0c?C,'Q5Y\)CQ,k3G4C@(%(r`X=V8dLj+dhG#r?!&5joLXiR_)FU(-K9\lkO]qZTfb;RHF=-WkLpI41?:ibeQo>^[@J5bX15X-"'+;ml^m0P2/[P:G:@@NoNo$%=?)fara^:GoF[XMn>M&b=T)6Ck_Ik8j"YZJ`3]1VfBQTa3;\:bO3MBi@_6t6Ns1>E7D0s:N?+V\PKntd2:u$9#IAX'V`/!(=h?Ba%OlI\[I]iD(gW_2_"*'Sg&7D@.+rt-jC1JClEAT19Z)fH#\aagV7L4lE&Ho+h6l[`QIV'-4nbtG^\>6R-c^Qk02o7(/FpQMEh)Jao%`?Kgj]W)[p(]@Z&`PQGI@XB71UK[(j?P4!++3"rKXFC"Tr(p%<=AQe9b;+(R0\"(smnW<=D$<o_Sc1#`GIRRqM/nm=H;IAl7Eu[G%[QY)A?f,Kl_cdsp(k(Ar`H+DLIZQ`TCe7?Cb7lG4B##$q1)kU<=AL(=K[n\D`P1.$KO+n39n2E69W,,D:0b0Wh0En?f-^5XRb4[r%,R71ch1;ck,/%)-<Ha<gO"4_ZPb*03Q"kM<IGjj7MFLoK+&s,QfmKH]c&4gA\pR=P+2!nlAV%!&g09&/7(7T?XpK9tBB>T?BMj3I%BM$\IW5p5F..Rh,Rmq`t($(?!SY[(eHg@U)p%*RPk.c7J5h^Zn'W1T2].CneiZ['ig!]>U<cR%^Q\;KT^5lh%XG]#$T/3j!HHaDY%V"Ok]*E409Ec0"9$2[.7N%qfUZ%BBbi5HD.>Ku0fr8u-"YNkhtrkqsD/LPI!08E9#kk;*bPP6OKa,!b=rENW>823I(95i#ASP7XZ%^OPhr2p^?X)`upu:=':EU'I3)I"2$u+VpbQ5>5On0:$@>YIfs3^+K`Pr,]Ee7fR7\VSH9KIJ8."s3bWOop*(OgA%#Vs!"Y/:$,Rt%9s)hK^-!17*OZ+>+4o\$A/AQqIl8sW*:OGB'I.`WYpfU_;rd2rHL2KYA8dd=!3-u#!-O@WV<k]i@sdHdJPA*aYEhRo!h4Dt)o!*#%g-),#lX:^O#NXV9)Z!2nM]GRHjodKkRROnre/i47QPke1JmDSmh3c`:IQUlA-KD14iY.L0cJc=Dk$ID>Im.d7THgY^NTJ5rRI&i`%>V[+8Q,J!Y]<Ql1mZ=O1mf-J6\Xma%4\++^T'*Z[dcjuBhDt!\*ZM6Z@W!Jng>(<Qo@?:@d](j5eGn4VDVr4Be6BWaEk\o+<o2a.%m-XXtqk9ToahmaI=.1N.@W[=!c:mfe0rEj^roNT4mnK@Uf!^'B=)1F(#r@k0be7$Km[`JI'4=@ZS<uD7k"dNl2;lm.?c@kU\)jrQ%`P]mdM'_Q9i!*t[J'6X<9[EOs]R9UdoWuth^REkDbbB#moknj@p#slEJ_sc)p-*pW<ncH4Mk//<2iSid`Z/J^I.qu.X+$e\P':U=%HNceTo\fK*`8\as*GkZ1`0.TS4#-bHe!X;p.clN+\W-!5`S6.MV;0Lr\VDM76#im0&<qKZ_deQT==o40Ao7D+L9J.#<j-=C?f!P$%ZUE:9VMefX]4>hLr\_l2)U>#On-ib>MN'e%P`%uE[%nL2;SLr%.c>GBa;:3S_9+Eu'PpAE&"$jc*c+(nb%bp.]t-[o_TU"cMQKmd%i.5)1mP=Boc)ES<$t4kc1AQ]/pMOOk+=e#m*0g#3[3Pn(m]hMpB7V__9=s?kieEk,lhLUu8U1>p/.-NLZG.Xe#]U*':R.,YOVNHT%/n&=9EiS)]=GMqBr-HK4_L)CESrMX_FE*<\9`&WOTpE!u68JJK-u*0Q^Jb(dpT+5Q<0"GVhNXqB,TBqZQZ?WaD:?;:Is"qP_j;md%+60o/bf]P-jmqR0LR"Ln-hlPAo?1b3/"98Qf(JqOi+273]"`&Pa-dgD06M[2Wf(o5C17p)GKS/e4On#'s&GQ$?s_4!5bikFh"kXN%U$LVD=R"jpFOMJI;$l^,f[@-6c7nY=AB)/%T(XtD?eY#$dK*,5qSY_LWhRGD5^?G%R/\tm6-#(V<E#%uoC(4o@f,iUX=9Q6?t!.:%://k,a4s9!9f[IV\QcEo4=f(H$>kBgKL(C>L?]kdgQe^eBX592.32(u0b1'@'u=?h-\;>N+fEq9delK+hW3bOqJN$[#o6=%6@_>%%:YMWNJm@:*nmk[nBZqs<JkRn=%`K%6\QN&j5HJ,U0^lFddG)b:6l?EHP!olXhRte71*T3"m9p'\6M[UK^r7Mr,Mu?O:'P?ji]NSR%+,8c7R8FqOCiq<L-Q?[#&@bJSl1pm\:APtYbZi@4-Wf1,a,*hWpirMoI'+5hZijB1`OS<W?!NlS>o;qt=\*6#Z6!a#45kcQ'iY'.%r1_qi3A"@6Be-a/h*9D?BV$:l%7DXb+<n_=%W7.C#SG[\eHm"D5TsmFOPYj?'T41tioZ!eji&>j7S"tg;&uMQ>/FsS)PM20aV9Xe%io4E:N3`!DDV!b8Q:3qSA#<!R)F7Ancc'V4#Na#=rM=e9;(ZkN,]XeUgKFRl][>gZA:F,^;isiTs!I47LeV1qmf1-u?8<AWG%4JF%G8WSdpUqO+J?@X8@lIKapMK:%)nY=JLtgW@WbunZbY;GHq/\4KcHR]*Jb-eqB<S$89J^_;>-lFEbOkdN:YN34Cc<$2U-i@u2ofdp%?Sd2a=89:?o*K-TCeT3mZ`20MR?L(JBIG_jHU[@hCFh(kL_)=_H=c8<>Z<3-+6-TO5OcM"d-#34S?aR*CWNp6"`!OXn:JM&jF)m1%^_1L]<]/.94'7R6h`>-[4<AP[0(j.CMm^?adf*Th\J83gn*Bi;:?t2g$0;KtJ=P/:Dm*9Y^>5eR2HnYbht9`>cguW)r52=^cg-=P%2f'GIfEeV9j^r`)lE,A=T?C;?\\`2tZd[ZHh"M`S<itt;IMkG<LXl"pmJM!rQbA*Y/,<=]NHP]+iR&YATl-QX[lH%T$3)[YOjc_;%nE"T`nd5<j%A843Xo)W,qR`&C^iH?`-0>YX?+6bHVNlYQH'YW;hlF<@UUg:b'm$aVDJ?[57c,H0I'`%K:/Hn`LPqS3;7'$AV.0!W%(";`O3Sk">`m,Y+76fo$r',5!jqVaZaP2GTZusOm$j8=KX(_>pibIm4#A`Y"A,00^[]Q:eCTJYp/DVkgNp!X0L8bt`=4d$Z[+.#C%+%f.mBcBK2G7@UD%K:);@qo-FR8FbK$`sMWl97$ro0$cC?M#5l5X_&H1b9(SkPI]s6QXU5U8L<5QL5PPh6Rqd`su4K?ds5=c/6Ec%JAS\l]Oep+VIep&_Q[7Q?Si0aBCAup!Sq_qikcpfcRe?.<+EI6dF)lZcRrt8#Mo!1U?t:dL'D2XIAkHogcg[*);]FmVWBlJVE%Im%2.makHcNo\i<@[eo7grp/OtFoH#D#b6-C45"'#H4=IrUd23YGaer-]ol3s#qfH-V%n-k&_kh/e+iE5T<D$AHU'-*o`6WX=g<<b5f%_ZcE5e6Qkl]F"Lh&A;a[:s*b$U4Ym>YGdklK.V%m<]^.m\OOtg1i*4)gNRJ,PnQD6*Ce%8:A,^bEbGn]%lB$L5a,>"c-bH4b:<@[%mcP1kB`hcqi'?*!DSl7oU8_Q?1nV8&E,aT`'ms\kM8N`55SP;"$Kd]C=H)GDo51.p#u*@+O7a@BeV/j1+GVg>LYk#ZPZH9r,e+),%"@I\>i)WmlAOH,/B0?(kZM,u`RO-'ujqGZpjFi'5K9Y7H6Ri(q%NkdeTug.t.]OegRDfA!&^]:AYA]it5>I^sWp5*t&Yb(,nlWL#%p><(9B$6KSA[JdiG#PO6lfjaJmPNNo6Scq.=1*?X82[_nE]raV/??,DQQ!&?D4](>I$RXSK6f\)7TVfpjnei/=`gdlkO13qB8M]>%#ep:GDnLMo^X&m%[%6)gYNu4<ZeP09?V1*h4nTW+qs:I`c-Pc-ebn4J;U(8LlUX7N]2$VsmB9IY#<U/X:[Bf9r7ipR0DO<ddl0M!%e+CbCHVMpQJ%(tPTA+:^i[8r?f$L&(kC0dboV;H`q<'u4J+bPqia;]U=9"U$L]@+F4oC@*=b$3lhu14VIbo9uqL/*npZeMk])UrO%lHVE>d=0ZhOrc5Ym<#D"Q$[sKhIjBj^OD:PHaX0OllN(2grF5Yo>ksDaGS\>Ei'OBYGM0fnT/'`4fk2sZul=u>gGNI-]]Kf*f8Cl%:FSe*Y;O;F4F<%7)Kh)Xji"IMB>3+g2!:kQl>(8_\K>*\7:spjZ)%*FTk`\J;f4<)lZD+PUgIc+$d%)0NU:s;_JQL3eTnT:?_7+^%#A^=tT*;U:WbV67a,iKg;X9h_V<UlJmZe8,20D<fNi8hX=,f,EGU-qd,3aNf+\dWj/^K^mS5ra>XXEl7m,j==B=CgIFB%WI7O\P!%@n2\<%#+6-9oK$BB'CB,=jF35oiaClG&N_I4EjCZ:!?Jjrmhs6[dQ4O>q3<=34[<G\?/`UY>\Zgf@5r9>^N(9,rn'!=>D_R8('ls%#$`DCPPa%'\P?\u0m3>q=4[3;B-2%6761Qme+_,g0YRG2JTY!:P-q[sc@N2(LW%WGfR.LKB<+QB1JWqY[GaGdq0Yo;lXOQb-gaHi%Bs-#cM-=[1T0I[gkupH8cdPY@!(^"6h/k]c&q)k]@3DRUpX#%]]f[KFR-0FX\]Y+hf6l[&D<JBR]/O&^a@>k8[)tB1MGE$F0i`Wl%q3Yc$T/H%ZE=17/(7W)3R\Qk<7n:"3E`9T/`BKkB,j/m43?ie>dQB9,_T5p@MU=7Uc.tLs?MjShn/A7sGFuGB`6V"^46+e;=(U4M%eY9a*=.N8tYcm^Ec:gm:[@PViHhP2I*G&upA<5KrmZbk399NCdB*VD\bW'61<Q@nK<"k2_a@=d+mPt1l=m*#-8QUNSLa/9SpY\'E%;El,Ge[4up3Yu_.clPoEH"MJ@DUc%o-"lH=XgZO/OGn5a8NQ0EQQE!ed;0O(D+?7'FfBFp]2K);,KHrQdUdDXP&a(SZsIl`k;+To%\R*h2+\=hH+ZVKo,dGU"n*KX3W?[9dW9SYg[E/*^E4qKR2q\9GGqZ1;9hW[sN5i4mGPX<lcac4,*#rh=L%_+k]f[eWaVbK\Z>5pR%fsb/Mr02YZAX`/Lkk;Q!C2kVrN-)0[mcSWVaSOs5V4X0,g>9MH5+uDV*M0[h--9&e:7:5`R:THqFWO[<-tPoSf58VmfKDjnR*N$g%[Fs;3%bl$#1UTaG.;,C$U-b#cj0`q$E#U=-SboB140%7q9r<',;HcP>buWV@>I?fTPX(Sg3O!oc8i"go[:R>"]6YGCjiG`P<LUC"%*eQf7.5Z-q!_&-l>b]r_<%L,3a@A_KM12>hr$^.]=e]3:V.O"A--eCaQ:fELI;3U5nZ#M0D=9=71ed),4_MjMonM&6O^T_=l_PYn%ZKY]WRaPV'Atb0,Ye-mRVD<Fm&kCMMSmCfTZMo9#9''*e[)Xg`lAAe,(Nd@2?e,Qb>BbTJC2oeaF(bshhcj->>q`bOg?EbLq_T5Y%>eZ%F??\XpgSQ"AF69tI:EfC+V9V-m5TLS1P&ipmEY&*$WAd;-/*A<"V['>-Mg_q5BR?7r]P3As#WaoP"K?,Ad+%5J_I@^fHs![7%PAdW^Z5PrkTRLq!FY*]0dB1Z?lYTAdOnI#g>J<L#JR?IFgAIm0miWl:Fo?r6dPa0ZqRP86VhO'qC,@@34)<!h:.k8d4PEr7g/*4O%enK^]0&<YA;pW;-qhf,;qh9hqms?bu/W?Hd*50Mn53q3eYMKk6`\5_>TJASt;j(k"*8)39pL%\UWErc_9#c-.%(E>fF$2\&,[*@2%EESoPT4r!\VQr'2rELi.2j[.]ZN4%jX?%k%k@AbLg"[.Vgb:_>>HJ=CF9]d&kKH`dk6rnZLD*Go\Bl=npui,OZta]'b3XO%2,poV%N@[@Zf>&DiV)q6j8]a$D*a/X![\J'qLK(j^o<m`noe^.kop+<WAa(8X49K5QT%us6<O7]4GWNrh\_Qm.=oslB"fL[]S_Nrg9ils0%1GLFb26'[$pN\,64`uiW':%Xk8_RJ-8!-!@Xu1;;=EUTC;EW[>k$)csnS##f8ue4J*!Bir:,,M-<Vis1Ml#meF"I&hT;,2/9X7]H%bTsmHg<;bP;$P>^j3<#p5obZkW2IoKr#qU(H=KOt[@fM1e5Gt]UXMHlWG9Pd8)G@k@.Tlk/%M;8Y/j^@Fq0M:%UDt2MHISob?XII%f<^Y3Z0U=.NL)]do2W5X.5e!`kArDCW!dVFF<,H!r-?Ih'26hHVI%:@d42%hj/E86=)aJ;APu=E,<*.k[Yc'tnEMX&1:kB,:7'DK%4Jh3&-9m9VX[;5X;2Z)eDZm1*X0>h-.*;Ct@^CWE.mqo"eIoXXCmoF07T5fqQ?=]2f)!Z:iTslTBp,Wao8Zpmb0"In13t/;aW'2p%cF\,,?K+H(b$LBUSjY6RRHMq.:.n;s8$BPC^f;mGP*CQQV5C(^W6FnEVbUt%@nab22>$;R[[')=,u)1#OH^G_fQg+:c,"-r2/RXC%%kM:knn-7g8eXeNV*r#11^6TCdTO-W_;1!^N*b\G\Y@=r[Gf`&AY%]1`b*CqG.M'#>4rmCfac\\0#(pYA8T@HT6Jc&,$,SL^j.sV%L>qFpH94aIUqTE@<bMj[h743b9D0,VBg7pN/#uPZONhRaCFO]rFrAJ`\rnY/rZ/:M6M>f#p+,t$X$(cQcDX7Ab*>+QC!ofW=0h62%#`UMOIEoKH3GCEe;GhHkOuqRKbuR$CQb@f#9Adg"(3DTC=UF,fbUJjCPW[Dbe_6).L='.LH?C*+4-H9F$]/\?89,\V?)C@U^[toS%;t^,`4Td9N.>i+Y>oBELD"bNI'l.d/JK`^\Z8l6sl!KmN?Z0F)ZMXf-Bn'*Zjg(;/IeVDW%gtR)1P`8P19iCnLdPlaG=-HnhpM;"%GDf%65EZll/"Q`HMa!#o1h.O(HBLt%U:/B?eYC2YfbWK_IhmDOMg+#3:AQq%.i)8MR88aDQZNN0)Ha&j2ulk3NRHE)af5,fE@sWi%4I57d](#^N)OT0WcXeuiJTH0m!oEC'S+TW&)V)9]0^Da+2Pg69-q51F?Bm\^N]r\CpE2;,$;s,H7r-&[`&OQh]"M(l6m^CD0)N`-%2"hZbpY+@bXX1#SeJlOl`De)(Y#-P/d*f4D"9Z7-e889,PW;7&8SKrqVI?BV*c<n.=XdUChX&<SBOI!>gBXj[*s%[)=$r[CXDL.F%Pff;>q!l5nkAmZ'fkrql3$^k*:eU"HMt_ld0ZT&<Y5='U:1;A.CeK-,K;=NhXO3tjT)V!aZ%]16d2)-Qg9NBR*JE5?6u=^1`*nM9%odb47frKVIGmb@RP4m'PegVca\`,_J[9,*3")hf/G3@[lU[qW'.D//qIoInf3LZCoi9[Kb5A'::"339I4t'\>f>T9nFVM9D"<RnT%hgToPBed<6]3Y&^olchQ9+'hHXkVK6#da7t1RdSd%+t"U^"K87YE=TKfG'od,o#uCRFG;cX*>QTptsoFR@:Rd5*o_%Ur9Gus&)o,%e'?S7c=:*7[!LU.H%a!,qjHJ@`!GS1Xk$tp\m@bsW$T%j,j4ErOk?7VUg/\+e8<pjgJ*hlj(i97-BbmcL6!2'b9O11;6eD>8^IAU%Q<HlD*G*N3R<m;E[q2mAHPL%C%U$4;4aT(e`hue<@=t5B40#.(',"O.1gS+WT@3Z0W4[KUMhh"_8tD<8a0*L)W%t2<a/b4DfB\g]%prUrGeP]T@A!1Y1<R8DCpc39[`fO-DNFT5<6Ze>u=6q0nOPrs0Z%BIFPU\,pXjXa/e$p@(8A.A@HRQJ*Md1.n1EJ(78)7TDdV#h\%,TBbC:]/FL&)*XF,7V\c"uU`_X(Fk%c8*Ns_=]o6E=&6Q>FG"9m3nCf\dPpGhbb:BMiW5)90=Y;8:JB6A4MdRn&KBH8j-fPX:%uF%8^=*fD<LM)g=#Sfgj4"&Q4a^>m9m&BH-UdP%r]4d\?]uAAQlHH$Z6,tXq!X>-K$NIq`r5#6WT2=VrKqdf+.?]c@NY"]("uF1/%hq%NeU9-F";K]ccIY.P8hiScq8[].`3elja%]cPb+W+XL\Wk^rK#fSgmEP>%+L%-<9)j_Lp$[L6<fRM48JqDuMS#3r*UJi./6'XY)I@%\:Ca_=g`WLVt"Gr51ihOk'MI>bYlp@7],N@n[4m&S>'4W];3>*Y-W3A<uPgp\=lc(NN\&-/-X8$$$eA/gZW9QP>+3a+d-tP%OL/s%/_MOJ\bf-("#Qcad5ObD<u0\!_jae(OutlG<=Um3^X#r:;a?'Tbsq*R=qGj>cVX#&oc3ALm4UV,6d+orb#4.C)nM./:%WX1n'ltR%EVo4We&eq3UQum-EXI0+d1P6#Z;jQcDCl&<P<7bTd+d.iVL]uP)3=ANah0,7]SnmFG[m(?mm#Fq[8l>fR5%F0Aa'(45>a0OH*O):%7<bJ6&Yk/U-cK[KY6#-k''Yh+;Xm&ED1@lt?9HnqGZUr*$R#8uJ7R5kiB]qSk':X,ch4eONpQ]A'fM&=HT_kC=A0r=,jEr#VhU0/%F,%G`=bX9F[Yg^rJ9!np#aCOKh9K^)4?8JF<c#(hWM""N%V?TEFC:nV_lITjI101<8&iOiGMNp&Q=M2+N#V*m<"N@Hg%,&m<*Mf?%V`-"WMBg631mR=U()jT7Ptk@GSWW/OjY@quNSLQV?_OJOh],-eD7clqc4/C[;(jdiC$:^R2DQZi^B3W1bh'.%ai6ia4C$%LTaV_i%0uH;O=r:UcrTU`L=pkFJg-D5Jka@0(30#\a'-5aDA[ahRZt)$W$M<Ao"(>*/-0e2VAB_j<k*]2N":CX;'M4It']cP5A-0+RY?#qm%MX@W<k+b:%6obY4^).<f".,6Ypb3YBl&I$ZaQdFl4du5ER[aXTb#`_`GT?lL4$@YQ*)iq%W9qul)J9ba)U`P,/FkS(;aq[%"b'`m%MQrEf):0a'l.MeW8WXKQAOrr?`=a9I6^p]VFRRj325VK^Q)E3'J\fM)Nd3/*?Rq>R+N-<J6\"Z)=ZN]jB2@;C7Q$H`i/$/L[P1^N%Z$mW&3;F,/m/;.Yer%f<?/)dIRO+Gm]#u%_mY8+_=!4Zo@f9%eHRc1B"5>B[Mh.>Wmk()#^"D;_W,.t7NUAPM9s:9D:#*=3#CI_2%WVX*n;O,_nX9EN`2NjL]o"<fWZL$;5QnK=<]i-0g`/'^OE]pN"0aVZ`/d0sgj!WOY;p1'!E%h*EP4"ajB3AMYRpR&R&\=<6=)f'r%F%T7/8Ngjl#n0r(0EIAREn;RtARbQ#IEchu0u7ifKYb/=Yhh"Nc^M,UFk!#'oU/A`^rDbo\h,NUVXqZFj3tb[9\bfKL,kT6p&KhA%K_)J&iAX^*ace_,0eb:P3dUU9TfC'4RT/)fA#6p`Z]WS:b&tbZ@)Sh&HNY8-9T.68.MQF8^=(a@FE5o)-tiB_3(?h"G?n$MITK4Z%m_ch[d"I,jE<'K#C=Sqg(1`fQWB9EORm(O]WO%BGSTQCh2_njQ(9'l?I.l2F>T<f!Y'c_UXFZ/:F1e,PO^4p8\3#b_AI5i(J'DYQ%is6aXWlM,=-<Y6U=ehQh[+s;;821d9;%TI8QPbFp4'M$4fV"Eq9!,":NuqkVGs'uLYJ[4i]=gB#\ETh0$qkh'WQ[L7maF^=%\1%.%dt0a5`bJgI\R\c7D;BM,HO043MQ[%L_3MbdZ.`;kfm"iLF.c\cb';U]`ZX&q[=E!?5mi5b2kq.7m=o(qJihh%JIloW==2XQ&I0`p%Hk_W6*0OaSk:PU&eeVal$uo7GIEsh;qc.Dr>0;IPW:hj`?=1se$i=W%4@kDDE%VS$-J-CWFN;[M;4.JXCj.e:hY=YMfR-kXk6[a&%^=B6FCm"ro>OZ/D8O[g(fP4\Q\6ecYICblNaqD]Hl%;Kc%"&EWQrAab2.#l4kc=51%!5q:14=0JSO]H;MdEHqcXdpF=$\=AJ0W4A%H8^@rrf/r\W\b,JInqhk,kNgH(4\"-#e!aa)I':rdl@n'<8FhgC@G8dV6`jb0!+209=QWb,QWUaBo`<9&De1u:Pui+DW=>,4Sa3-%0I3qjV-'jV*lr.0opC<Ym5p;B*(EB[FEXQA,%^EqO,E@[fu;P&%4g_Tqe$lX_AT:OcHj&G'V:ZOYMBFh2p,,8LBiO0^*nVgl9=U/%/QL(3Z%Ikm=6lp:HXueGOk!EfKu.%4cr<9"37tTJ"mF6Qa3Trm,e+S$<OKM*9iWEOm_UOF4^#_YLTW!gh4!r8$PgV3p?HL<"eQaQ%QDYR.hVp<(e9G@X))tVGG&T6<'?M*#$gq[DKW=.$#i./Ld\^AW^n([J/!&t<e59`4:350D.YWTXqijYg4dYd=*1&Zf\JD(`LhI?;%.G]2LZ=K#9Fcfs3AH>Zdk?0!r@%*c5<Y&0%0u@1fMk=8:Y\MeP*JBl%*,Nm;q5EOX!4p/DB()E+Xr-(NeB"9-^*9<1p@IK/'j5;;%WclU!\qc+<fj(C]AY9s[%JDHo3]js^0m`F$Mq1uO^<c90R>kZl3>>Ph9dT%Qg)nF=`\lbV^8%Yp93/>2qE=#U6<!c?\(DC<*+3EM%pQE!hS3a']3,KA5OjgAgi7K:UdM/U=_?\TA;=!8tQC^J%D$YCGqfDX`%Y+cie9eQ1f;=d=2SNYV17k)9VG/HVmU0DZPqHM-TGD^j%,\6N<ON4K#C;%TNZdT)A?#`H@YTu5)i;&nYqRlsc[Q$iuPOc9]`[a3p@)e0BS[Na+<GH`]$en`nrE8mf<-0_8b#._X5jed=='?ph%KVBj$d?@E'64"[S<615aaT,FKO!UOAVu^d+Y?F5h<%?pO<"p$#CIM%d==`A$4-/[U]m(!Y=.&<M1u`pg-ui%JClG\g.u.[igM%s:%[8eg5?W7bZ1*(EnL*Aa'a7&#RGjeZ<V6jnB9T3N;!_DrOTjj)PXn2NB89fQmXfUP')<dM7V)&:PH_\1\\LKSM>.SmcA.+!""M5f0%><QYKGY%rpV=+3.b*,o-A7L@F/fD`M^383S8-VWI#*1CkQ382hJtnBa9j]Zr[B4;%q&?WHZU+,^@?NcgVsHg0El;6S@OOBoBDm,D%IDbG,7!tiZ.)Vm9%)5>D$s#.r\>0)"L4s#Lq0"7PodAEn(ktYVN_rU?Fd4sWC,\cBSdte99soA5Ih0?uVOr-`9*"`a!\7b[g)d)r%RO\Cc5pBeK&cj-)0^b40h[GYl!-F]%Jg":ifSg7,R$MQ@LZnJimpZ3.B]\B?6miF<2l9i($Q:KM"iBWmn0ZkT:It'doTpXDNCU%D%C`M$I&j%6:@#R?V?9;GRFsMA98]$dLHJ0d12/TkImTu*B)2>BVYSF:s1N>KWk#!+uG7a0Mq7.2V[:Pt*hAU#W2K.R.UDC!tM/]b6%ZcF(S/`1EepgQ*Cm[Y3`7[8!R<6CR5-&A<Ehnr%OZolln7>0[i24ZfiSMHj48VV&[knV:4C,ohtFnCp$>Dgm?O6ELK0hDZKj"SoP%-mPEq0GFR<-,4He9G[d(/Sk8*4\e]8Yp+atTa_ci!0GHED.MIHh)Bjl99^'2N]XM?n`P/3.OJUoS7o1L8'\1'1(tVa\]p2^cabT[%17D>'&_%GJo:lVCK&U=K(=EYTiQ#BP.f7&OV?lG7)dq07L1CC&:GL3]qAuL`U&Tu&eEN#e?,6HuJ0ag:0,6g<BVd%?b:rd5Ykti0%JZj:?3tW$E>0FOpXK6Xe4$lRr[t*fqXtSU[k9;LN#/c0+g9YY-?fQ/3ZW^NL,RE[$1;h[o2p,uGF25F$>mKX=6-h&,Eh:D,EctK1%p'+P8=fK!!l`"K#d82(h]<6mrN2ujA]akNJ009MX9K>0Go*R.fda//k%C8VCr30<"mZ`$#_YW$"mu@/beI[tTOX?B?R:2*'db`sW%$%S@PPukWIZP`Y^1'`sgaD8TIZntW8k-2D>`cS9Zo$<9VjZ0\cjO]fK9pFt73SU=J$XKogC:J#kfG*2j%2Guq]F=LKkEhC9)SdJ6%=2*5qA"Dnm`LS24;qlr^`@r$Urk=[?7Lbn\NmbQl=Y1MeKb#<_4N:TA4a$1.D-g`qYW!8!_NlH=1Es^'(/tj!OlUiBeqj@o.ppnB%*m$/=5smO4`X%\%b4rgX]RNB+h49T;.^&i(*M(KYa2LDdbIbXP9ZOt+_W.eS]#nMm;04@n8=$*=C`(RBq^l=q[tqdT7Pmi3,a+/!%8sU7uB\8<ZC(c4P_7;E\Ah2deP4VVgV/+]\QM-"EE.ns.V#[Vp7d$:@J8#E^N[R<;!5=]!2c4RmGR,fjfVWKpi3\F*4H:DnZ?F1(%lBu3Jr:U5M#\<=>[?RuCs"#^-bS_h@_BZ@3"ebf#76u=&kLK@HnfYlZrOG0D$o*o<8Zu]j)'S3u9+&,TCFiI:`'7r!3dFgLN(Os"%JZ#(QZS#`e@%"W5Sj8(nMG=BL>c4Q=.jLI5\lCBjAsf@,#tLtmNATAJTUSF'O4R_2Efh;.!NhOD3@ftV=ZS;e7E>e$1=oap!AC#P%0-ct!r-Of+.><O]hPHMhiBdGXYb^1/;S@.O_+C:eAeQO1q#BV21@i""GYLA)H5VYE34Ftt&<7#%9_(:)#JPdZbub%CdgCpUbc2m?%Ub?>3&t6)O)S5eSQ0VM%I;biH+X-ndVD[CR_,7JWlaT3"cnX#g[Nkn?:9bhg7:Q!+gZ&JmN=dKFaTN+_):!_B%e>p%XJe4.4A!Q_%A6HX=jnZ#MKE,NKb98SL[Q(nVNY)amj1<!jaN!]bZ2j^GUW\=lkg0G%Wg.R8.1TcTApc7IJcD#e^0//deFl1K)e()n5f$*qnJB&3%lR9UjLI[A5./V<22mThu6hgc:p`O<kd%,sFS[b4kLse*+i0JN^m<0l+R]^0*d19/*+Mm%q5e4lp\cOrV*(Z-l]G?Ff%p@3(KU;=.%f()=6O%&_:(8l<()uIc]I4s?YDul_JO(Qg40W=V3@!BQ[qq`oK$/o)U2YLEChoONBolOWr@g;Hp^qg%e[J@o9g.*[/?Ui;i@j0#^%,Fo.s9MhDp&`<2ScA1fSP-DWZe6Eal#^(mi4i2i/IPYU&F.%)GVL1L+UWB:!@H@/CK/.C8D)@%6"Ook[hdo5qOKRLj4&:.=[Sb3^%N<SI/+RL\qZj,Z&XcVUF\@4)`YmeS%fk2D$:bpr?KVtHjlnpc]h%f4n[8JJ<6S[u.%$#AR99'f[ngjRI#AWD[$G^PWfUgSDYch&8%9)W0+#T/O`oaso<[<R<%]*$J$SZA-h75.&gka4Pn#'=&Qi.H"2.g!\,"I'9)gSI6&H?Rs5YWZ'c3,p%=%+X<"PutcD%H&A(0IrE-%BFe7RH+oUaqp>8JPlul.,Y;[%qTZE!R@^%6@>[@FZPElMf;jYX\]bMb.T5,:b#d*BfN0bb&Y9.Paje0#0Ep)k-*((jJRHrGk3OfI%5[-.aWT2(&6G[jK/WpO[PJ`o%Y*mbtkDGSP0:g"rU9DL;!%j?BeGS'd\Krph=4X-O2oMpr5LQ7i0K"@d>aF#"if]Ru0Qb73%rL%;%qEaiK]r_.\1(eLKo,34_L2?`*P>%l;N$6l*4NN['9DYll;mPJapMN0h0%Cf!Or6X8D/Fi@A@8<bF>E$ML!(`P(g,t,>q]_4"du&F%?VqNL[gg)]?)FF.?a:<MouCWJll.-BWIZ6?^a8."+R'q$g[gf_+_OMf3r\0%]nL;#5aHW8@OAI;AMKHdpb)$a5#l,FS*pM2#SNk0%,oQ?_)e/,^YkjKYrj31hMdek?:p*b>YU3g'p3@Kna;Th26(2Mik+!=*r:<5Jp:Y:VAECs'I:PWY`Dmg3h3Z4"*eLKDOJTSK9N:Y5%Su(5H6KYUh!'F,[3nsj@Y9,rjfS&.(Dj]F4!AISB27f;DRbNt]@lI14DU95@YLEPs`q5P,@`[;pH9cD?)WR!g\F_3D'L'-@8=.b5%J4K?nLBLCq%LoOW8Rt#H!2Rg&/#k3l;Y'5'$[t(\0f/H4A(3!$<8JkA^/0!Ye2BI?VF,J_3$rbZ*(lSj8Jh]#PGEjsr_n6Y$ZI9q%M%3U=E"n'.-*5*^O2H"s!#!e+oBLJ-K)^`MkR!%c7?R`9XJG(-8rp"t#6Ii06?J)]^J$hb`S2Gf<>^:88WkW?+VRreRm+i$[GHLl%mlej\\A+[PbE*?2`B"\=a>@_V:'q!6C7k72>SJ#COC6X?)98q]hD2"ZZsQapef[7>)Onb*j7gb_7\EL2Q&bbh^KDo4O[Luj]YM,K%)U?--jjhVOP?qjqF+nLqe+F+J]p(Xc\f))E8^>2_@$<B:r`j@nn8=t:7ZoAZkZoi[h]^F02j`.KDh1H0PGZAI_dhT.,Qf)QTQ::'%D^j;uqS&pf51!ja#Ud3Xk^EnL<O(##&d\j:,&iP.-mU(L]l<'$nEHt0ZI=31m<TUCEPIQH9_\GQh4KO:KD(#Ao$=[78;;"jA*b?[%"p"i-j@,MnfHEJF4C0R*$L@aAD(G]6^OSK95PK7$e97s%H_M#RM^m@pa&!#E9lliQl[uUYN0hCMkqQ&iNBLt[Xf?Bls+eqV5%F`e%C2dGWp>lH<4L.-lXCt*(^=]Jf:T^X64!.C7Bh%!J+@[j]dobFd4@LG]%o$D0h"P)^S\U/l,DK/nJ_tieV[0d9GB'hFC_Q&pF7AQ%%Fku%6V3*I@lIBf*.%cIn9l^]^@;4P'X=b.P%4\\/Ecp*]7S?RNLmMsb'Q=Q!O`*J(@)G3k945OXr!q#DAN\RN%nG!T%g5Y1[i\T"%:\kT/0(8&jhu:T%rls@!VuQ\<?iL!gr7aI6]DqX:s7M_.rV-?P^]2nmrm/@V]>+<2OJ/8:r`B-fb?pdKB2.QXhLBfoe#r]t^&MG'%s2Y/n^E3F;BI$qT:[,pDm_A\#J,^%/s53hF?[hOCJ&_fooABI@?iPl0rRFp3=T@O,#f0;KjIaZ;5FIZ6\XAT[n0O\9q1l`^_ft:]%8)f"(s/Th:\A;a.f*hMc03+(i(%b"TAsHD7MO!Oa`iA6Pg![K[S['13rek=^k.CEgKTYNDO6`ra=hH+s#h+8>BNKatWi#!hF2`?S%VkGTj,RZPSF;SdF<Ila]!UL/(0Q!h#gk/n6=IX*"b$ZOYr)#^ji#g<8&sC]YbKp8.BLA>K8+i0W+Fa?eJZ1hK>OC1\/d.NFa1Yt1%CBi$t0g=LlqSb:<XhNM8q][CKY4qN7$sYHGp+2%eE0^NLd+e741eX_W8#t'0en]?f]6sC(aEguB$#rmL\r+;aWg8'a**k,t1G_:I%1GpomDX2'e24m%p6MK)XfFqm-^8*lDf<#G)=q&J^<-680qoK:O>JBNNZCG:'1D%'6PBV<lm/W@WYIMkbQ:Z*F_9c(>'>J1uF=Jn/%'Yh6`6G3ud;.'6i3]W"!44VpLT#*;]n30(;%!02ZeTMGsjB.WHbFa)*&p-7.;q)DNjst+,Q?`bMra:6RBr(bng/gf@ado8sTA!ML%ppo4WRNM:UOa_>+rPe4h]>m[k+7(aS5I\s<o2@_F'gK+X<:P%A9f50'2iZpsG2/M"cgA8AnWUTQeGRP)qp>oMk9U',H11^EpO:tG%J)7m56h5`lJlQPOg@ZDjPbnO2U">CE4F.INnqNt$FEpnQh+IrZ/rh]K_NN..f$?^.rpoT+H=BtR*fbkH]m)K.=1$h0)H6Gu.pRNP%I^T=:2-OS1BG"d!qCo?\^4G'j]H4oQ:#P-O,^Ws>/OH+*^"J@9eQf3QIdj(u`,t4:rPNJVnY1?%DM.q5.A#@sjZ3GK#e<Z`2D+e0%"j`:CD7([n&-C;0f!^^FJONdBMa5MKSHqBh4-#BZQ2F$N)7a_fOc/B<*+FG^E@+P"i8Fb#9X#D0ZAa1NQNRWaBQcYXj3oLG+k<T:%4&j\4SmT*6YefPTP!<C$?t*Y-\)Fn5C(s+22XJ.CG_uB;-5tfm'8I/$Tc,<\(.ToYP6i!_(RU%iNpKFO>GP!:/$hBX03Q"]\HdX0%T>Zo3hUI\'_5"mV44',*\5/M&SD/fjND_n"eP]+rPn)q?5Fg$Rd"s`$CtmFN]@]ABW4.d+OI)+ij@598G-C3G`([++>KdJ4I">!Z%_ZC!JL7uM3@r5VE5%:#%*)a+%AAC]<FV(b=@TIk_o"r`KYb'udFt<WU4X7CbSUaK]1R(qp*Ljm)&i)U+4R-r,3*703*Ao,O-K3Fs%`el]c*d/"u=Z1uQK:bbk"!!_3Ri\peQK#+'1=1E#JB`=dZ"%92mhsTQ"B^r-@#Y&T&csHR@[Ecm)PF6%#67G&2cusE*+gXb!H[&f%7:k`G_6<na6:nVIH\tNQ=<1)#%=?a6ghJe^!Ct@NHb9r&!`1St\Js<LUDC>Ql[]?IeH$8]>/DsLF.>8U&r[kf?Q_0\iZ)ShnpsPQ%$_U\.@%64&"9,!2rSC]%aX.%V![-=<VCrF.fWqCJH#*uFG>ni!#%(`jOu`G[;`2f*hfGn^K,GMC%#I<kAA855WYr%K8seV/3G&ci%O\5#bL@(kQ&LMeQBS_"2%Y(h#P6<#Yi.lk/-q@7E9P02i)oj^=\Zqj^,uEG.Q[,@d#)5KYgC240STtR)G6.em)gLArD9>iJ6(c?k%JpW#kdZ2f\6(SGhJue!%WH)YBnjoio*\+(MXL8YV'CAN';V2E@/hU_>.i^riHN'@2q!d6nJj;U7M#JR6jR8hQ7rY&Jg^O]"CL83t%RO189:8[&[Irj@pc0Q[T"_9IZP";7%fJh5bB+rb$X#",Z-o,_ZeqWg:7Efam(*Q1?q!?i.L.Y<8r_^e#a/R]#g_>#<G?_49=hX!P%hXKi-C?/MS,b$$;1KnN8bbZdhSsgEs6R)f4ge"GsC+Bd+I?6Et`TQ1/P=,DaSg"Na>mKbk#>.bZ3?CZs[alUQO)dC,,#.\-`C8!u%4Vc"73NTNb<&<@W9.u(NA),fC&D0i,"Rg:,icB&e'2MD4-mjqoC_S)k#$'Km*!V50.HpFdLA'ul92q*-ZDgIIOR+M/Oqbrn+;6q*%1@pUhC^4l+<cUYlVOf&r9F"8=#;+8^j0dbEd&r\c]qht0S7j@sj6U!WF$VHDR><Xa157kc:f?I62/bFmAr^Qn&HfuidrTO,N%aWO%8[Sqa>UiW5</+Kd2cUOm03K$!OF#a5$sV2WYK$]5mU;TE"-<r*1%Y]V+K@q*]EI6Bm2VCr'!iIb-,WNOi>%8%!hVY!g]ipJA'64O%MRt##S!-RNihU><hO,aW[e"TG=7(PB>V]cQ*J1mQ''CR6kpV`ha%mMI<-:W(Q[$IYL$\ADKOH'o,ebd.Ib),[MeG!plYmEra<Mu;%fr!suNI!SH>`Z,R?<X")=nT[q:+R%do/,-?Enmpa$UU"tnOK^H/FfKs7B_DCL)GPOM(:o!ZJG(W@JmV8VGYZV%nCKTm`b;P*l.,j%]eI'MW-E)l0iUk-C`@ddk?e]:(R?<rhJ3Q-7'/tY1O?P%$ML.sKpH9&5VPqpl-ba&H&k#j&b[-A2Js!bF-*ag\qO!!qVm<P?!l)R%OqD7o2097LWnbe/Rb1.d@bH--SDU!ZrOc)Id:B4L_>!9AC!3Laf);VD(Y+';R?oO*WG1Nh0uPj>9'OceL$$j32"_bij1*Ps5B$B9%kB]eH-WtrC`^Zq*-oH'ZT2UhOPmN+!ojf8p9;2(lC+Ob3P/RZY"KT^"JNY,GRN"id"%+e3RYDA:RU6k<E"A4Nl9=N+&MrG9l/i#1%XMm7e]\OK7'+J1C,N)oAo$G(6J>J1$6n]_\&<qaQ,i)XeCiY?ji*XWoFp$8q4%*\WYYYoe-G,[enN^]Z&s0JFD%=;j]-?Dr>4Y]%%3;0?]HV^5fcH1ru(Kf4`'kj_Vm==sjb8+-bA8TjPpol$5"oKJu`>N/3gYa*7$'0ZqXd/V$`g+gA;&8Vc@Jlp;F4GU*k(Tq_)36HE%diI7-Dl=Pn](`Khb676"<`?Oa^#Uaqq9#L]=>n%AVn3"ePIj]7VT(MtHePYHH@>AK`_8&=R/_gj5@*%8K+'V511R>)kj04[JlXDV%?<qahqhc8>073S&#57&iXR?)/G1].Q\hgqi^1QLt\hh*C-;"IH&W,ko>s!):CV)-!lRb#=KFlLX)(UF\21rk+9ne1!;np`pdlGVl%)@;RDL4tp$il^-W$!BsY[k]E'+kr':S[kknh-%iMAEAq&ptN)\YH4fUMq,%Zhm'@_],"qA1X#>@7pl[H#tE.^`"GUc"m,D\=lUAk%b]2I<QJtFH'1aMBA)Q(n=e-7!jW6!a=@<ALd!`>q@Z8BVIeFOK`8ZV#%@'AD\H[q^qL%bsM:ft=nN?7B"WSbm4lX%&Z'oE4["M1<%Vat(ZN(VEVNNmXAok^4M9OuYb/l>h<)H:no3gI0-c35&_R10R^o(7OrhlRB&5am2($tcg@FJ=V7;1S-e0l2hWp:1%qq:.\F(g-]<%$m907nDqI%/rLaDTT!aI8L'X9:9G#23f6KqQ6.@uR8*_q&G)IiX[i(N%ZLmJ6<oW%'DnH;\+<mochHF4FLk<UG[WGB-c-oR4,o:G%)dgQg+WMh_i._N!/cqFsc"'_cLULn"Aa@:1auC!U+NYW*BDWCLLrb73pu)Ai6]-:roX#nIjE@2^B)[NtQqG]V!_`0nm^OB6`_P:*%HaF^"gi@g'Z5:]1/kM'ZTpo+`1+3\s^qmEU9C.*/"seKfIP0<g3B7T3Ff@@2AdnN57X?bTlk*Oe-5*Ru7p*CJmN5'7Kgg@"XiU4J%CiOU`JH;o.'.12>h?7]/KiJRd3Ch/JS=g!bUI6\$4i?D76MXAul3JjSU"(\sQ;fN_F]E6ALUO*8^U[$B[_NI_CH*>e-04`_N1bT0%NJO"]j31+'XoU97Yf`:C#M&-al)e=Kb8,k1>:'q+jg(/k-Q`dhQ[+N\[Yc#b%D%-?"fh=YcUFQi9$+@Wh/l!H)+T%rA-d)CLf4oO%QBFPX6K;N/:pk7PC,aDYXfQ;:r@VsDC3Q?/eO%.-?4AoCF>HuV]kfFbeL39#'T*:(*$9"_Ob)Yi2>CWKNK&te)(eB%nES:)B\uST%(8J&OIIQqT`q(CeYT`W8.SP_OUCD,l=ck=G/]H$bapfbXI#IN+`8lL':/pP_&W%[p)_PuWDth=<lk/C17RWA4m.=[pG"79m5g:gn%i!gPN<b+?T-E>Sja[L_`JgtC*i/sAWNj3^;(X=Cn!lN;ekbLggc2tsQ3"q),I'A<M$'@>1ZJPFJo=^emU[Lt&=QS-Lr<'eG2q6J,%$q/LHg*'soLQ^mXEH[Vh4^I/VW:G6:3o,tmW:Ck7fHT[.eItcdQIn)q%`<;tioQ]APr*XX-<dnk.R_m.EhR2H^qQN@-sRaCK#bC(%#RRYE2iSc?:hoediPtMT/m9Z3?"FE+9'JNWPQnA2f.cPf0@,!#BjO7SIe*_p?*KK?BSFkeKpP]TeJLXgaZ6NN88c6+CA\j-bVs&X%CZ+qMP$=+MJ<41CPg%aCBWeP-8TooOh=h:s@945R4)_#UH\"\G7:802RECm;=`]se'R5Lum0/M7d6[GhrD&U^2L3>7pA>igodsqr%<ct8i>?iI[Cl]#KRRJRMpYg3<9i(%5V5b=?.@;O6<X=R)X3ccLDQp.tr2*/e+)@"(V351XMaIc$*gKQs-#o:h+HsZg%8,)"A&Ym,%T(_PqXX"rHQ-%-DF*)[d?YhHq-KXmj5Z*[*W4O*Z2j2Ak'5f+EW^^:VJaAtlRn[K!&fQ#&TEQX^#J""h=aB\_>m>bCaDi];M,J0a%$Bs+3;KoGb"c_6oT<QAOs!#Rpet03p-^'&bZOY%T\K7`EJZm.0,7/"T9Pi?F[,c1ua:&m4<KcmY,\-_b+nNNP_Vui_f!?1q?=@o9%cn<Hp]lUQ7ENYCB`"3HL%NPW$iKdk2_lRO3G+g7k9pWrjV2OKU)TmlH"eTb+kWugm`GbV0#c*Qtk?Ed2^(_17"oG6tR3\!((^$`G%b261!Am(pcm[IO7pYOHA1aQ9@gkC&`!0m[o24GL<O9eTs^E[!qmR%W6(al.e/.78q=\_gi:nJ5R'%dDm>)c[@'U9^g9ZS7F'H^ZK%:5$:E^pbpS9UTodT(cii3$"R7$g(a.kQ7u43jj^SJCT<.'fUnY0L*[p*T4.6%gCKV!7->lQa&+-fUI)jaKI+^q:S_>#$&&6,)0OJ%/>1(2jR84m9_DeOUa:>;c!\)SQmlR%Nu'XL`!b0M7Z8XhG]JmLYh_l[^Or]AI&@j:9XtC#ao4.UrF#ea7;S/6aKk?@=t9&&rE_p'%%LYN?W!H]#[^F[;S!oQnWaUsN_a=&:(*d`1R8[%tM^kr[bp:d1WR6_4*dbBV=g`:Aj`Ze!a5Ple/E%>(*g-Hk2.fe\j7Fm2p7=t*%i1V!tl>!tYBR5>UL/Tt,J;[74pDK<hm8<F2`;sBf7C\D#3sj9,its$5f&+)GX(Um0KU2p3&*@dG>r#&Pr*URNicLHXKEHcGPV0]q%K-H4f>4Aad[>nI13<=Z.(]Rs?/u4u(5#Odba#K(C`h<a7RmK%&3H9ea9X+ten<oZg'W(538"ch"h`]75YW[4IlWnNh;\AoUAdfA#%PO#4?Lu\)c$sG2BoQ0+`$53S'YGGC#P`S8^j'AO09m=3A&]/fS>J@.>Vd0oAC%?s@9lD2!/_$^?-lHd=>[:j=6<DQC*.N87-#89`%\WuqE&.GQY5"DJ9<&h8!A,T07OB8Hk,sT@e+p`Xgs+Ue^I?YVHP>`aaCDWV7A@N0g!/s=m^9PJN;*9*-qd!QrZ/i%T"JYMJ>0-EK%Rt];tR^opC'n`?;9F(#T0*OoUGl[/tE7f9L']m`.qOfUOhL=MCP,sU^lTt+&$lO-mqOkN?nh(9;##,kdcna&0_V\ZH]W+p?<U.l=%TJOMWa0m?!N'IalgREY+Mc/UW"4"`jZ0/M3,s5aH&";$QSQHFa`F3Sr!'C<Cjq)XiLKLV"<??IA:2"n,f?59[$)C5$9M0UciNB([%J/#K6:hl#^%j2cm6l=\#O)*&5kn1`$05u]g@+@hhS*XkpVDms!oiH[H4=ftIm:'rL>*@^XUfoWF*0?NN;=5#WI:Bh<E]j]mJ>I(H%V&:^DG>S+HSe6K@XDQRA3#]B9\5gU."iG/gk80Apctphfleg,b)$VqJpVRE^ZMi8\Wk.Q_`94^O1?Y4mFTM4E9g;k=\N!%D1?4+B%@A[>Q?`SFhh(DJF[u8%I:6A2"G7TNX.kM[Wh']<p9Q$BEc;-'nQnmHCr$,EZU]R^VAuZ#cah5$N)HkP5ppYYtl$grt,&n:N4\7Z<%LIutB:'Jh27qBR^+UL`s8;HA*M<q>)%F!/rNZ:Tg1?71N_qV!BCN]KI&@p:<O@F[o/!2Zlq:4*[.n15'Z%(bTj60u(-^.Db]_+;_%,MdINIG.t_CnKPHl#YEQ1WRotHr%\H]A@Ciad-"%<p"DZ0'"]WFb*gES(F+<$dm@\3pa=RXT:ssmWmlV:!2kQT#88b,)IAk+J2`j%k3W(2Cd4TTC3dOjFIn$D7eG+/rDfAVKG1X\\F*P\?4u`=930WWJgYARm2@X4_]@G<++;YnQP*8f]ptnoVSqeo0h8B9+e&9k&Hati%Yg<seWJA.A:"+#Iq;T3OX2=!;Zs?b0RQ6IV5"3uIl?%Ai5.W.cDIA$hEs,.f2MW8n%d&2&:],?ZK#89A?1Q<_pqi7m3cm/fChNMc%mVp<9,oROphp@s<!k`U<O%1c5=S$2jpY9_4`=.'A/*P1O;;V(3m=]Hm.9Up;R3&=F3"2F]3e:od:>!N^Zgk_Wmn259AK/:.=,#U3%L":[mRm+8A5>`u;!N*5kQ-AuH:tYIV#C_1jKkF&&(FT"ueQ*W/%Jd:D4>t1-_Elgh.?F!=_B;(L=aaBj+?sL,S0LV]nD)Te-\5bk%'SLEI+@^&Q%\.#(i.Dc'GdQ*k4ba=/^?+fDH`c;B>P7a/8ksiMg?pIF!QJ)$G\+-::Q\7<6gYN&jbl![bWen#cP:@ehZVqUo824R%b&F.(r1`(*fHN\]2SVmSjs1h\I(3/ion]O`rc>f/VP/(/=80C3\YdjZ<^BI2OK:hb4)";c;0,dI%Y&t<H%d:2iaa@ABrtQ[,b87R%Gm)C'PO?C]=hT<RQh-pc0k$4jNeA$b!?18EVNMj5<mtZf+;H'W;#dWTQ3d<<=7Aig&l>)5Y4m0uje.`7q"sXD#O,q'$W!;+APO`/%ZQZN8OR0lqiqUXK3$7_.V>,U%a9^jNc5aftafB=$0fo_K@s`jOLo4R>`(8n5ONA/3[dN#o5WXdq\rcS;el@R.9?M9Vd5m/aB?7'=%Z&"_PPgZAhe8Dr86!f8P!0V;'p@.L[$pV8S?24*ITo)ZrQ,6S@pNgmF`J)@FKY's2/q"-L&1Gj]qC,&$m=>6X!R?i+%#Vq3,$>cm%6'MAO<;.)ZB.)/:Nn6fV+.u5GjY6tb&_Tl&-]&^2<3MO37g3#&G5c5_;Pa#&4N4d61<0p:8=\p%+rI\FCsa]W'PE')[g2af)nEGi%+aIk?(LcJqFkD5EeK"]El*0lm)O]\87>_0V%hUY(Gi)FKcDgI,?'*(Q4n',e#.:rX+#@(mGf)Q4*8eTqLtfM]?lU,='T+*?4<4mV%aAkj&8\-[B<AjGblSJ*2*2Rr5+pbtcLNQ]k03iTGY:%qk"?oRe(3'VC_3)@&AQK"0/k;<VT9^=Hfre2a`G$]o0pjBa52hPgO^`ZJ%F0](\`*=tJFd`n0P*?hENWBG1\M'`uO/>ID"6"Eqd;AB\&/Nk9h&a05Km7aM/9!Ycr@=t8/HUFqbm$HETI2AD2Ui]UYlb4!C:M!&%3oY_<[#ckSLH`PuOci"E:!u2$M'YQcrSo>>!UF<7Y"Vj&6&#'pHn?Ga+N&Xr%NUu$A7Y5R9f[a0On?sL?T&^CF"Z@p6+ntY,/HAP%Q6s4M#(Rh6o5+WK]b[hfAK3#HjRbS?"ZFuS[.WnQS=sWh*80@d#:E)o_q>Y)^J!XhM2MZgMHg>d+416]Ud3Vb@RKoj-XYg$U;Lt$%XD?"'Jr(8-%)9(W&bqmWVV,BNA^9Do0b\'3YZ\r\bqqdX$06d-YY]1ql4u]C?[WpsBWF'NSCKCmd+paJ%3OOK!uYJc1sc\/;W$ZD%-Vr#tTFB6LHa-KbO+EoS3+_^C"SH!eqAK1?:XaW`K..jhkkW$(@!76H9$T_?hg&S&[MA,Z:@5b^*<OM\F'jV\;%R#Gh_apG1=NR4%eul*VO0\9Xfdu*!1G4L<1S-Q+d.dna'6%+WTdp>f>t;==2_oaJL5C0e,s\'s4`qB0(=](g@g,s=#)hW?6_A#s.0J:"oeQ,2+u=`i%mP]?3'?]#ZSJETY,Rm8W,5BuF*V$qq0qjaBPZpS`KZ?l4V:$:g-nrFmEMkma=j_PGOE?+N#91"+&G4siD-eWRCgZ6ZLH/=fE"pM7%&MI<Z298<[RDmd4SM%7(]2f;+BB-X4Ep6ooh^S[/8<R]VP40B73,!]/mdduEqMkL+S/^9?\"hR=3*8,e)7:I-?+6MX6Y3d^1TZtJ%dI/"FQ:^RUkXgh[!s&I-K3(<P;*]/bjCN[h@5Sg2Z.d@'@dJ>N2g_EYbp<?6bf1Z7+ZoCA)Q;(-jm5a4-Ini3HcsR*P8+m4O1`D#%9c=2S8_tJF?sC@jkVZG7roL1H0t;e/X;L\P6s-JU-:gVEaFX#.[0P]0@L+!_n<rBo.ITA?+ueDj/)F>SC^ZhT7B[1'glkW>:hU!`%!G5tFpdg-p#<=@.N7@p59?<$%N_1[c,JI<hiWB]EmV6_U6f>7K1J45*'s]r*aQ>nu)_6^Q\-?K$.pZ!(E2l;JdTV`D"qtMX1raL'%1s==4)-(%l$f7q]6?FY1J?"8R)j;1nZgU<"+Ra5;e!TZL+qDNbU@h#F`<"ZMT2KYU99N+sN@3n.XS5ia]jB-HpTclb/Pa#djteG@%H0;fCac!if&,&b=/=7K7DIoJHrWK;(@'Yb//lLQ,--nT?,<1/LdE'mVrH><-38n#[+WKaBCk")EaRsb_r1.[&]&WQ4kF?cT]aTSc%XHDh4Mj<hij"?X9ATu;3Ok'.k[cUjIR+RAL#57(t4n-QLhj*@$VaVLlC(e'%n0i9Qb!S3!<1D&sEt\#d"``9Ujl[+j_i`=mZ9/+p%g(DLQ_H2tk8DQ;0G-utP;h".4*/6=o`%H1f^+,eu1$4@pOWBe0.$>bf'VsPibOl_k!3bKfp$s\#&Y"t16!E1E!4AWZ+RqdW9MP(Q%3*$AF,#F\DaqhT1PmAqmMlk$O/_M`g@KjhW&km,[2mG<!4;dn65<Etm9J_lQg/]Eg7W;*Nr"sXY@eAgTcQhr*1=GbTMTn1E*69X^%aG-jtOs:&:6'U-^Mk"Q>"dQfdF'HC9"pHsEZAFg]KG9H+m_n%Z]-Y]<2HmdM[DN8/^=3-N#gG%gOgj$:bZ^u)($qq-HYSp.oIM;]%@@/2WZV$*_c!_%c-A5"`j=n:W6OQrWI.N+iVE[@H(ujLTh#:WaT'V9#-9A3[C;b*+&R:.'SbWE'YlGJ)`pY0N>8BViY=4[E1".;F%f6M0GmL2TT+W7eA-+$89d`<$)<fAdXnbN^;/tP19Zd"Q:3*tLab5-\5a(r8seH>BaXQ#gNpnA=adO]2NKCIHcp?uQpk:A,,gHJAo%,ua)lAh7IP,jQt^MmQU8A0]$XL<MIuIKCXBp-R]HeZTCN^=buqXiQ+ub+lMuPnA9G#>'D+U7^6!6ci,RB+AOLnpD4JL1K\6Zn&-Q%UTFDZk.7#F`[loI]pUC_3@Xq#r'@CCR2<@dio@e?]nHmkj[a&'1-BK<c.t]UU6Z_F>mN,n8l?j`)G1E0,-clDs(42S97!&IIoPs%%NTZMIXkc&Eflh]rMM)CZ.^Gs%mUAStrt@.S"!f,[W`+aj;^Z/I25(&k@,%bl;3'n"Xar$/=h:XYRE-kNO!+TQ^uULRaCJ#CmVmO%%l!>O9+fU>W)Tf[W\?X"t"8q1,ojFh^_/IAmp%;a83Q`ou@3VupgEeVG0FN0WOB'RXanE%@GrnU+LP+Yc\;<3M+D=TsAWe]Jk;JS*%j\18<UP!$K8:00Kl2@Ge3U4Fkb]tSk$V&%FSW$m_;Re!;G>a!`MA!c;,)JcriBP9?C\YaI!h*MdrlAsi\XL([AJggIOKa<`X/n2<%Gm=AVA6]ut4MXFc73]Ark^3kX0e5,.)Ff628UFSB+md]M6kh</b/n_QLa[/m=:X[4fke*:gJH\bRIYpe$eDKs,]_.3oE">\ngbdl%k^kN;`HV_"^N!tc0PRSHbn5h;1O%?_p<>#ALfd6G*ddoI;ifc(oGI])^DWAh-UG%r>b!mcG?3YELg_+!c?N`DlS@p:Ej6.^\=FQ;%gr8(o$D3YH(YUGYL.=L[!1P/]J\ZZja4p2;*'baf"OuW>,ts6`.+S/kUkaN8;b5AOO)On")"MN"D_sX&9rM=ZZE+;I,+KoKAu]D4%lZ>di9t3\1L)f$1Tl+&E_mr!ql`kbT^TRV[]_gL9kQG<TP%+62-eOri7<DfG'Hd-6;md2iTI(9$H*IaCjD5pDR1Y+Lk^e;0s0:=4%MIAgJ;pXXj!]U#u^P:.^Hq_\-9[Xop(1=:m!D-%4TJAM9KAH>7]+[&Lr77G$ALO?^_QC`X%?t9Z[_d:.AX]!8nS9I4+^sjYcXLZ4%l@?Ve8"68M%ie:fIR6cT#D;rg$X+b:6(9ga[ONX-VmMEqaU%jTG&'LUoU!Gf^@#jc(4)p^g21gJ<P'onRk7(KkPEI^9dR/AmBW&Y%`MTIDUa*ZFH"iXmmJXN.dXu;P]^]?]%TJXV34%YjnXQh,\?fCbqcNN@-`[3=I)nPJOFQgEs7>h*s-\!/`QmLUl5[bVrV!(h@*;GS%F]kl*E_0P]#dODm&5jg(FHN?jpSY!)bWUDbKl0IKnB`\hYOH'^5*Q#)Wbk\mFnB=C\e05tQ7lBR`*uhLYdP//dW)<'d"g<o,spYK%^(akFn31*_PUbd#)<(H=)lWu?%(eCe^\n((/^l_&,iaSaCH0HC\.PQ6KbS155'Lm!ES97j]M6'__tJ[(<DO9.,SO=9nkt%h,eX3a%^WkMU\f_2#3"6"VQ]8^[;<r5b.n*UK`,B[iHhHZ#^&*0g<YdeRl%#cO$]WuE<`K-'-`EnR*e>c<7>Tu$EIZ5+MidR"!r(2#qA?*X%ZIS:=@\jKrm>eZ`*W"cT![.=bXXNr&VP@8b=-`N3kE6Z8A<56-j8ZTB#3T=CN\?ah6C-#Fkr31<djt)j',Omo1FS6MiaeBn]+egF%oEF:'8BEi@Q5K_eD7r-2Ki`,ZHmC#hq3?@+_$9_aq#5cMZ&\Ht>>*4hC3-B6kI-`RqJh-.kpNsm3NkWUa`PmXgh)k$AttocTA41]%q3fL)HCrr0Wqg)@8bfhJV`FP%VE5MW\a?b_5.C'2["\K>$3,M3Hp;P`T/YZ"H1UurnXmrQcio#VrJ$+7'M^psa[N#OnGq6*o>.l)%E=8TClp(cp)-=rH0%F%uSs2>0qbN>LDZY"ScbZW\SQq1+&lC+^iEDQJY!<`#Om97Uhf*^1?Ju*n@,p$@p-b/Q59ZVA'ldK:_K6f!%=10OqbT3g.8;>*"n#<#0=s9Jil9s6:7A]M9ci`l.@%gpC)1d9_]o3X;6<-7CGZL\?NRilUQtgs4C*_$r?;5km$"+;q%2%3dake>V%T\=#K^9YiO:$`3]A9>+)Vh3:l,QC&ibf^`alu!,*h2:*7HU6Wj<P<DHJd`S.P<JA&a""lC/,6PJR;KMlr;2arffXC;d%I3p*o;!Q%lDP1OF$B^37o6H9lD5E8>&^LeD][K`_]FCD(02a:"SSu@j>$,[ho$J1*A^r=]Re?_@AbEf;F_U;p#R18bGFcHS6'\;LCr&BGZ)>^%e(;/#m]:VO_,2jSqH#ZP,]Tsh4ALn>Oc,ejYa^D5&lZM[%#>/86(3C0TCg(%f,ZBo/m7\5A\35jaMr3pFHbV?740+NNp19sH$J,p%'Y2nH0dAi!*(jYf;>@i5NXEUr$t`'CK1LChKkJP&5qhejCVCqop&pj,&\K;j2(e#!o2)!/ps&]1;(=E'/.Sp\)WOpE/EiVDjM-sf%M4k@)8G2)\D/L&E<tGkXiQIsTk^i!8cb]jQ-OH\*a_/(G0608b4]<P2^Z)K;)&N!r\UU,E@bQk$>2F\;',dba<Y;m,YklKZJsAXq%X6sYR]&68u.k]EgeZ(:9$9jME'@W+Eb5E6#cFUG!eNoOh@9o#46<MYe+WYEAd`G9qa&j%mG)&>U=%PsLN<@9>ILSiM[U(qB=.^Rs%irb4N5%ZlL,u!+%Qp6amLm(UIB9I,fGWSK)(a.RdR+YaU/e?'sr1tH-Y'&2cdrm6"fBaVXd8[t`M[?LS4_"7Uc!tTVAT4XQ-Y[sh%gb6iek&6'G(K:V(m!?t)5hZQk0FcqfE[Hg<)+=@B@hBJTVh$45LNU2H2rZUC8S2,;"J6'WiQ8`0D]g!/_+.hWmR,Y"5W]U*UbG:,%0^Nc>.er,/fnS7D3?uE=ZnXLYOW-_8Y%*?*`@Kc^_-%-[m315e5)+VmE?$\!W?"jCW5r:d75^'k7#oj!_)S,bMfX^N<:_pqDanog%P[joD<7@jNi6Vl%<U4QF]jj#?4t;EhJX!&&Fm*>'*2f!cbJuVp`d#-6Fi6Rc$J"-\@W=f"n70Zb9[qB9M%)?(m*ZINmU?T?Y\o@L%S9ejo23_/d6sq%9_b.-gH.9G6#IGL>!Oh7Afstl$+XWX[^kf]F:Um"RCJrVaS1n.[kEJiRA.&\N'%Mlq5.-g6?Z*X.*E<P8XOn6n%^.1%8_+OjIZ6\k7-L>&BCP;l<>\n.F=r^;WfmMI5*b9l0Y4o4PX%-KVktBHm1ZV'`(-"uY%kTStdK'R_(U<H"GDURsggaLJeh*:7%PlG.2<]qiNG\UWm<IU"9h/0I7l4LNMkY\0q,*T2oY8ATtE0<Efe@;^L*g+T5=R2<HD^`HgGa\tB2X[,^/L#_e\)HY%30S8&GBi(7%VPt2^\>"gkAm[C4Gid(!fn!;6H24KT5[hB&SC.`IRj?9#Zg(8t79^8mQEN`'Vc4J#X;07Q.!fT+D)cld/e4>8VM%Pj)2)8[6&t^a%;liUQ!DT5CUHEEYSI@uh"J]-2ZNF?*ZSL;<#;U00FPL:Z9RIYS8YP>&&A'oU&j7?RN[4EQHfnkkokH+qa:@IQ?$4W<4Hss2@=4Mb%6:rP>1[<r&hBJ-:4-k:Q1Ia5Bjg-`90QX<3)3IeM5k3ujcV'E:!@bF1RO$aL'$HfC44GK=rC5/5.7\Q1:'39e8X>)A&SD>>d'*>j%_J@&)rSD_8%M?f8s%SLJFNGk$__,dj,VkQ6B`oP_Oqed7&>HsX,<Qbi0`6<=fZ`J6pu.%>@F.%oTs@G4Y&7!+W%R159-G28NBn)i%p"6^9`VC_bVA]oa[Ye_<S=\ZV&-Q::\G='bXT+)CWN\JL'omr]3]l?/HF]IFCl*H=e/i1ub<Y:,Fl%rO=uO/a/Y&5T-5`G8,!ZVD%]i9)+>KM!FQV!9=XX0H@=qI>t&"3):ZJ&sj-3mK$9>.6BZ(O=Df`ZcQ%%FpfqgAdVZ=<na<O*o=PC4Z)-JFHfjNN"WS5d:a_ke>r%Wj[K18l?`WNo1PlqF3Es_>Qu@L1P5SMbHq"iV/>u=-\.Vg*3su3A;XABa#4iJG4:,o^?Na)$@m&&<p]:E9>4D-X$3ViC+]n>oBI$%b55KcA1cJlGWOK;YH3Cjob^^+L.`"o=nsF`<YRO),pA>Z,fBH%50D_K2F!(&M"W^]Tf+*aq2mt=MTdp"!f[dm-eU+J3MORdr\A9$%gDa5fI7NEuB'p\&oX%'Rc(?11s(e$'a&ke2!:S?TS$,uaGf>\Nqucu$$1LN<W/&GFJ_u@]^9a62@5]Ds`5jY'_N:Z/7hUpDH2Ei.%J/PCRiB4:@70m*tD5Z,N4=2o"DC91Y,uo8@7%,FDg3@-[bdI5$Y:PHF4NeM(Wb$$pP[0DM#o$c&B<qq,5[ugKrtp-87'om_A&>P0%lJ!W)m)LkdilG<)Q>BT%Q]q-Z`,S>MGQatG[gWO%O!@M8WWp/K:'3g/'iNJjGIMFmCuB$M0cnWZX(%BWJ%;cU:.C(b/t47?a*AFr%1I@HcD*;bHa*/-G')+#8!,9%!HmYE=kK8f8?oS:YL7jCaB`boBNXs&(FK)U](%0Je#*`<0(EDg?^Fja<]TTE,b#*msnj+d0_g:HF%ag(Zd3\;)K<)!5+&ikQ':Ji#f8f8mTp1m#%Zm`bZ\"W%.>\57m&o53V>Od,.Lmft'[J2p-Nl^qHpmd+qA0OpRA;;&-GFSk:i"N%L%[0h5lotXaO9_E92U4ZgCK]Lt`7-2.Sn#bSZl_kqqH3OH8:k:N%D2Xk!a,JoR-$%c`_ZE^+Mp5.c%@&&eM1/_hlWHf1W$0lO?Pd*.%Nd7>lA/lm9.$A%7+j!h)Gm+sbs)Pl89i3Wn1/0L94'gSk>-2>u&^!!V+_2&19`icudBsl+URa[LSNPo0PVE+M?/Y7lr7`FO%NW"P%!p,u5`re3Nb8e'aQssKTinS5!\./+f4.n`jD>T>c?S1Wqmn:>W[VQJk[_^^tVeB=mA.H*i9a1>4MTTleF7Vr5W3Ha:1Z<C"IW0HY%B>),03WuoS)LQIi'bY4<Uk*#q"p\:Y%s8E#[gk1!`c\='fTT4/7^g*V;S&8H,[3:aHZ6otZ&"B)f&BRpi%\"d99+=K0g2Y[pnCZl%cq8o<8;8%h7#3%.RmD0a@B+K_eA@e'8TVnZH'ub&Np`12;*uub9j:k0^<j)p'RQ,*'=('0&hSBSh!DFJ7P/I`nU/XA[\:$O]lo1P%%M(=V\:9T0M@4N[MRSo=Rjl.[SftFuVhdd9Ag)G^ABpB*\gH[0.<qt(-4r41)nCF102gH3kpZHKab1Z+;DEb9!%9,Qh(W,%WjX/q%K=WVa?gmHK1Uu^=e)IjPCnk/[EX_&;TRT<uDJXeugI\c<KKQ:L)KUdH<$oi^X#?@O&CIl%,L>A,jUHW2;5TQj^R4C6M:qAe[-M\M%Z7l/7ot(';On40YTHI4hA]3B/^,ORFL7]VeNWi!V2ZCrE3?#@kLV#nGRf.@+@MqVqY_*8heR$Fra:?Q`&kW'J__=kLl.qLb8e'ij%76Df=2SHs8BfkI;]lJim61+?J1;07>Rt!&_=kLAuOl[oB#TYfQ7>q@Nc,pgo\0Fj$mH+pKi+3&(S=5rm^<;ul?'NaN7@JQ@_%t,_%=fp3F=g=L(=D^EbjPpkb,KWjU&oIs^p!EH&0#U*5fJn+a;i/iBqdX2s82T9Bp)G5[XA3</]-4)YBR,k[5G:D%7h8aLb!#KC-(mr;%g.)";XkjQ:i.1Pbp\lhba[9ZRZb1bEbPHDR2ou?20s?NpWapCd>]mb].iX![4E2n>d)MIG*%OpR1:,%=%\#7:d'>KW>GRIj:h=1W%7ZrM"'Vk,TqB2&F-dmKh<kU].RAV?N[LM0r<`CRZ/dA1ZMT<6^Co#<0i/h*nBQb,r*o)V;j@$(-3C,\["Zu+Z,W:9Q:#R?hV4hWk%WWZmS``@.s]3:UF?&Du<<(e2uak:g(p:V[mX%c<O[1)pf3M=At$F<s&#$m!A_R.\nk=RLAjEkI;\Lejd`nrH`ajI.+H8l(/";o#'%]ScHiI)`UO&L&KO6Nb:=>Sr*<O#]2;qg%%on9`sC1<CZ6`p+prZt^A]A#U0)=d#F[W(]U\doL7MYpLb?RTu"$lb4WWJ@:(pHAQD3%aCL&/rBLSpeZdg=96rP%0)Qp&lS`eCPNQ^lr8,\,K+t<(j@^c[N,%9jA/nUdZ#AnBpOlo:XN?1G!Nq/Q@Zt:WIN'_9<CR0A8_ON+%hJ<f;9%E%-MWU6N5M5>BahT.:+t\8%b[1@Vb-^-:j'+c*[ThGlEX1X=!eCLGoa;)'?cP/gB<ZaNE\5Q)l\Xar'%eecVbrh\A[5=F%4`;F.:fjr=A"dKuBCP6XF?i05hmI?>1k+tTSD-G]H*!n/_4rXii<&N>g-s<][Tjfq$*XC9Q#)XHKMW`6AE<`W[DqBgZe+C*?&4T%%XO*QOU27:lqf\,.;93qBc_ZhM2+>tuA,3u)\T@uF"TGQ-E]*Chb24<D'5OLa],La>Ge[;83$^"]1O<T#>9#`]G.\6WI;SX0W.=Ou%;\OFMg;C;`?^p^L-<A@UEt%i$V!>Y4!j4\"FkcWaQqUekm9.58Pp+RM`t1CIWs=JuMG;pE0iRq>JQYYqbLPXj-TbjnN47<:5q#CS%O4\#,gGd)ujW6o-]lr7;B':NBc>0Rb!dZT`"YYg`\VQLF.E$"b?#&.p\F#k\rTOAIi[H1"`tBKMY.nU1kH\Li11E;$pnXA.!d^j+%62PT@i&7P(Q35LoFKc9q3kgng.ZS=u'nW3)'Z1.V"3&;OJN+fmopq^k/?si5loX2/-YCts=``$;-)pk:gMuI-Zu6K5N`PZ1kV\Yp%[t?M&+>brpCs)QPEcf,`.5M7m(o`eEo`qsfQ]m?CNtNsHTti-WB"LPY^)kC(9_96u'@eH[K1DZs=m_]7eI"t6N6EjN5`do\TN>^\%jGu"PepDa1SkJ9]l7mT0Jn'A4:p3B6.Z['NbB^TLc<Usud;.PCW+EWJF[c\N3+M?>/PMc+?JB8_"#Ga[e8p[lIQIkZCY2X!p=je4%I>i%'Mm$nV1Zb-nqq90!\_a)7"R4re>SldlBH-gSUJ`K@(A:Kbm>+adXVdrD=P3VXp7s1bH9Oi71WX$odaD&Fq\d2%L#&>A/+4'(%KAs3apc4-((KZ2ZN>i"5IQ>[7e,UsDkQU^[*3#]#IgN'!_h6XIRE*l'Y#=.1c"[6+M#q=?4ClH_23,\ZoDi9''W;,D.U=S*5DiGi%L4g8B,4OBuh0k#Q20,@peInH`jlktah#LMUB&61TM2moX,?\S's/*rS'!F('nq:)4/Npe3K84ca$"tasF.r/-Q3<=^k.&%H\JQB?%HLB6qRi[h+5+`"(`V3`>&M1(=,c<UW.l>Oa"Hqp[DFg5QcTqrN=V&@thj^K9`Y-:Mq![XHK633BABE2Y<<c.!0KgZSLhnCNT^"aG%`4X1_/hD(>ok?IVfB=_A36h=\isQP&.L7hFG%lLV&oF#do6M^nLD!AuE8"Lm*mfW].V_#)3QXNCFQX!4`?OKH5YS\"/?-WQQ17PO%>AC$r\S!Rr+>!*U$dG9-$oQUd^]u!X<kmfW2a%S^r\^oD$%:@1pAcI.C)FG@?']dHoO\3.44&X(VGf>^Ir^NI;cfZZ(YGm">\(4,%VD2M+a4$atTp[&)F2(3s+XlZ"_>R%3b'=p#\]Li6OQ]b4Q8%oOc;,9,2T1.\!^+l-ZQ2t4afHDKpZc#hF-oi+>cX2WEj)/dnECg]%4E%:oSES516Y+67<"E#A6+U;H,h$j(eh=JbUNNb[<2O=J+0c?`&R<k-gq+)L3?sr)S=[NnTZrKE;K8nXCi/Pdq?V7#DV@b&*NFD3%O_;QYimutX!&-$SNX<tXie7$u"YOll'#,5pNU`$5*2ob<Z\DA4)5fJ^BR`KL\$9rXL,uOY1!pEXiAcs"!iVu!B77l6`7j5(cP]Z5%^LboqENKM_SbY8Nbm/h`P82`56XBSLF-+n6^d-AT\,qFh?>#/3X(9D6)`8/D;L)G9[;J#<+obkmFj"r>QE00MH-PG'8b;($7isE/%K.u.u^BG:=]#e"8I7<R3ZPT2k7m2g"r`m*ko.BNZg)H_[XNZW)a#:^lpNZ@maA,]46)E_%)&R<O@)?=aO;R6PclLAa6VNm-2TL7?%JI#;te""/F8Iq^cdEkU];U`nR.@GZ*'YhbIJ-j6c,n_[RqlUuQEXE^E86agm/;.qt0FUPXdS#`+=F0gk-mfR0^o'3'g_+/QPUb'W%(>H&=!!eXR#B1UN@u6;gb)EhtPE#L!P5-GlOD/;P6sUr:4f]X*m0OgGnQd>n71q:VXbbW4\=WN['F<d_W*U:5_qW-5\t2r7WD9"-%re[-bMJEb4O!Hp&`?Z:DF5\U*=+eQAek@5B'f4A?-<+c-/Z@d('BBF5cDCY?i8?OQTm;5lY5.;5>G;dl&dgE-?>(Y@O;oQVT^D[*%&mIVqjnZhkX\q7%3f/]dT=h6.^b;sm](lXX_`Z""!0\eV@e)LG##:R,6W]lXNdEJe)%nu19TS<[`Ld7's##P2\EfWB9Wp<^U\W[d%mJpeqR[Wa%+tLWr'@673*+d'Me`HmEJ\+QhhdMYL[#s4nD.Bh#$@^B*Vsf9)<Q<*DmZ4F!CVs5l)$#J`8opAg,guH\Y\N'HoVrjA%GWe&I=&B%fC^FfM=Q=!l.,\lN:Z49r"I&U`)MZd>#3mRQiB;(lg%jJ_P_&cgVX&f=7T,WBa3htGA91-GDRQ95iI$[7BKE)C_dV&A%p7)Bbj?/$NOLBT2kgJ&j;YG]1,\R,LRTHBZXQT56,6K,\5pBp$Ne<CpdXY.#6Et>.WB,r-\bWIPg+M9G1DlBbs&qUnCr*1,R(]^.%_T6*E"lVX)EX5G3C)^`aQV2*q2oR0nm%NPZ9k@[r_[[M%,(TkWa@Dc^,1i)<Kr[C4i&QBi_]A2lP;L_;pg^`K.XU\CfZcs<d%="S%<!5Q]Q=EU<@G2kX9902-M;t8m?8L;U@*]*p*%_VtM]jH*ZgRR-\U5nA.U`0_q=e@?-/QOZC(B.%HIYK(*7LfY9<sf`C3^8Pjaj34%XuO<%ESch%!EEbOb,O9^Hgf$f"Kn&e#_HE\&ue*;C6gQYoQ9EPN$k[ON!0Sg6k[-f>QI7"O\@4+W99ZU1N3hGS.c:<WOSQ3hdPl`%2W,1Z87p#/>gI=!/AAATiO4mQ^SZ._0n(:fE!CTdMIP21-cJ&$,JZp-=n8OIUQPQH/;Rq]C/1<41LCfA2\FOpi<^-0^t_Bt:ljtT%Bj[<J8f8e7$s,bN,?ZJ9)N%Kef+%Ct/^1^7'mEc8cpT0'eCSm,8As6,,DV^K_a2>JAd;*3Q7uX=8`FLF4p+=;pKJ#YSjBs/`e=Q(%Yk0J.OnVl4o1c9I/e9A9)+_Eng@]MI`k*L+^+CSi[R>K07hhU]XSZ)->0-P5FGnE5!?1="r5"ujj`!.>.ibG"d[_Q_:'o;X=nMB=%"Hc.E+rqRsCV8ui+mWXMghPf>Ck`:LJF2;=4V&VZ3@Ab.k't_9j:#3MOIk+d=+^Ys!=jR9[$s?A/@#U;9I96UU]0S(Mk<K\)$'gt%Ybcqi:t9Ht7m,$V4.$j2>*?8C@l]`r2An44ork#'5XMEr!3@jU4]d5:>\FEea8&iC3GS]uo/uPj"$eS2+9?cR-qhZg`XB'T<H"X#%4+jlr./Ta\?4H.YI91r/:I3Kc'4"Sc'ejtfZ-WLR/X,o$bGY?i5d#+I%BLUQb3[6icVR8&lt?T@<5%pf<C`kGG(tc-Jf7tL'pr,Q%"4A(GRK?$TRigRMPed*f'Cg5g,<p<n1.&:'4/aDDcUn!#*H953Y`n^k=WO8J2Kn#._h"Hl](HFC%/bU5XPHNN'S3040-s1%'k`+P%lK*rb2sGrO71ftB^q'AaX6q*]bTZuHk@Wc(7-Y(S(OJXl@LD4=Eq//f%TF7UKlU&0jJ8\G$2f++/B@uc`<]VmZ/';ZP%8c#=*9gg%(/4\Jb.]RtF2:9#11.=k[uC.(g*8C%\Jr%o5Su=Z2%jVfS"Q`<7s/m#AnO+lej>[srFUoo*E/rM6oCXhHhQo>>_=,/is4[p<&\>N%fJu4-.B'RA<nYPKDi#'<3j0OHotBS$JUE;JoNpOi#oQStP-+],?b*9j-Z%?rk?'@h,D)Ni%(0VG&TbfqO'=(?WS/tj(!+&Z^8igk%h[:;eSpirn0%oUcRfp9L0>%2]<YjjW#/Vl/qn4Q$S]gHo;Xgg1CIO/8TR>n>H+;ai![@Y>('+d"b">'7<%#[B.XSQRgB#O<(rS0`%6E8j*bQ([p1QZ/>MfL?Y;JXhY++]ST!;"a67*oNI[F*FA;\IsQJTl8X@eE[dE,/GT/S)o6@$L&o#ku<EoAgP9$quLGcID)$-ets:%qM>p?[>l3ImAru1ql/lem,h4,Co&2a;9IkSE?oaK`b]>S.O<2X(P7DkNck%O?He1ednDLEc5.gNKSZ9V8)P.nGIdli,a-Z-E@MlB%"[WFZ20$RSON8peOi@$q.c;q_)l3oD$h2@'/RkYP/Zg"%)@smG:?NLQ:q^Qq(U=DBHK2j_M[1@'E"j$9@;te"`j#_+hO]fKV`<DE%9sPAcj)F#4'1.:?[8i'^$J-Lh7lGmm^A7DF5[P*'/Qi-JMpn1!Z\.'&HDX<r+A$/#jr_FV69RcZ@!Y]_8,(GVZDi[bK&:$,8qW'C%Gm,)1\u/_kCnme4W7,a-OY]<G>:X0eAT&B:2e"6]TpE7+G8)7kZ<$cJ*i$d9=t^;2Ar)QlD023Na.$k]1s;%nDrUMsq#f<[d6^8O%JOm?YRY0M\Ec]=\>fhl.gso8321@3*qd*<1Z?^#YHU64Meg"iWgW#,pM.MdbR[jLF)D]:p2b3o0/!ECE4`F"m+K]Fh6s@-$JUWg&%W3k`o=BI5o8B>`rlR`lT6'51!-+<?d8Ck.BEIVQab17Z$ogg.)+AL9^8foSRA!n8q;D?l3$=:u+N%BB%HaE(a.d,oYBbO*>p*3L,%P@]c/W\rug;K*7>!b4BVZ.ojK"P\MiJX0i@pNdd6(C6H#+o$]D4d*dt,T/L.A.JH&(;00W/Kn:ZAFkrJk?0^o+-gPqkeK8i>KtBS%#lKHL[1-omK^*8DSg`N@Z>l4_3=%Ha[Cp,,9.Nu-)Y%K?:!Z-`]*uqeIAk,H1<hQ#=2bX%';IOIb->0gY'cXI^OA,Oc?d;hNTZXp%3sc,$0er2e*em?qIB?"!oZ7/Hm!h`ap*)<k_F:l.8>i;u_Vm,h(fj8JMp"tAK6A"&jKuX)a/%E'q[fZF>/*O_;[rJrU,ccVW?hVN%a@+D6#$ZWcb<[`scRi6,`+.kA$X7g.',7,F`0]A#(;K6E;e(btYM0lQQ]$L\oHGUP:(9SfUK@#HMuYm8LB,kI)R<bfQ">;O_BWT9%>j&ri6+3$K[-<%rUb)!QIAH9dTiXBE5"t7jA;'gh)-Vc*S0F,@3#/8k6dV"&B>GGXQ"mfiO^U:kk"GYI?MTX(Eu-#+#C[Y6U`7BO%S_sPadAXljLRq4K7OcSQ>&gZ9"YsHEM0h3tLYE\(?sg,ZO<u3cn4mq;Oj>1Y/5FU?SA4E#-g<[h6!WWkDn"Wjq?Lug,1hn3o>,p/%Y%;"l1:I`:Am^&7em!M&9S@3cZNkKE;*W3)7W\o8MT]o/,p4NIS8iT(O7;1A]6'0D8l85uf`;ULchCeY^X3EqXiiZhhrl;t7ugCB%KHo_:3R5@TPgh&tKTQ6P,#p,NI&ejnC@"#?n%SPgJkL.fs'G>LbZU^U&C*RCe#s34q<8E-X7&.+VZTerLND10p^nJZ+2<#HO]*NU%#HRi.q#61S.O4"B9<:+Rn9I5%ee%#[%+`P4k^Y6sVjUutTGGcTD77h.g5$D<hXuuFmfF@K'V>`O7#koqDa(9X8gn*>W^bP%P/C-M%Qd#?,DX\^69*l3NL^*6F;eBK[<7Lu-!6O&j5iD:"AMKqV-,XjT94<\cT2^W$qmPDqH1sJM-bq7[!\#J>g2C?4@H:90Zg<Ta`*++B%A*<4aFoQ[Fo`*$Yr0-aI-g1%"&"L[iSCIT=p^nV6o4AQ.><qe$+c,Unl[[cR9-,mo%Od`)Qu6>YMp*Rupq[6AqY_5P0KeQZ=:0lD%E?72Al.c6#ml?r,;B3lF>a-->%PudXcLP&1&d\u3Y#'t,,iR^>@s4C<<iHi0NFYI\_So-T!IQa1CZ^7A9r7[4r<Wj0JQX2mp-]Ki%>@BaY'=lTbAm:["a%,B9Tb^8<W4kG&6pfRUB##Gea=(GR"m%:@JR8]GT!!?)lMVA>CCiTC`8'5k=eJK>[5Q#O8$J&iW=$$/7nNg/%m^d&^:rO1V:nZVX@)Fa-&s?7c)>`/a(O/SeFIF3f&H)oTJY\rM<I8jnb.)"\<6G[,!i,cdr0%1s.6i?0EB0_'`7dp&);2_@N;!*>%8$0u^QkWc+4R/Y@X8udDMQ0RRBog#+KCW!B;#luc=IWBkAc=T<H\rLc;Fd-n9\>Us&P"M!qn1(k*W6T^8><gDJ`"MpaaHZ$VD4X<%daV&]U"\]nRJkD9bHbUFXGQq5!mY3"&En%JKp@"u"7XM3`7!\M;-0$?>S9Qek`?UVbGC"'2i4CQB<Sb$6-T>&ZXh4NV"k7@efkQl%(8_GHYgnl-7%.Gm'Vu^HR1E<_@@n7G_0T1_&sqnPg$Ya%fk8cKBU7,G)/1O9;-A&bI9U[pMd_N+S>pgXZG%aTB1\On;Z*,9U_FNT%+?Pj$WT^Ls]k8JekEeNFoC,u'ETZg"TL'dkE(S(Q]6.[RcYHRp(8EQK7F3PPA/&)$+_DO!M)TGb6t2R(=DAp+9%>/BI>W]V5^p9)%,AF0/"/7p:aQ]L5j%+m9<r,XR8=5S#9GO.fn>Ue2i_H.6NbYN2g?OE[WM/"("!=i#(OR#'M`8HtoiiUo68F"^eq]<%<Keg/IkkC+%$9<[W\W"0+#f+p2-*W:r:,':"eQP4Gl#e\EO7'(`NsgO<.KrpQ'l-o%O,Pcs^LbOeJ$".RN\/@mh&#]JS/27&@>S!L[jq93"3CND%!]F]up7!bg)H)7^R6qAna-aVcY=h8qFZ2_k-3j[N@kr+,A`Y3j.os`QBM&QNkb;C<_=K_D*:/RCs4'fVE:RI_B)(;_`rc(!0?M)j%kZOCAQ7u!4kr_1N!d.-.U@a(*BF^'pWpcn6&?(SQS3+4!-M2Fn_7jsE4!B6ppXWaGUp^7J(*j&PqEL;]W.'$N_$T'VA>ed9;#Z7Q%Y[?)a32&8#'gTdg6Chtp\L]fN`\#A;[E+dt/jH@bF3s$Hn\kSlTMa7lkBcG[m`KT2US*^al+t[lISFM$Rl1Vp$d"Y?B.5HUS6Dla%%LHh_I(N6k#=o1[k^*d#`t,PC-O[&(@&a&DpmfrWU\nTT/DkjHX2j8HT7?b"laLQ=(bGQ^J)E([Se14h2>Sjr<4X?7H0(KMRuf7$%&nVs9oA,urk,8-q_6h#P?-1.1n@KNHo_h5*%?Lk$r?/?-*!Z(3r2bM%ZKu8[=E4FLRdFU-;A+/H#>jYG3&:k:`a7J+Eg6PrDPl]f%UQ".ppdk:2alb5SLr8iq'l8fhR,DD%8Rb\%9:6:9-MQLcf#]'AdDeCJQ-u)8=!di\5"3\RQk17S:VJ]-,p>S^h7IUsdg+drDmU?>%/r&e_fLJpqnhXh[DZCk0M@AhbC@&IGF`7hg*s(1,2,."Zlo:Zj>VV@iL0,J"(fG&W,Fq]?p;)TZEMftpTcIEDV@CB9NV`i^>qshF%BV$<FI`ZR19KU]o92s!N(.HB=[%Ug+T&S;O*W0GGaPn!jQMD131VE@*TPtFhR3*P=4/2-u*2N5e>+6n[\g)V!XNCkOAJ>hlWJX#j%#E@5s]!S&=2sgMd,j)=2Km:3<!=ltH!]B0I>V4+WZ97tZd`\V8^bE["7\sH2@?XP*3^2S+RiU.SG,8oW*TUJR7<:/?;"T"DTNoMR%*_>?O!4'qh$^.,gh<L</^oakn/s#WoP5hC%KoTR[7'H1^P!l9H.Ype7OKHJ4SmoM`Y5-2e)2r+2FmdSWj3X&CVX'<+&3?!2Nu+Ml%!gbBnWg.\[r=ZS(`hLqQT_ueUXt%4e:6C/Z]ND@$W*iuf#I8E,2LA`65Oeo$hD<ADfJS03cKh(6N+i;Pe8UEj,Qa8ZK)'uLetqr;%ngLk>45p-mrUGM7r&6Y[TE1-QQHfN$jfbT"NfD$.fQ8_3_oau!e,Wm?[OE53(DZ\\#oi/0JV*l`Z`1SIEhOU[+-WX]_H0G[_-I'W%*o>=3W[-(^23oIcQf=Q@#[DX\O_YEF#NV;6ZNLnX^s+9@kscq/`1#eq6S:H-"4W_2HR,E(lK=>.D+!s4[OVW]UOc3@Y"KR3SnjG'%f#I70<H9$IW^SgF0E#8Zmg2tjf2bSfK@:7a`m>h<e6n$*LT6<GZSC#GZ6Bq^2IqMK&X&MZ')3]-&+1g>lsZTN47%!t?Md]dQK2%s%N_"C:>@$e#=Hh6c@_P:`.$mSL1WL&d\nl[ff"i[P""lRJ:-B;Aah0-SVLbRa6j4BtEjBM*&Mrt(!Sn!l2%)%_3`[Y./DS8k'd<re%eJG%_TG:(8ZpNK9m1WrC[NWKl[3@gOQPK5d&VgY.!CuYoO;eO(8_2,5QIrQ2=l]DX:3q;l]DdQ>G#s8-K'apq0dLB^\c`Va_G`ti%<@N922/6^X9[/kjdD\67i*&N".'MIZF`>&ijN]1uTTGR>Y\O*=A<to>;TX^TAn9:gfa0Y)H!MQSB]E%*I?bm=GeLl>]`"aXIei0A%30$<1Ir1_4&^#B)`P;?<GMbSKrVTa3^-;Mlo,kaFnFb6h?iL!%^]*KHDu]>(J,?7cn5E]@-N7K7J,8_+2>t,fG,j/pmOpKsc$-qo%Y_<;JIl-LN?bV!fo(do'#+_\BL<?8]54U+4"VF<sJY@V7l,bnG:FL0Kd5+)>6K7fc'!lHgfs$jL5VCB<kVb(Tml*Nm$L?SS:3P8\%,&,AF$WPG>N1]GABE:bHOB3<i>K!7t"-eb!LM3],O??'2BkHsB=IH(Y5led>[2"iUPfFDp5[@-o!"1n1n*qSkdpgrOZ=+*&ps#=1%Y_H8iM&cN1l9X%RZV,QdHf$GB;.66&VGqR1hT^V*jJG;jmZWVU<4GoLmqI>L6't*PA0B9[6Wcfh815^L,-nGV@Y!@4d#I\=bB5N\%,eR*6nTc"`[KY^5AaV;N*pZ*X_X%b,0eXHbU[Yh`1'\=c,he%jZtY+`gN7?'8Vo#E<Ri_i=4%%SLXHmYCqFP19EIL$KSq7/K#6L9%#9`$2"%`n-#6;hu!"@j'pVq*q@:MD5X>*8%@u#^f*>27rZePU;iRO!R*+2tPmfUTWp^;ol/1H2.-Yp[]">5.Z&,.b(e./qb68)H#%M@Yu15[!egOodE(5toH:Z2t]*N3PI&8UtTK>cG?Mq.]fn5t4kGl)u:k8HBPU1]e,GLfg]'9E\0N.JJts_@Klgg9=W\&fomQVSQ;Z%OF!-!)/^"#:Oq0gLp5oK0MLQm-s]mOK8c6Ga)P2u&ll\T2VJ]`8(S(LCI"g]Pf?Qn'O'`pj&"j@;2)kQ5)A-cUM+rp3k+;iL<g#B%p&MuMfC,Y9bL+<NSJI7mRBW%%Fk`EE6<8tP&2>H!(174US:<4c7EuU3Bnsn,<W<<E)uV&CWO_4(\<uM)VC2ngM-,D[<3TsfF0sP?%^V()#0nT'h1Z/uAk+u0/BiH]V=&uh:J:ZFuNn0H;637I0NPS3lYgDT)_7$sNG7ms7ncAh4CF,;^%YmdleM,j2#_pX"mlSaQ2S`1B%&')U38/UGXPKptfGt#Ph%AdS%kd4fdbep[%[@7I+lL2-;O)B136Ii=C8LY(r#IBT3T]R[MaXKRtp^U!.`Yh>IcZR0IA+@VF&)KRg%*:ZS,9WoTM,M"tmIc.:T6q[%rJFt3R;.6#VI_&2XVlAqX6UHe'6'>Ke'<W;2V`9%&K!K@9E3Vf2'<-kN5?Jbb-Pn:ei.C%h<K+\.%A!Geo(=hdhbm-<^A'!@Q-=:,(pA<l!X0D,Lnl]JaYZ-IiVT@3?<.j8]@i'\h+Q;L3][n6s+,PHe8^L2R3&0nI>N@r*JE<Sq0s%L@%8:jppE%WL.+#gqD!FSH=KtX[&(R2eTa*:Jc%S/\fA3(D+7R;bb"jh+q7h8u8bQl]bEHr^*4d0rSJXEbn*EBj$9D*D[)pB[T8m)4O%p&<g\mc3++E)Q1Ya>#iW]Akp`C?2[8KBkcWT5+^Db3N,%^+7)mkPEQjm=mq/,=u([/f7UZJ7G8;WtdDD<+I[PXp+53hFGl5@nf[`%&;>Q8DntE4d*K1NrXRX>*dd6Kfqfqg1\Cs^JLJY_U[MU3%E5q4^+:!Ah2k5CkOidc[ue<[m#Qi]GJr<6X_K7\NSB<a<>\$3/VpRe%"+,rq!N`+.daJT;$GqQb\Ab=SPl,YNb-@lHTj`,hl/u"aDC@.<!mTFQThchA[;H./miJJ;b,^k&=]BCAc3[5XWu\jBa2\F+X-Maj%DS%`"T6Yn,HtoQ01I*[-\LqE*0[#NK'o2(bi3b,C#b$BLK`suUbC!6X,f1V0oX%Qk(=uBDI`6cJAkE[#\4o1X[6\0pcm-s&9iqb=%KM=-/:()7p=gH%U]7O?`P'N<ebMj)KlB5eF!u$dE0(Ik7o#R6>Cjim$YUm<r=qm]U4-bm$Z\p91.RD*'U8W].ZRb(mVi9I[0:P])%]Ld+_ALFo!!%Vb.?S9pL39Quc/FHD*OBu;kMR,jMH8/JJ8_4WgG%2;_/m%0`PIcT!8GK"UeNlh#l.oi6hS4mWm&%-V5Y62BI$T^A%ZobsZ<WmQ.?3C>*XeCh$B`G9?;7*Y`mG&nT_iW,%+jERgh<YNu9r?ou+=F5B[Tc#B>ID<fV#622<j1FKhAGgT0uF;5\73m`2W6#(%6WdVTiV\$bU-\%oq47>S!\Tjb9JUm4OUDKQ1LH4k2j0[@_pd`>WO(mak0bJZ$FRsJF,YN'_CK#!k]aUe2il6_<+F@OGCtnET_m<+%il<4IV+-)XD'`OQ#&;qRb+DjeX>rIrnGPp'TfGS02DQPidCuZ=eb;e)kru2u+qWXWSe%Gm=Iuf4V&>*-Xi*u#RbN]R81^RQ-.NE*%jH6A(]a\E;jNX<&$6(1X,JJ-G3!uds-;2tiLr`A%%N6C/drBFY)HOfS/dXgqk\&=O_OOel00gt%mF5@g4!6R@1RH08/B?,'jX3GH%PpaRMnY7)?CC4mpmdk:OjI`@XU`hns%!6P'HU4d!<KR\/=13ej/TL(FSoS>&0pWI]%>]_6<N!2P<$`dd'MTS=jW@/p(H3\^jN^Kn%nog+]Y7QU&!K!rK=YAt4#Z2RrZ;YaPC-/-Ic/)_sg9lbrNX9jnk;oki.C'bJ9fLP#(=Ghb;o5qaZjbu`JCo1jbCGA%N(s[crPT+D%H[U-G-^a3^iWJ@G4Ihh`:D:3,,n%:E:U/5"[\8.4p)rD#<s\@\71)P61cgJndN,B<NaWPUQW;q.>Qk@hH5N8`03XNo.[0):7YFoI%=,(j3BQ16!pZ5<;Y^OoY^3?,0bW$eHcqq7fdFdC/=I,9P3Rad$=jZsfa@E$cnOf&WfV^?->J/dR+B3K"PL:Q1!9j!ij/Qms=(Xr<%\H/PX=$o$U3Ft>t0molgjRZRq5aEf-#:UYfReEK&gOoi*YOY6WHDhf=K+1dBW/B*%GL7!HqFu>d\J,RlPiApfEL`kk[ou*9TL0YH%^FLXlNc7ObmtKG!AWQ.%>f#WZjn,p6LCJqRefeXU1f8a#3*kDA'?/W%,>/:C]LTA<*fqf9eZF-HHi]aHpQ<#`&d73Yki?jc'JB_S%V'0k+F1.uC9MCq+S\2%D+TTO<<)6#W1F,cn&uL/&E.oh?MdOq1?X0a_]5374J^M:?:X`mh.PB`dPn"81.p`HR9".h*fsW<$M]Y$g%k)2GMb)sf?5IC.2BT+:=?X"Kui,2oR&Y)m^DMT@0#`2,.H7EAL[7#KCC%H3YiB($@)Qr$QWNMgdeVkOXS0*O;4?Nm!2r8'6)Sjeh%afWeHio4_D;Jsc<<`TnLOK]&l);+#+&.;KXC9L<-=q"X_e='g1l6/)P\N.4COTO&&]\JRQH"%+b&>W:=/^<FTh?:_;EeA;mM;\3/%B5Fi>bUoPu5mIQmrp=3hX,koO9=DK.2!S+/`I`1FK%+l.n_F>'UCOn/>o&q3@8LVVoDrc-J%Cqt^0@H*Y:9n'qEatb/E]I*)poD.%aJ5dXoBm5c.G"j-o%2F3GU8(VLnSW7=s\ZdI'N_g@7ef[^pcJ6TjTFmPUuN!aBPM%i*pR,ee_d9k[L1/EI$GO-)Udkm).jA.IrMH%Xj5sri!t#"kb/1F<UM?XP_njL439M9V9ac\8-#R*=i(]t$424je>Tm3j30`BI[)-,VKhBJI5'(>0Wc?S2ghCS,c0])@_)RTdUM&e%]N]BE3X`u;!ikI)G]%Bj)+UZIJng!)JtiDd(:Ac<[//nL>EBFV%>e0\-!r<!W77X=$MIrW'*,@2:=C,\GFMT8CbHhim0K=12l9u\%h'V>$L`p_2IsQ$X4[(R>T$3o)rsN9;:pBu7#;K?`li/8eH!p%>LZ>O'bkbCqr==LI"o3'^f/e&<J#;EhaR!CS,R#04GDXIrSl.0_%lph7FaN-FD$.Ge$!J)XE-6tXK]qA_2Go"P9UV[8Wnu>&[kn'*AD@BXHRu31+IDKD']QKM3>sfc+86!_&YQh+V9E8s]f7$UUP_Nam%_Uh^eRQ;]VZd@i6D,iZ?1tL@$^CqbjoHRRA2^DoG0^BgoEpTqghJ"<'#S]YC6Z/\PlQRgn4h.X'PS#uK`?ogH"K\k_#3"^4PA=PQ%5(UguR_XB6W0f&$Ib$b[1E\q01_#W'b,*M-lr."/$l,^s@T5VQFMP92e:ELm3qJ+QVZd"0.T[h*JM3!o\>knt+>GHS[DL*2::pAm%U/JaYFf>nh80Li=0l@@9*QX%*?5i]X])G:m9I?KKeUgYt?'9ik-s=:7br?Dn86'YF6sA-QKZSq0%/CKs=t$7.`'7QU'2E]$p;D$i%M#mu$.2pTcZ@/KI8PX4JK4r`s<8;L&&SL:i<54tMD=aOOduX.8==`G^mTP7%pRk_lJ1G3W]8Y:O-+iH9^&i/68X4YM.sc'LR'iMX%p!@2!nGQ<G\D&A2@N;\#_4$(i^m!Aoocr1hYZO1opEhH)c&t`&U:E,O1rtsG]5(QuVaqo;nk6#Elq#FD]qFUPmCbLffha,J?D)29%1-6H:[drAF%bo&$o,"m!o()KMs3<VD3f@:oo<VsO$T$&T164'_%LK[2nl7RI;oWmE'\u3]WiXWm^\@N])&T.Do0%N+7.l3;6O:<j%1HtoHq&puR4X;S@>[1_P!]#S=EXM*61IOo[`T0"?kdgf1Qi7bRQb[^uOD6Yu3."UQRPs`>'8dbcO=72_I^i8u5ql!gi&?0ShRYhe%@+<OaK]M38G9o_[-QQ`R\1PJH7B82!mcidoK<hV$Ps;j&U].n5b)fC2N0iTd6QTNA[jn:W@qFk6?Z&GClJ!3>^Fffm\I1pri&es]%'GDMhW<(lC`ftdd<am+V-&9.%pmX*7OR-@.GuZ7mm&n1O1jJ42X27"c56^*Q1<,.n;.X!C19agD[>F2dP'te2aag`:Of%G9OVl`4%aoDYk@@?,n]3IK6!H"Yu?R!"t:cfgL&/"L9J^:Aifo$$Af6!Ee)3nZr3:D3JNtLm5nU'PKK1%S'j0VWIno?Xo?c/X]77l\fMBB$b%3'n2$+(na+-"'Yo9tA+i'M]a);kj@t=_KYakWm!'1=T<k]Sng5\Sji66,2QfX*OUE?+'Ksi:0GKm893.l8NI?E[#`D;Vb!27-"Y^%=jpsL3s,AlW[-M+;S?EKa+u#1<RUX_L,`qLjIk,oNl>R!IjiOO3clroi>*8]j9Q7O"T;(GOc<[ar13Zl>n/eb^u$cp"f9eT$%0rP%Y_W2E&6rCG<S;PV(M4,89pD?(fe]*iJO(E*)9Dk0GR;Ec4;X*A."W_=b#4#Vm!cuHT!"X&1YDoe>i"\rbmJ"bkO<QJY%VnHF"`Sn%\0B72MGKB]MCK$Vd(=N,8=\_tPDXF[&/@[?>(&@BGJ<PY&1biehW@Y"cm=n?b#O&/g=@#G^;)$ukT`WT+;fNPVR6_?YNj+'OneuQ%b,jhK!^9j_)/SU@!#&Ku-XGF>O>P]9.[S=!ELHk4R1&0hmRb*l1nI'%6?3:^CVGWXqrP@a;(#5L],Q%H3"Wssr4/j[;rZ?`i^9uL%4WGPRQq.u[6?;dpbX^*!]'=RbZ(@3QG.j*ENc@2HZ4.=7hC`=;86U>]+\Z]?fAnZ&",W9q[t5k2B,,Ad^HLdsFlcpmoI87Ko!"de%J9]9aeDSkGn")9U1;$l5.9n9_'#M/@XH\!:mCp1EGGb3<bUR&039>l$;V=MeTCpFaQT&YNX4KcC#0p\?p[3'al?jpNCM<s]^/q@W%%_?08,11g8:Ockl*(lZfM#@nc5elH/X4rAV%XrT$6**qpmrQ61;In";F>qJqcl@5=-HT0BR"#1H,rn/hqQZ!6DHCh)LBRehS/-i2%+C*^"g]c.0_u3nr9HYZ-6dih*PS"1OCpf\l5WE_i[E,un&1,j5*:.Y06/q4(=IVTO6J&=`g7AraMeA[V'/^bX\LoKpBgH%EUfj,o%&Z\pS0G/YcFPsd]l>UHZ+&M2.l+po#*g@]VYa?KrdX^S=M`(Ga$u-M\*]f4@,?\Te_%*Ao$iR21K@Hbcb$(_"MqA:,P_+K=/W=?0%!eeok\9^1]Migd!U76VoVAg`AJ`Tk$!_^YTd>K$aA@fhLJHiXk@g:U]NV*jS]TBi7a)A>r8\0pQ(,O^AN4+27S(+1%KZr:H0m#)>%&OI\JFd:=i8I<q<<MBpD&s#FQ@Apn.YlcoffJC5KJNbBYX;Z@FHFtlr<i7]X8-R&shF21H4pH%fb9DUq3Y?CWks8IaV*ocgipmPZ%DZV[\nNN78^Bf\n;%pXN$AkM:2b?prA<h.KY!30-:\SL"[T-;$D*aS7POp(@M8'ZI#c)Yh'Yo?W2&Qns._Z<nc%/Z$/)i#@_8`&(%dWSOj,GN<OEli01WrbYZ/9h.,UVssEkp3nUhCkmdV-XbrA#Y?,T16cYcT&m976f,+e_@fn/5Ctt'[F=L>Z%OiNX6il#$LY:BKY_>%!LXibmf7Wk=M2UB9=RouGNNG'Q@c0YL6*2e&ih6i;7@bJ`Ngk&jKRY^fabWd`7,h,e`eg*n!5$oVsZA:]&Z:0;II?])5b-C&#fi[%#CaahW#NVoPaoe!*;@COGMNinXjrL)_K:,K?rr/MVdCe[$e/L?]>\sq5a*[7cl<onQ)`<Y6sWB_MBuPE\i@MTfl!t16c=Gd?&9+7%7pI[G[D1un_$(Tu2b<Z'[0b@o>RoNtM\\!)rTht3qA!U@W$0u^;,n;t+1.rs]$"_`aNl\Jhh-qGcn$1i>ep]@qX(2kh5*C0;[gi.%8a9n_E9O4T)>OP_W2-sO<"?)u1:'thlmsg"ka?irp1^?g6LRK\OQtu<Kk4'&Wr->"N:gs9`;DnncDX(g'U!o6]Hd&qbi`,iqbq@c%Bi@OiBhhc!I(c68-413iJ>!<f9GZ.1KF7isaDkp#Ls1Ule%*jH=aI*ZRfK)G2J(:77R<):_,"lGNhU8/E\@#RM^Ch3''^74nKGq?%GGV!<),JDD7>f+F?0'_cAM?O**HbL=dON[#(qrjMMZlC18;a#^=0"rEh&>+91aV=)]_OEsTlCgo1YZ2SI%"L8.p7e]QZKuo0[9G3%Y$kP]bPk(k*O9*0++BpHbPP=DLL./Q>940E7(J7Sd!pqD?AcB6gL7j7g>5R"5L4KHLFS8mF#bdKA!(Q!eVHN_&JXFZ6G+oY\C_UU%*P41s!$qR8TeZ0t64U*c7sE!/#M"#L,e>=g?FIj:oM%Z-aR,d['+lL.;XY.$r,>r_`q1FKY9#$m\*HWT?.qPkfe>[W.G;U4Ttfc6%@N_<@o%CSbI4<-VHMWKB#GEf9_)Qm,I4<e"Lp.dWGK-dILZ(4AFj5O,1Q?NG,`&)p80":]-mImLW*1cJ33`>IgCelRl#ZE\$An\s%KGc7e5'@OAcG1bP;Il;T%*9g]F<k61A_4hP\aS#uN[VaX^.DRVLJ01LQ.8TnQ&"Vu+ZX(n8'ko*Q8@a2$q8R-+sK&ah.%>FqT5ED%>)X16q^X_FHR&"!0`BR?>t4HG<$6:/CgSKT%`pF'5UO0'WIVlOD'n%\q5=fBm7=UGF7'[V$!Kc[Q'H`pPfX]qPR^etCU6P>-?gjT%[HTl,'!Bt&C(9If//AEKM4!chBi+\h7l!a]V_P'KKu/W.T`s4fa+oV:DX36I*XLi`\)I'n-lIZ:[B1(P%E\h6Y5JY)B.J[aC_B+0%8/KLtYUP+Fg1A>T3G\==!j]-A]K2,c,d2Y"c*lVb5&-o_"-$mnMg-qMdcFnH<COWBF"/q=!I?.+B<kBE.qaUNVX2`F6dqqmAB$3@%CLcAR>:X;7/`rJM"rB)ddMfN1]/aUrQS+8>3qn3^"+^5rAFK%SZk"lWE+U\ACbP5&0D!^M+>V4JFZ@u]BnHg+Tl)#PZ)[,-3-"K&%s/F$D5L3"3nkpPj//`a.r3Di>)'mP'0p!"5+WJK.aCGH7Y^lUp5A^rcY].4NFcEK;7UtI-R:8D_FGr@f6><mpN]sh'=hf<KkD-A#%.4S2=`;g/Zr(NN01rZ9"CT,)nLF%+Ohr(W%fRDf8QOD8$r;5AuI..QiDe&S;*u&>BXTNO,c]fFW03MAL6jInje4A=8mB1"$Fa$ut%-_t^-oKlD?-@*#Ve_ptYb!+DG_KdW#Sn`YJ_^E-OdfMO*gN2?*7e"m<W6?dQq=[aUB/ltg0`'L5/H$E"]jWm_1PZH7T$E,=Ncob=%Pt3;T2h?A!?l?[(fPDI5Rk8Vl?as=:]g^AiA*F22Hj&`Ma^D]&6DpI!"->;0P.OcG1+Of4opJ)D;In^Z'g;29O9QgNR[Q)Z!aC6?%"J-(`'pP4:RG!ZV)$XDQgp4DO`]jE'0,4iuf`h*oVO+_@;@7F/0d&VaOK0AAh*I"<7l`8+Elt5dLa>$/+1(gpLa><)+]rQZ0#nk1%n]L!ZUU<LmT?Fp8%c)s*G;%K="$7;cH]T5GFTVr.po#:&^=eD%aB[#Pd)1+"6CWZogHoe4h,$^]'ZQ5#0%B:=ecsl5&r>Ta@g[c*%YrE!lFLb8cqKZqPnqN[tW0PN:\T;!CeWit:>Fe$j*8@csSF8:6OjjcNAs'T8cgp!_P]DiHr.'_6B+`L]:G9F!d4LL,r`$;V+t,Q"%]REEEBN1YM!@0i;H*)Ugi3eHd87nSDS1e%XnOH$<#nt4jIVJ,S;8="2@g8TErOHO`0&Oq\e&tYok&1Ltee'kdQVG]'X#=*m^H`!t%?Pb-gX>Y4j#_LN*h+=Cp5KA?cNM4lSAU_6V6XfJ"1[L4#jna-hotm&E7FBc@c#b;ADg0iB1T0Y[5]QK*5iMQ\!@aQ;G*dk56J=3q%U2;SK?)U<8TS$`h"pD.7!X1!u2tA<A6idq/7Z*a(nGq1?4Qr6$:q,8;HhM2Q^"?U6o-R<M^ac$R8t+,"\[&7q.m;IjQ]R/BV`"X$%rd/cU,LM4Mmf\Un4n<E@Q:\DO#4jH8#TUtq0^a]Mn+7"R>)?;gk:n;Xcugb^[;@OtbUXX4FQ\VT#Y&n@'B<Vh%<-')SY;7&KopRH%H@3h=fY_n%Go:fC4MI`:2_t,NH?[V2Clbb2JX`rGDA)'!_oNJE:tMt`NBIHkQeU.b-\pc)D.[gj0+R.sZcL]u752hp,\dF#5mn/F%JU6S?4.Jl"%DcuecI]9n;0-7ipgs^6bh>%ZfnsidL[aHE]'3U0)Te`O5iSKfcS=>%BXG,o;]hIrr2!bfF%FrJFkd.h=rnY$'ue^f%Pp?Z@lE1pMd1'S#`T:u9i[Dj=3LS>-$*PP30O]0'gP[cEW[#OBOUbfi6GmaJ7IUnie_<f?8)askVuic0O2A`OYYBeZiB0/Edp':S%70!AA[/c#-'*rYhGGHi+4/#QgDIM%*^Lh"UCA1,l(RIa+dM]lT18.MnaaeV+.n\q8cY3+%8loj0VVYM]Nt8=GZo[dk"NMPboq1\.%DLa)^Lt1?a^P1qH1Io8c.;q=\Qn#$=P\q1%2qHE2`TEc1(Q.$kR*]:$Mr!YifcL#gB?+-V]scTqE#sSlajUAYI_Q:_iteG=S/oD)%m`1^0VJZV!pcNg/?[JoP"5&s=D(Yn-C-8rmb*;]e_e%N=Qls-QLhPL%V@bSYpTPt;(6NTG8EW"'Z#[.&*8Fmf0LBaHJ\IJ7,7P.<%Q^93^PNj,LQ1\j9&KkB72^..*BhDq*2U-p.mo5\99g=!H:?-NGR$]i+RAi[I3Cc'),$I]]a0N:!Jp^Yu#R2Etfm0[NH8Ef[-5Z#C%f^Hk41Or.aj@p>#O=9<U<>K3HL@2sKL-2e!VrAuET>Sh$FkjpeUbsau1hdGgnF;AAK_;RJIr;#EUlDg,6Wm:fm7-\B-$?$,&Mj3:%G15V-$?+X5Gg0MT68>fI!hZBufVAtSV9:*c^YLT31?@hPPDmaOCQ0$ka,8^+7-)Ri)Qn<<$DD[AeDl1Fb8q;-7oIq?Z(P6M+="H7%\\FIf/)g(Cka,0E_uPnQ_i$#bA$]/`HWsIE6<Pl)@j+]6BoSU<kiY^obW%MI.?^,eeI#8GaLH?.[EqG_]3U=^'(pO@"FQC^3WT#m%9Dt)BYSkT"JMhJ:JQn4k!:RjfB)W]HN+e&d1T_`S``ZGoo8M-qfVrOCnb?KN&PhV1!0R1/@=k;2PtR`BMSNN;F.BYJIBtHrLp;[h%?Fi_&N=@+(Hsft[$h7AAoN"E!6*2o48-+n>pn#W"BrYZ8b#)G.c,"OA?H0BQ*P4X$J[i.YPF'H?2]*G>"VrF:L,)82AfItcE)T)n%,"]?3!\Lml]"!`>l2u:i]&24T3FNbn>`^olL.:ebK>:4LQN62c/s*fS)+jq<5/R1F(L:c(8>hgC+d++:<S(*Vn=k^=r271.SW_G!%EsM(teseQ3cndH._b,e#X2R+'P1nLR(((pPbXNphMR&AZM1>Q'Qg$nohrDNuWk@<+7ik!uD7mi=k(U)4P@"@'F'H2@2)d;9Or9k=%86V@A-S2%91H`s3(/D:s5hEo%/3+uM.^I&lfG_%YPWFM38RPld1`0]UjY]9qYcT:(#\6"CLK)XULHV/QLK&Um6?S8],\6Prp4i-+%[iEhZ)=#Mk1D[]dmZOPG8E$aQH$lh?bIm,'-@p&uT5IYn+Cc6Q'`\m?ogQ:@bae3*dLF%YI@a>]B_R$0@(-?9"@T+lLQUWG^Y6F-%I$kap't)Q88-I&MQ<B*ZD/)?&nqsHih3e`SOqV*Z1_AXTX[Y;ddqe>`g-p$(X-`Atf/?7Mfo!Y#KUYh!LVsKuR?8>6&JKa#HA(;Q%hf,j<1OE+RJYcF?7$!P!1_=8(dmHFQs5k;KR^Fsqd#TVG@7>gu_@.fBUi".9AX(P*h8Eht#Jh_GjmgndYQY>j>n:=b\8:sk-4EJ]%k,KX<kS68iGmqdZEL(r9H4$NR!t5f!T]WH@X+h,e'5;p;F=W#<O^m);=Jc/*@5IKDk[sLX+3@T_Q@M3'\Pi"9/Utt7?PStmQ((-Z%#6p`-Pt3X`/f#i">E6A3-,lr#d]je(1LR,^#o"#ui1A,US$S("]r=SrZXS>id\%sCEsmH`G:MP2"1=4VcFbo#>5J%@F3c!Q3!mSa%",35ts-@H&-&X"9S%7[]OKlt4=^?Xn,K2q[Cm]5:<K]60l=7mkpAAc8meGOtH&p:Lp?(IrH$M4="P>6b.JE%SH^=nBDT@pi..cSZ%[@1i);5A$>7q/*nVFtgMF:t7s[Am_X1M902[M'%"_I^X7T%M9Y?9/3+IB6'$TqXA;QmWN!eEStL5PS?`)E3U4hVB/HBqB7GiGt,=%>K?!'Rf*<ZO6!Xg!YBCEl"J>tKY]$1bFo<gQdm-I6Rq\sMBq'nr(ZqfJ[EP\eO].<XFeZ2"K[=A%;[mIgE*e[gi=QBXIROlM!;]e%^q.LEj^#;$]s-9A>NFhbB&,7M13;T?VC/Q5GIS4tk(f`7H^Wi<o'@%gbdtO[b9YRT/4a6j?7sJIJD9%FM">kZcB9l'\6KMNLu'-I%7=jcG,.8[;b=)n8L4JL#aHNVI<J&H"hHV*n$XL;V+B;$pJ<kWt?-K&426d><ZnH8rJC<l,""TY`2Ns)@'/-Jhp9qO-f<au:mW?s8%)#s\BMpVDd.lr$'95;m2n/Ij67ZcZ:5F0*6XQpbVa!t!joeJ(G=i2,^-<-]Z:787YdbD4g"+_WA2r)XMiM"&_c-0<"[5ZYT5[#J_%=Y:L-7h)"]>K^Gl8/S.MbcGZ$(8#?LYpR@BKi8>/'XmDqaTD]+\a^G,n-Vr_R7=0.erVUZrRM>,F@NjX3)2/r]!]@DHRSQRTPpo7%TL;La)*jH.P\n]@X,P7Qo<#ntc)LgRMaRRP;QcKG)23Zs.hoMS:o/5n9^Osd,8ZG9%]@0(>FMZP258t[)lZ5elO7=5/q[SHL%p'n%aTAV=Aj?.d]@m0-foe+*E015Pp3>^Q)nZ\QBQ0;HlBK\_4=0K=6LVc(l7TeYeN4Ci3P/?)#)N./^Ap'B02^":9%[?:[c%in7#lOJ%@r9M!@)3;8IZYM_MfmmL\trbRA]m=^e]UsQLcAjHeB>h^e5%'YO9*t6B;!#"bO?>a&Ziq$>)*`Ml$R$(&NWak9;ko__I[s@(BG]`%#LKF<g'DfJ?,g&8^p&H;24!&"n^]%glIo)i4/Y-Gj72i*k[u`pMPR'cMV$5'9fm?<CBE<S?=otPqHs.>\8rEg@A:eigD1)7\M2fs%=l&QSjDQX!m5MY*]'>/uS(NZRfrB?>\`YN],#qtb_WEk?)=+@m^hRD<^_pu?K!fAGW=C,4pV&SQW,J]578PU;mM5!]ZtN^0AQ,9R%*CDs26%jtcFs!a5@Kj2X7db<cOBe6Cj/1Y.,#.:ac-+qEDA?jtX>dutT1*2>9"7Lf3!d^3!6NlOhb@`04_/24>BMacX_l.YI-]D.%Mb=-bPC&`=1>X+^W?N329Qh,TnuI42:1a.iAAcZF/7/"Dj1E_e526G?#:1Xl>pVm4]]l<qZ(QrTC86r7LY/g\4e'+WYQBX8acR^>%Mbhk,2UNFVY;-#X:A6!s$8O>J;K$]gONgFfoNl>X3(=s%d7`YW%PKT1SROVkjhVp`OUsjdSu3>en"NGHl9)$)+m/c]N_)M+AotoM%Z_,7k=`23rPKfgB*fB&<K&;/5j1&kG*bQ$_#B<,>b/5Le5i$O.5XnF-,c#<i?F.s:qG:,MP;-Tq)jUIl'`0d$,><"s'4H?G%TS[g%kj"U[W]RlY&1sRYk37p[2q`*&RUn11-m77K.@Vqa_?Ts$#M1c-CpjE0"=:[P4XEk[2=1\(>aHN1S?'e.YXjA$JnV.\5YP%tf6^8-%MFt:hKoC8.Ce"sM=>"85_R8<_i:'KMRBe%%$VE;m+^$(4!E2mZ`C8;50p[)4<!KA$'Wks-d>ks8<\Zec?>lFYX^Z1&Ga;B]8A^_8%)@Gg^;nOr]j@?W3lg;TBL:Yo^^F=/:.O`WpBHKG5,&tBP<8IF7hoK81V?H@_-Y;KkA]_?"qaD.aA=LVMhg"aNDWaTgKXE8l>FVDJ%p=9N3QEn_]2TeNl-1dtrcahf0X#>IB$TbVC^b/=<o"n[clH:lgF)Pij'B=:@MSR7*gNMdmVdFp<,tSp&#S'U,15d]%gVhCA55$2k%9K!J2/E]urb9]q?ocq%WH-.IU7CF\Q`jY!]:qr765$L'o;)]D#F68qH3H#+2k]Jd-rQ4p!)0]i.CDGsHqV-pab=8d`H"=Zn'uXRL%8TS6M)\$`G/\chH<L36b]UCk@c'/of;JtZ.$"GPO6<QL(T#s/I[qAfSq?W"tpKWj28r;fAMEG&V&I0A!?ag7g??1>/'N#4mSgbVt%cdOOj]2X^:B5SAOp41odDkSN&LJ3hK?Bdr?kJd<3R:F;_)#^$Za`!LAJ7LeqA&Ge4[nHG%jn<%-cGGu]r:4+cncH6lEep4CVNVu,%Q_hQoB/nlhc"A/_`,.%pdM<:MZI%jsQOUg%V;EJR=tZlrm)q_pRuhIC&LWJI#13o,B%s4\h5(X_Hj-X=;f>%:2OSa@jr0A6iOY"#%8h-<Wk9an5kh](^K2mD(q_tk-,*BbXP-$=)^&$Ckj*jTB$0-V`J*(t%g^*@Ne+q]EQ9SVX7*o#3@@W#nU+;3IPB0jUcVkfT4Z&A`%1:IK=Caj\$BRmB`A.=(Jd$Z\A`,jSD)4=-j^KhsTSZHL/"prb1=]Ngt0VkQ9mleJhVtT?MpDHiU-G!Hc,I.MU9sc2Q0VeHF!Qk`P%VZZ?q&gt[R]FU%aLQ/I,`RuYs]ps8[d[sSCp1R;6W.r/8/<_DcC(iH>bPk4"k7@s_*lO:^0K(5IjD/"G]*3e$EE9O;jfB**BWaJN%elKB)!p)`Tcarq`=)'4_#rEgsg5:J6QV6EEd;($WgD/R_VQI1tS'Z'8A7DUeL$9b9CpnU_gum,3-r3m)3s7O)ndAb$&n:Y`.q:Mm%86TN19:.*mhR-X^-%bs`.kKT^b'GWi(j,RW:7\?5fh\G>OMZR3)Ve1;nD4_EUX^Jbf#Qf")As?kQoEf[//"4?[9,R:Qk`7BUD7l8%M]gdLY"CRV,j(#o2.R$r(f?Et&roT+BcJX#(+fH?W8R7o8K7r<iK#8s^"B,6Xc:CE%7q61O+T7!>oo3dWKI^s.+VD-9;Mj7/OE-d%I%SmD*jeA$WiEU`Y'o,r&KRSkUAPLj@99MB9a&_nC3(H;0!AbXcFO:W<GJC/P(RYNZ7s(.!b^6KO:Z^V?kA>5=XD>saldtF(ru1]%jp9rS18-HG)`]X1V(mUiPC0s,,9blnbt-N"m7&6'RYYHp*=.(4`KoItGu!#3>^=+l`2XUBhan6eJi.rM?;S-W&lcALLb=R4"n%]W%_"9&+*#gK&,dG`F.,Go2,G)(TAO.Mb3;7BfUutM)-TujeM:0fI8G.#^Td;+s:"K+_@tk5HH1M>;O/Qs5X`b:+h.#9RDX$=&7F,pp%jKcU[9<s3gf8&NBXp*50_`_,V%1dEVUum==9R$p`$%m=ZVD<^H&NlU,L-s+>qC0C%F'8Wre1<`B":$4aXRLb]-;==HK.R5*"\Ro_%W,[ZeV+a1s3*5I"s89/BL^5C$-+(ElkRQIP\,Kg*)HA6sIjj2INlMa?MGPWe._PtLeb@K(BZ.gF[W&2n-D==[9eq1T!5"XAk!O\V%BX_Mn;;uF7Z,Ab*<;hVAQ^U](BgXm!20lh$9t=M8%G4j;eLLa//j;N+?YEU-`]OBi@D6!.^`G&I#Qr8>iNVtrc4J\,rR79U!Sp;g%A&=)#/ssC<<*_:WaJj<bpM7eBEoo+YRJ6"[gWRbsA5:TMGVKr_c#/FF'BWlKk\P+Z7EOWOTf,?"p3baLg]=<(%-'FpX%ZZl2,MYi%1N>.rj8!l%&2Atb<(J,1G+.sZ["*g'0mSF(NuaW'I(@GBOYq`bJpA6<^'7L<kK\tS].oM)_?eu9ds9c'<M@U\-<M(',Ph$_+j-\1%e"oT;E=XsV)mr<hS$['u30cH$LlnM3dp3XHcoA$*Q<,R;=:%8R'h%7TlU50:9%8#,)\kKDA:^m;!#-D%7@U-QoN/onZHZmVk:QYl%\g7o?8ZQjaU.mH4,+p(?>3nY-$*/\D7eG2E-aI4EK:kWpJZ&;NqA^R4fd\Fo<YIFUHDVi*oL'R+8p61&-TslREV=f8iIa8R@gO5G%r>aNV0g)nTjG%GI9&gK5([^5'G:b!Ni&;_"rtP*6/ln/RXsRcA<mD.9VqaaSl4P@-8@?C!Z-NQp8hPsK9QY3L?_PIlE3%U4gA4MG%fj+l&.U9\U*\WGG[(F[nnGAlDb#Lqu-mbX\[oXe!rs/V%8oVY>@m*Y;(-%`#e<i9D4B>T#KBY1WY-+%sPHCiBl`43pA?+ts7`_)P%ku1%D?PBNSLAeGU7-=(pJhNDMHU7-g'k#p:q)"&K+3m.5Z'p8,NC0ErHl'/f\JAGCoOa3bXhsUQYChX!-c2BIU@$/n1?B?Apj=9\%U#H5YkBRp'=<'Y<9+,nr8Er5"[ck./=n6''*\`p/Z09*!3\Q!>X(^Z1O+;]@2BPDW"nQ>;qR?3-0arrLA:AW^E2%(hn]Y"+Ba'uo%2sk[n8dApYF7#XQMBakHM^1%JeUB(InEKO9^]jWiX4ZG+Wg\UhZ$*/L#j6gV&\1_Y!XgeVdV6ocYRD.Q)5cJVNX?)D;#1HTma'9*%if8K!Ed'UJ`WD>_4']MDF#iN?U%=Fu4+b]_m0sCJc5!<3LMIcH54+XD*]q[DG)DZD$qkEUoV]56B0sLJ-POtj:D#B;;6Z)%V[/_T%Y+IMK70V6K)R8AjX#.1uR=(Zh0Iu[UPbbQIa@Jr'dOG61UuE6V>5%`>?Eg\e8DV@fH8t0Nh8XfShhs,/PJpQP1H/)B>m5C*Ab<?9%][75\]&U#]MKm2VPoH'8'p+9-#mWZ?AnDr+pB#ZS!r</L5k7h-F+"m+jGGLR3pj.MS4<G@HE-7B%:rU,+1g(gnUTcf^DiqB]/&:2%Je+7lr4GRDNT5<e]4cmIEEX8HKT&fHMJ":]4sV`eOMAPe)Sl;HhSb^S#QJ`m^mkD9HJ70Y5Fdi)S-8VO'lu)a8#2/9;+QI(>scAs%YH-4u$LmqTr"+f[*7kl?_3$rd"Zj'^DAspsU4Y5TW#p:2.$LpAZm+bs?"1Jsf,XC@L.JGfYXAf`HU;`][5eY@#,[T(:pRd"FfgZt%^:ZjDZ1^Q[JgTQ7FO.aN,-+;#F5h6NVZK%oKqCu.k0bH;M8@nJXkk?\/C]_8YRu_9Mh"#Y!=]rPHKMugpfCdTX$i:\P\P`%/k>S-%)/Wt<EdGa(NI-k'5u[BX_>^k<N7nC]9(&go6C7M-_#qg'2WebNXZU\P1=S6;\lA"Vi=MT>hQUs<9[T]PTZNfK)U85.kHlon(WgW9%$7NK-J`Jtd@2Jqb>r1!,UPY`s]%-`^R5\<igCtJsC1`VY(k[_j@PPH[Z<L9#*i]rum`njQj+KLNf@&oB:u@123'TKqkZNUU+*ng^%W&9HAk(DRfV:)(>DNVHO>F,RoGcW#r]hA*pEKp4q.a^C$0e3M2j$'?_?lt2mb:6UhPnk>>o<J)?,)SnhU+Ak19!tj<eID2/>/0YK%4&e^1CO]=I+Mg&#o5P:B650`Y849^#-&%@u`o00-G&59>Ms)Wb+Y!f$A)a83ZV_$5L7p3Tob!HPM8k0C^dq!cF8H[Qq7,q0-L?[f%oOC]+>fjL$fFOq]Q-@<\X<T`Ep6^ARYSX>CbgK4%j`prN"d[_D);NhcNTE.YlGd+)Io`1-QMCO:8SgDT4e`p`384DGcT4=ob>rsG%V>2)OAkqT7ag'qdcqq^:!qWr5-%IO`Cbi/7ZE&`So(ujDVP_dc]"upTFKZD+s.4#(U\4.HZ3BqE/p"BD=\VkuWI=C.QuVYf!9:V_%qkb@S9`BR\BA_g<5i:_W(L*nL:t=[?a\#dc<%(U/b5@Hf3&*;.kI4L5T23Riap=^@FZu.J%Hk[jc<jm3;`f"do9RHN'86Q48SSh.%qQUdBl/r\:mlTb=hhmX"Z:`EjVrp2h)IE/0aI[=!dMR\GSPO0F+Pn03nc/L8bP/A%Oq.j3-.M]D`H!f?\10&,,fu#gYrb$BmT@F%%?C,FD#EW?=_'7!`F=TU3ZScmC7'#Kk&*:5s:?QI>s%Tq.#?n;%R'M\':pQJr7HVbJI)2Mnob0jtUjD,tS&g?:<KB]XOS`MlmBK^(%X/o4&`\n2f^_AXTbG)/$.$*+VK+JSPUi%_l_+%,Pc7"/!Qld/m*rPmT_%E@06/S2A'FZ2/3"`B%J*gVuK4R\GCd*oF$l*05*.?&8%bIT)GHuPE$J.Mr5>B-4d@5_=,EM_'JM1efrrn]*g_((WH`oI>F@9:NF/HSkCnQ'+5[b8uNg$NY9=q%,L?Ddq=br1p>lg=F!ksRP&%/0Ek2O.o7aae<K,Lii>s(l-=n<,%40F#V>o(0!=;,32m0r8jGKK'B\1WKKjU5U4e[bF_GX0>_X(l@N%o6<%_N91fmiO6@7*7*/&r%'pO0F8Elr8-T]iR/ti\;Ahro).UnM3\5i'NZfW#K#u?Eqd8V>L'cCSth:,at7=YX#i<$>s;H1&/K)od<Ro'>=4\sO*)VV@6'#H<!%+^)G@A.hKXO:o_Q%6C:F`<a3iVa"I6&OoneC&4(9_<?JD_E6Bb2.JPF-dg]foKWT_H4PX?43(7[.c"+*,<3o-Ab);5gBJl>?(e#a%2"-Z1Z3Au`m(P.kP<^a*[ou$X\^G(a?kFd(i$1mLWdK*Nad"SK9=!oujHD;C'.rNu91C6pNL9XFh625ibh"Y'b)7G3]$dt>LO/4R%jD]uDA=+:V7iUKdFSJ@4]p=)n%P<8enq7Vc*)'In87g.*4ZPh&;Agc?,;#CAp5jP$(<MBg,/=g:@<KCU3TY>9M`GL*1eKD8^3C[h%<R"_?g1D,FFb1^gbT3H1`r,fWpa!mu/^m`W@!`R?e8s<KR#]DlM<pXHJ;t0#7F-4JPb"O-fHQH$'>mr!fC9GB%CB2$r.7(&mT>'K%]'qE<+>:kqqH1c;D\G1*%"U"i-5fqCB&"XI.uOUXffN8G'DQI](2R+W.oP=TUK9\Q%)19][BP"Lp+XQnkAg<leZSIJ)V+9;9<7b@%&N*fj,,$hWF!SG#kYU;/$YBY<)0HbuZ8nIs!W=9'X<o1A[ViaS?hhq[BZ\nLNL*SdkX]kIPAF(Da*I-?B0iJPF*)J?0E'*gOq,CM%U(P`=R(f;bbu!-G[=[bhHHi9NomcCTj+3d$\>QUDb354A^6,t'DV?)CEQ`VLD*SF+kp74s/!!\/d6!um#eJO,Qj4Mhm]R;$<ldgC%TG5kL5Y.%W0ZV@I;%l-Q>P1%TX[cK[H4=^fB83NH.=)<K)m7rkCN"h;Nt2:+PJT36M'8dt]+fqb42f7[Q5<n=#U%+t\OVjijoUV[%Z9*e*SSidN,P6dSmBUlBi9\l*c,kVfZfYStb6H_-r`4n7""?uD<n?4Lk@JdSEs?\uDNe4/=cV`t3bp-ZgB7X4Z9[$>VRZj6I41lh%MAZ]P1*i%b:&0G+]&L1\,T1`5W1g5.s$n,NXFPM\eLJ.^#^DK-MSA^uiK0'e'OtuM5a#\V>lj:LjZ@:1WuGFuXVn8sCISWJmL'Fb%>FB<\jJ?ssD982>/[$Z0EupD;rGt+Bq[IY]+1E[)'KRL6raCB7f9nG6J'Nq-'c"6;)5-rP9U>+"queh<r'"HT1?J6WTQ0c;EFQp@%0"ukt\RNJ#Kok/I9:kWuL5$RhF+&_^EfPT0CF_R+paj7"S^.djnud1;Wc\hoC66$RXh!mTJ+aHW@c"IIYVQ0oVOiKp'MZ;I\Zt)Y%e?)u@h$ZL_>#kta$OG=n-Yp4QcS:^pMSb-+IVmGGd$&-Z5!_H'VZ^DmA'E[JJeH8RNf=$Rk9UE@5sCtDTS-f:Jcem_mCoB0."86i%N*;(t?AQX&5Po-jlV6:^;Y1?Ya<>$`9Lu`,!ct4!']^/<LN#;dJD7Sf.9MPW$X0g(hPB/Un4('mqK_Vn]SQi7\s;kpmpN)-Tr4!V%(G[eqR,=FZkO,Dh-2$umW49t9lDQ21!.T),&PmkQ14tmdL@l217^b@P$r+/jh@UVkQMQilJfH4&Eb-#^:A83?O&C%M7)s`2VVUk_%G0eUnkqslHZW334RqYdd;TWgSoY8Ak)n/3>"+<tJcJT;9=&B?\GB`1Wh<t3]#C=1F&34ts!$&gfqtr43IO"(!&g<)#%[@]K/`m64%&;6#+B\]`%\JA?4O&r+g>qSC/kMkMJMo<jr0679EYn_)14G;"OFb=g"=Z2t5XCCHeI8p/IlI;sKdOdp%<KU,94rQ"I<2t)L5dj8k%[RZ$s6ZsCt:5X]e6)$U.%gYtgj(75GYQ[Hf(A$Ef^4nuQfPOj93earlHF<8^`@%lV"[E@M8?VV9bPaG]EnL<9mhRO#[OLoB1ELW'%(Z+6+aq!Uf"Q_?2-tAs$4P\*g:Bq.R>>:XHig+a^^_ndsi9]/l&c-s/:!,2ThX&J*aV[mNq1MgO2S'IEE$r9MT2LK^RlmC"iSK#/%^H<GU-LR1X!7'm1L'o"-f6(?LM_&)S@S\@r\G`/Dl3bI+[:Z;$elOog__'CkKgY*2iC\gbb\T)34+qF]>hTp4p$h+N9C/L57idR!%3Brp#d&pcP$oJc_TYV!n'sb-!K$C>911h<3O9;s&A8j-5Ol\77p`_d-L&1e,dRruC3+^k$/Yd_#)<loo1.;#BIISu/B[_OgcKQ4,%X/uP#5I?>l:.e5`57NA.ES"UQ3>jZq>tkVm`0"^8M>;qhL#5?F%>?[p:=k%kla33c#kfUg<[=&gdHA3kbdXr_[?-M1.q>$qMKUTE%)iS<Be`=T*B2G[0&^nE>Ms$7g]KXr36rHHAC$0P+`&F83kll#((0MDD$Ne!:/HUg;8r!>J5)BsB';J?B=M@ENLI1KtV$,uIA^EMg%/FdN!LIX]-jj,L;P/q+Yo`FL.;/aW/5o'"C!qPt5;8,GqmC/L["/lni-CQ+Hcat`c![jg09[)QO^h>iT'DU*i2G^V,bbk_eM.f?G%5UpcY,9JQtRA)Q;EZ)Fj_@*BGBOagBo!ERYDWWDpZc"=BV;6X'p_&G^:)XA;ak6!t/YXlN=Ir(^Ei9hEdDJ)"pcrgGj?ls.j6!$?%SrhTQ9'f3bOd=4*Ua6n*\[N4/7NRme5E5PKX*9;d3LAouds7*6[ENERCk_6hRH\d$#+Rmp>Z[sob5Cf90%J5hA?729VWL5Lb>TCu%%rjX]^,(Kf2%rT10!!op@q#2<oC'AhrDA1-&JARLPE[NM4C2n\5*.aP'JmtF,3bEEZ"-_P9$p`c[O`S4[ulp)[Jh3nH?)kT[A9&r%.]V/T#clP642mDRcRH`2]]XBDc,n2CBGR]]4C2p_`="nT(Lnad'!sZIP<CK]bd(3\WGW)9hs)hODO)j0nd>'8Rr"G]:rtNVZ*PqK%qIAZgMckWs50[3A,e4k:<Amm?IjoE+jtd6"hV@2XO&<8HO?X"XN0u6kH'Ah(QG@%aS-NY6n<[?/ki<j!=tI`DkDaH&LU(5a_%X:9%nkM?=M0kGRfm1`11Pi<8oreGrR/VOcUi@t8@UEKSSs$I_H#_:CCbA#R`@\i4)fs3/rYHm4g"5UK'+O,*mH3Y.rn#_$;gK(,[4^h+%@q!r':*(YO!LItR?.EK:C<d==.Eca=YBqlePPC3/gnqR]c=YdP&D4$H:[hsGn"dC,c",QgpLsea7/^Xo1q7;q_1PC\77nXN=#]d[%=CX3e6E:TUi'&L^MAu**UiM8>P^0Wn1>uG[q?&?;II=+MSVr)]e;n,W,6"7'eWD<e[m9L5*_tj42p*;k"LVuJMM*[X<KhI@U(XjK%3Ii.ae(DeGK.;qV'iQ2"N4"p%B+7\4DQCW(fZs`a\.6KPRZnLN;G)P@,-d38?Rg,T`%tJZ[W,7AMV[sI8q^7<<:OWB)XA>\p:nhL%>+Zo_8f5Kf\mE36(1gH5FmAj@.-Y4OUi(2uZsoACB"Y4K-cfoD\J/]s!?@Tak,Bq&YGk@EQ\ud6.@U`:nb'3)FZtra=f!c42^W2p%+!@mAcnB?;BcNeOJbdB@_TqlZM_4lh(cuEE,Hs,!.SZI]K%%HfOJne2WT"?q'9"phOL,9Xb##F_#+i1^pQKUYqZl8o3\%bL'p7EJ%mp^?p3XrJ;]rmD-nO'Yrb>MN7*m*s,MlZGG1=jZ-R#`;Q:@%?Xqet*6jU5Gm.6JJbe;sV!k0h%$?p2,u`:5Pe9o.AV7t3.BPieFO%cc*:6I2<R1"MoGpaCD5N[lIXB>m7pCWOSSC8L_;+T@J)PQB`HkZZU[ak[q!3#`?om(*88e,=N1IM%05b,,`!/:D]C%[UAmbf.@hj%]kF7II.LFajPiA&;+!3H/<ak8_=Fc+iD:RgKHK7<^I\o^r%]P.[^,G/8u+@H.RB,^>9a`u-.bRl@Yk@q\ckOAg.9^jH.+'cX!K^q%jSNUb`L<,oEBch-AAC+Pl''46AC!3?f\ct*cG9S0$'dbpJplo+Td7G<7rWZ.*VI?RKh_^<+o+(O,VbZ-7B81iJrL?UaAf-US(c(4%PY1d!h*t^F0i>=oAKCoY(!9GdB>cdp`I-t%<B*CL:gpk#G*`L!k-F!2+G'Kri28o4>8oFHE$Z&'P,LYZ"<4$t54:7((*miQFj0OA%7Z3TFeu\P[;QLK4l./?aB1YW;`cCRe18ZOkJBj7TT4gIDE&ES&D%;E.LQ^d,b.%i1Af?0?-E0ua.\9*&N_o&:5Y[>_]ZSO;[EOnc%Q_)+egFjU/^`%!5*2AcN+5%i8W,-U;-#l7E8s@&SL8XJeM&J%hNKmhWW(rOoXrq`jLXot/NbSqH6osl!?>rL.eW.t#>2%hd-Jr&e%^uULmg;`jmNr(ZIJa_F^&U5r803`GtUu*;YcKFM2ij)>$A''V"T-.%I>B7Jp.WrhYHV1Qh,k,nN7kQ_O3Kd][;Y[Q5!2,E[]sLCg%(1pn^a_L`Z?`ZuUM9iemJMKd_\Hn3+8=8%[2I1MF5q<i[`ub3qcF!gK:d:MgYh7'RjBab6<OW5^rG\dc$&q'P4j7\'j+3L%Vmke)%dDYgsZI=X3Ya[ckCCclroW>i"I$37I$].55B@7.Z+B)%M'-S+a$cmtNc+q!e'd4bj/3Q,]5[(=D95JVdg/+B#_Md&JG9e2u4mKS2%&(1@J9\Co\\[9O.J'<dLdqaEDW:?%B7Na?$7UQ$AO!C5f?U:(Yfd_6jdiI+s5SS$5"ZKOp&[0(2OB%HRS`(UYPB(BgD$dUa$&ckH%14nBG#'o#u`*2i4'G;&I1`<mWEmOlO!$MGpagU]9+*VCofl/#@dbu&(#f"e#\kF`1Ld=AUg7%CeM'EQIX_6!2k\uBK,%)72#;.%B%h2TB.Ze9sf(%NS]p=)(ifj\Ld@C2[LarK#I-e"g%L(3B((hK)No%j,_$d8bc#bnU<0pLH25]<k>c"nU1PIo46fZf+0ac(au&job"%S<H<Y5A/un8W:#KN$0*rWl<-a,#%'Rfe(iaP<L6WA*TAq259TU/#,3_\Cn%!^9/dYEeu"[WgF^mf"dpJ;V39L"u%]aDWfe[]K@[5%(920Z*gOnHSZVh(PN)`X#%+u*LCe:4HW4l3PB$2un"NF.^o51C1YJPY6U9BKBn8';P#[RS%Pb?em=?)d3Ga`f!r=XXL&YU5b2j&J%]E6Z5.]P1P0+&QOqrsQ:Xl>d?Ql[D^gNA"km_k,,1mYi$,Vg\XE$QaFSS:mG<aK3J6pF&u53L6d6Jf,8lrL!eBl)IfI(1X7B/%Bd%iIk`ulu)g(;3smOb@@qUHK4hK%D_)ie;OBnrfI#4N&O=WPL*mOCN8uO7TL+S4DDaD\^)BtP'8+iJjfT`r/@T7hSQ65+$coX^Y1m1%TDd6R0.[m4%";M".V;d1\CYAl.=@tU.rZ)3R-/]-4T0N#.>`#qThHiVbWrPXY2B;"O>k'oDr9^I_&HhfrqYYgs74??rUBJ%rp]^Z%LG.P7qnl4%rl_A+kI>s0^L)Bbjo>8T_]QVmrMQ9;o?FH[O$A-nm?b$6U?O<prTDdeUaUVu5X,/;\)2W2r:KSfrVHB_ld((Yo#''T%hgG7kp]()f:VZkGn,MdU)YY9*G-<sG?YoX9?iI"$q_nGr\A.k-G96HXeb^l7Ie2[ef.WcHqS0cDs5j+Lo3ZnAhuE$(2rD:GlrUr>%s726.s6FU;rTUp9rpK5]IeL,Jna5e[qkkOMrPS6=+'sErVf.(_maJZ&Iuh)<mZ4ROjjW[Jq!Lpb^\mTWVa(.7Qi@00CR8`6Z_.3V%J,aF?rtk+E8ET~>%AI9_PrivateDataEnd